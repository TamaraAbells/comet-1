# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AllowedPoster {
  createdAt: DateTime!
  planetId: ID!
  userId: ID!
}

type Ban {
  createdAt: DateTime!
  duration: Float
  expired: Boolean!
  id: ID!
  modId: ID!
  planetId: ID
  reason: String!
  updatedAt: DateTime!
  userId: ID!
}

type Comment {
  author: User
  authorId: ID
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  id36: String!
  level: Float
  parentCommentId: ID
  post: Post
  postId: ID
  rocketCount: Int!
  rocketed: Boolean!
  textContent: String!
  timeSince: String!
  timeSinceEdited: String
}

type CommentRocket {
  commentId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
}

type Embed {
  description: String
  title: String
}

type EmbedIcon {
  href: String!
  media: EmbedMedia
  rel: [String!]!
  type: String!
}

type EmbedLinks {
  icon: [EmbedIcon!]
  player: [EmbedPlayer!]
  thumbnail: [EmbedThumbnail!]
}

type EmbedMedia {
  aspectRatio: Float
  height: Int
  scrolling: Boolean
  width: Int
}

type EmbedMeta {
  author: String
  authorURL: String
  canonical: String
  description: String
  keywords: String
  media: String
  shortlink: String
  site: String
  themeColor: String
  title: String
}

type EmbedPlayer {
  href: String!
  html: String
  media: EmbedMedia
  rel: [String!]!
  type: String!
}

type EmbedResponse {
  html: String
  links: EmbedLinks
  meta: EmbedMeta
  rel: [String!]
}

type EmbedThumbnail {
  href: String!
  media: EmbedMedia
  rel: [String!]!
  type: String!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Mutation {
  addModerator(planet: ID!, username: String!): Boolean!
  banAndPurgeUser(banReason: String!, bannedId: ID!): Boolean!
  banUser(banReason: String!, bannedId: ID!): Boolean!
  banUserFromPlanet(bannedUserId: ID!, planet: ID!): Boolean!
  blockUser(blockedUsername: String!): Boolean!
  changePassword(newPassword: String!, oldPassword: String!): LoginResponse!
  createPlanet(description: String!, name: String!, tags: [String!]!): Boolean!
  deleteComment(commentId: ID!): Boolean!
  deletePost(postId: ID!): Boolean!
  editComment(commentId: ID!, newTextContent: String!): Boolean!
  editPost(newTextContent: String!, postId: ID!): Boolean!
  followUser(followedId: ID!): Boolean!
  hidePost(postId: ID!): Boolean!
  joinPlanet(name: String!): Boolean!
  leavePlanet(name: String!): Boolean!
  login(password: String!, username: String!): LoginResponse!
  logout: Boolean!
  markAllNotificationsRead: Boolean!
  markNotificationRead(id: ID!): Boolean!
  mutePlanet(name: String!): Boolean!
  pinPost(planet: ID!, postId: ID!): Boolean!
  removeComment(commentId: ID!, planet: ID!, removedReason: String!): Boolean!
  removePost(planet: ID!, postId: ID!, removedReason: String!): Boolean!
  reportPost(postId: ID!): Boolean!
  saveComment(commentId: ID!): Boolean!
  savePost(postId: ID!): Boolean!
  signUp(email: String, password: String!, username: String!): LoginResponse!
  submitComment(parentCommentId: ID, postId: ID!, textContent: String!): Comment!
  submitPost(image: Upload, link: String, planet: String!, textContent: String, title: String!): Post!
  toggleCommentUpvote(commentId: ID!): Boolean!
  togglePostUpvote(postId: ID!): Boolean!
  unbanUser(bannedId: ID!): Boolean!
  unbanUserFromPlanet(bannedUserId: ID!, planet: ID!): Boolean!
  unblockUser(blockedId: ID!): Boolean!
  unfollowUser(followedId: ID!): Boolean!
  unhidePost(postId: ID!): Boolean!
  unmutePlanet(name: String!): Boolean!
  unpinPost(planet: ID!, postId: ID!): Boolean!
  unsaveComment(commentId: ID!): Boolean!
  unsavePost(postId: ID!): Boolean!
  uploadAvatar(file: Upload!): Boolean!
  uploadPlanetAvatarImage(file: Upload!, planet: ID!): Boolean!
  uploadPlanetBannerImage(file: Upload!, planet: ID!): Boolean!
}

type Notification {
  comment: Comment
  commentId: ID
  createdAt: DateTime!
  fromUser: User
  fromUserId: ID
  id: ID!
  id36: String!
  parentCommentId: ID
  post: Post
  postId: ID
  read: Boolean!
  toUser: User
  toUserId: ID
}

type Planet {
  avatarURL: String
  bannerURL: String
  createdAt: DateTime!
  creator: User
  creatorId: ID
  id: ID!
  id36: String!
  joined: Boolean!
  muted: Boolean!
  name: String!
  postCount: Int!
  profile: PlanetProfile!
  settings: PlanetSettings!
  tags: [String!]
  userCount: Int!
}

type PlanetModerator {
  createdAt: DateTime!
  permissions: [ModPermission!]
  planetId: ID!
  userId: ID!
}

type PlanetMute {
  createdAt: DateTime!
  planetId: ID!
  userId: ID!
}

type PlanetProfile {
  color: String
  customName: String
  description: String
  discordInvite: String
  rules: [PlanetRule!]
  twitterUsername: String
}

type PlanetRule {
  description: String!
  name: String!
}

type PlanetSettings {
  allowImages: Boolean!
  allowLinks: Boolean!
  allowText: Boolean!
  allowedPostersOnly: Boolean!
  nsfw: Boolean!
  private: Boolean!
}

type PlanetUser {
  createdAt: DateTime!
  planetId: ID!
  updatedAt: DateTime!
  userId: ID!
}

type Post {
  author: User
  authorId: ID!
  commentCount: Int!
  createdAt: DateTime!
  deleted: Boolean!
  domain: String
  editedAt: DateTime
  embed: Embed
  faviconURL: String
  id: ID!
  id36: String!
  imageCount: Int!
  imageURLs: [String!]!
  linkURL: String
  planet: Planet
  planetId: ID
  postedToProfile: Boolean!
  relativeURL: String!
  removed: Boolean!
  removedReason: String!
  rocketCount: Int!
  rocketed: Boolean!
  sticky: Boolean!
  textContent: String
  thumbnailURL: String
  timeSince: String!
  timeSinceEdited: String
  title: String!
}

type PostHide {
  createdAt: DateTime!
  postId: ID!
  userId: ID!
}

type PostRocket {
  createdAt: DateTime!
  postId: ID!
  updatedAt: DateTime!
  userId: ID!
}

type PostsResponse {
  nextPage: Int!
  page: Int!
  posts: [Post!]!
}

type Query {
  blockedUsers: [User!]!
  comments(
    "If provided, return thread of comments, starting at parent of given ID"
    commentId: ID,
    "If provided, return all comments for given post ID"
    postId: ID,
    "Sort by new or top"
    sort: CommentSort = TOP,
    "If provided, return all comments by given username, and their parent comments"
    username: String
  ): [Comment!]!
  currentUser: User
  getURLEmbed(URL: String!): EmbedResponse!
  hiddenPosts: [Post!]!
  mutedPlanets: [Planet!]!
  notifications(unreadOnly: Boolean = false): [Notification!]!
  planet(name: String!): Planet
  planets(joined: Boolean = false, names: [String!], page: Int = 0, pageSize: Int = 20, search: String, sort: PlanetSort = AZ, tags: [String!]): [Planet!]!
  post(postId: ID!): Post
  posts(
    "If provided, only posts from given folder ID will be returned"
    folderId: ID,
    "If provided, only posts from given galaxy will be returned"
    galaxy: String,
    page: Int = 0,
    pageSize: Int = 20,
    "If provided, only posts from given planet will be returned"
    planet: String,
    "If provided, only posts matching given search term will be returned"
    search: String,
    "Sort by new, hot, top, most comments"
    sort: PostSort = HOT,
    "Filter by all, hour, day, week, month, year"
    time: TimeFilter = ALL,
    "Show universe"
    universe: Boolean = false,
    "If provided, only posts from given username will be returned"
    username: String
  ): PostsResponse!
  user(username: String!): User
  userComments(page: Int = 0, pageSize: Int = 20, sort: CommentSort = NEW, time: TimeFilter = ALL, username: String!): [Comment!]!
}

type Removal {
  commentId: ID
  createdAt: DateTime!
  id: ID!
  modId: ID!
  postId: ID
  reason: String!
  updatedAt: DateTime!
}

type Save {
  commentId: ID
  createdAt: DateTime!
  folder: String
  id: ID!
  postId: ID
  userId: ID!
}

type User {
  admin: Boolean!
  avatarURL: String
  bannerURL: String
  blocked: Boolean!
  blocking: Boolean!
  commentCount: Int!
  createdAt: DateTime!
  email: String!
  followed: Boolean!
  followerCount: Int!
  following: Boolean!
  followingCount: Int!
  id: ID!
  id36: String!
  isCurrentUser: Boolean!
  lastLogin: DateTime
  online: Boolean!
  postCount: Int!
  profile: UserProfile!
  rocketCount: Int!
  settings: UserSettings!
  timeSinceCreated: String!
  username: String!
}

type UserBlock {
  createdAt: DateTime!
  fromId: ID!
  toId: ID!
}

type UserFollow {
  createdAt: DateTime!
  fromId: ID!
  toId: ID!
}

type UserProfile {
  bio: String
  realName: String
  usernames: Usernames
  website: String
}

type UserSettings {
  appearOffline: Boolean!
  nsfw: Boolean!
  private: Boolean!
  profanity: Boolean!
}

type Usernames {
  discord: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
  reddit: String
  snapchat: String
  soundcloud: String
  spotify: String
  steam: String
  tiktok: String
  tumblr: String
  twitch: String
  twitter: String
  vsco: String
  youtube: String
}

enum CommentSort {
  NEW
  TOP
}

enum ModPermission {
  ADD_APPROVED_POSTER
  ADD_MOD
  ARCHIVE
  BAN
  CHANGE_PERMISSIONS
  CUSTOMIZE
  PURGE
  REMOVE_COMMENT
  REMOVE_POST
  SETTINGS
  STICKY_COMMENT
  STICKY_POST
}

enum PlanetSort {
  AZ
  NEW
  TOP
  TRENDING
}

enum PostSort {
  COMMENTS
  HOT
  NEW
  TOP
}

enum TimeFilter {
  ALL
  DAY
  HOUR
  MONTH
  WEEK
  YEAR
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
