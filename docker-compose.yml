version: '3.8'

services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        PACKAGE_PATH: api
        WORKING_DIR: /usr/src/
    restart: always
    expose:
      - "4000"
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
    env_file:
      - api/.env
      - postgres.env
      - aws.env
    volumes:
      - ./api:/usr/src
    depends_on:
      - postgres
      - iframely
      - imageflow
    command: ["yarn", "run", "dev"]
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        PACKAGE_PATH: frontend
        WORKING_DIR: /usr/src/
    restart: always
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NODE_PATH=/usr/src/
      - HOST=0.0.0.0
    env_file:
      - frontend/.env
    volumes:
      - ./frontend:/usr/src
    depends_on:
      - api
    command: ["yarn", "run", "dev"]
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: "postgres:alpine"
    restart: always
    env_file:
      - postgres.env
    volumes:
      - "db-data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    container_name: redis
    image: "redis:alpine"
    restart: always
    expose:
      - "6379"
    networks:
      - app-network

  iframely:
    container_name: iframely
    build: "https://github.com/itteco/iframely.git"
    restart: always
    expose:
      - "8061"
    volumes:
      - ./iframely/iframely.js:/iframely/config.local.js
    depends_on:
      - redis
    networks:
      - app-network

  imageflow:
    container_name: imageflow
    build: ./imageflow
    restart: always
    env_file:
      - aws.env
    ports:
      - "12345:12345"
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
