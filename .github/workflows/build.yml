name: Build

on:
  push:
    tags:
      - '*'

jobs:
  server:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: echo ::set-output name=tag::joincomet/server:${GITHUB_SHA::7}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: server/Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tag }},joincomet/server:latest
  web:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: echo ::set-output name=tag::joincomet/web:${GITHUB_SHA::7}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: web/Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tag }},joincomet/web:latest
          build-args: |
            API_DOMAIN=${{ secrets.API_DOMAIN }}
  deploy:
    needs: [server, web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Update deployment file tags
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          ACCESS_TOKEN_SECRET=$(printf '%s\n' "${{ secrets.ACCESS_TOKEN_SECRET }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          AWS_SECRET_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i "s/<TAG>/$TAG/g" .do/app.yaml
          sed -i "s/<ACCESS_TOKEN_SECRET>/$ACCESS_TOKEN_SECRET/g" .do/app.yaml
          sed -i "s/<BUCKET>/${{ secrets.BUCKET }}/g" .do/app.yaml
          sed -i "s/<AWS_ACCESS_KEY_ID>/${{ secrets.AWS_ACCESS_KEY_ID }}/g" .do/app.yaml
          sed -i "s/<AWS_SECRET_ACCESS_KEY>/$AWS_SECRET_ACCESS_KEY/g" .do/app.yaml
          sed -i "s/<AWS_ENDPOINT>/${{ secrets.AWS_ENDPOINT }}/g" .do/app.yaml
          sed -i "s/<MEDIA_DOMAIN>/${{ secrets.MEDIA_DOMAIN }}/g" .do/app.yaml
      - name: Update app spec
        run: doctl apps update ${{ secrets.DIGITALOCEAN_APP_ID }} --spec .do/app.yaml
  electron:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 15
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          max_attempts: 10
          package_root: web
          github_token: ${{ secrets.github_token }}
          # If the commit is tagged with a version (e.g. "v1.0.0"), release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          VITE_API_DOMAIN: ${{ secrets.API_DOMAIN }}
