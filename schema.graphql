# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

interface BaseEntity {
  createdAt: DateTime!
  id: ID!
}

type Channel implements BaseEntity {
  createdAt: DateTime!
  description: String
  id: ID!
  isUnread: Boolean!
  mentionCount: Int!
  name: String
  server: Server!
}

enum ChannelPermission {
  AttachFiles
  EmbedLinks
  ManageChannel
  ManageMessages
  ManagePermissions
  Mention
  SendMessages
  ViewChannel
}

type ChannelResponse {
  channel: Channel!
  serverId: ID!
}

type ChannelRole {
  allowedPermissions: [ChannelPermission!]!
  channel: Channel!
  deniedPermissions: [ChannelPermission!]!
}

type ChannelUsersResponse {
  role: String!
  users: [User!]!
}

type Comment implements BaseEntity {
  author: User
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadatas: [LinkMetadata!]!
  parentComment: Comment
  pinPosition: String
  post: Post!
  text: String!
  voteCount: Int!
}

type CommentDeletedResponse {
  commentId: ID!
  postId: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type File {
  filename: String!
  mime: String!
  size: Float!
  url: String!
}

type Folder implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  description: String
  followerCount: Int!
  id: ID!
  isCollaborative: Boolean!
  name: String!
  owner: User
  postCount: Int!
  server: Server
  visibility: FolderVisibility!
}

enum FolderVisibility {
  Friends
  Private
  Public
  Unlisted
}

enum FriendStatus {
  Blocked
  Blocking
  FriendRequestIncoming
  FriendRequestOutgoing
  Friends
  None
}

type FriendStatusChangedResponse {
  status: FriendStatus!
  user: User!
}

type GetChannelPermissionsResponse {
  allowedPermissions: [ChannelPermission!]!
  deniedPermissions: [ChannelPermission!]!
}

enum GetCommentsSort {
  New
  Top
}

type GetMessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
}

type GetPostsResponse {
  hasMore: Boolean!
  posts: [Post!]!
}

enum GetPostsSort {
  Added
  Hot
  New
  Top
}

enum GetPostsTime {
  All
  Day
  Hour
  Month
  Week
  Year
}

enum GetPublicServersSort {
  Featured
  New
  Top
}

type GetUserRelationshipsResponse {
  blockedByUsers: [User!]!
  blockingUsers: [User!]!
  friends: [User!]!
  incomingFriendRequests: [User!]!
  outgoingFriendRequests: [User!]!
}

type Group implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  displayName: String!
  id: ID!
  name: String!
  owner: User!
  unreadCount: Int!
  users: [User!]!
}

union GroupDmUnion = Group | User

type Image {
  originalHeight: Int!
  originalUrl: String!
  originalWidth: Int!
  popupHeight: Int!
  popupUrl: String
  popupWidth: Int!
  smallHeight: Int!
  smallUrl: String
  smallWidth: Int!
}

type LinkMetadata {
  author: String
  date: DateTime
  description: String
  image: String
  logo: String
  publisher: String
  title: String
  twitterCard: String
  url: String
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Message implements BaseEntity {
  author: User!
  createdAt: DateTime!
  editedAt: DateTime
  file: File
  id: ID!
  image: Image
  isDeleted: Boolean!
  isPinned: Boolean!
  linkMetadatas: [LinkMetadata!]!
  text: String
  type: MessageType!
}

type MessageDeletedResponse {
  channelId: ID
  groupId: ID
  messageId: ID!
  userId: ID
}

type MessageResponse {
  channelId: ID
  groupId: ID
  message: Message!
  serverId: ID
  userId: ID
}

enum MessageType {
  Join
  Normal
}

type Mutation {
  addPostToFolder(folderId: ID!, postId: ID!): Folder!
  banUserFromServer(serverId: ID!, userId: ID!): Boolean!
  banUserGlobal(purge: Boolean = false, reason: String, userId: ID!): Boolean!
  changeFriendStatus(status: FriendStatus!, userId: ID!): User!
  changePassword(currentPassword: String!, password: String!): LoginResponse!
  closeDm(userId: ID!): Boolean!
  createAccount(email: String!, name: String!, password: String!): LoginResponse!
  createChannel(isPrivate: Boolean = false, name: String!, serverId: ID!): Channel!
  createComment(parentCommentId: ID, postId: ID!, text: String!): Comment!
  createFolder(isCollaborative: Boolean = false, name: String!, serverId: ID, visibility: FolderVisibility = Public): Folder!
  createGroup(usernames: [String!]!): Group!
  createPost(images: [Upload!], linkUrl: String, serverId: ID!, text: String, title: String!): Post!
  createServer(avatarFile: Upload, category: ServerCategory, isPublic: Boolean = false, name: String!): Server!
  deleteChannel(channelId: ID!): Boolean!
  deleteComment(commentId: ID!): Boolean!
  deleteFolder(folderId: ID!): Boolean!
  deleteMessage(messageId: ID!): Boolean!
  deletePost(postId: ID!): Boolean!
  editAccount(avatarFile: Upload, email: String, name: String): User!
  editChannel(channelId: ID!, isPrivate: Boolean = false, name: String!): Channel!
  editComment(commentId: ID!, text: String!): Comment!
  editFolder(avatarFile: Upload!, description: String!, folderId: ID!, isCollaborative: Boolean = false, name: String!, visibility: FolderVisibility = Public): Folder!
  editGroup(avatarFile: Upload, groupId: ID!, name: String): Group!
  editMessage(messageId: ID!, text: String!): Message!
  editPost(postId: ID!, text: String): Post!
  editServer(avatarFile: Upload, bannerFile: Upload, category: ServerCategory, description: String, isPublic: Boolean, name: String, serverId: ID!): Server!
  followFolder(folderId: ID!): Folder!
  joinServer(inviteId: ID, serverId: ID): Server!
  leaveGroup(groupId: ID!): Boolean!
  leaveServer(serverId: ID!): Boolean!
  login(email: String!, password: String!): LoginResponse!
  markAllRepliesRead: [Reply!]!
  markReplyRead(replyId: ID!): Reply!
  pinPost(postId: ID!): Post!
  readChannel(channelId: ID!): Channel!
  readDm(userId: ID!): User!
  readGroup(groupId: ID!): Group!
  removePostFromFolder(folderId: ID!, postId: ID!): Folder!
  reorderChannels(beforeChannelId: ID, channelId: ID!): [Channel!]!
  reorderServerFolders(beforeFolderId: ID, folderId: ID!, serverId: ID!): [Folder!]!
  reorderServers(beforeServerId: ID, serverId: ID!): [Server!]!
  reorderUserFolders(beforeFolderId: ID, folderId: ID!): [Folder!]!
  sendMessage(channelId: ID, file: Upload, groupId: ID, text: String, userId: ID): Message!
  startTyping(channelId: ID, groupId: ID, userId: ID): Boolean!
  unbanUserFromServer(serverId: ID!, userId: ID!): Boolean!
  unbanUserGlobal(userId: ID!): Boolean!
  unfollowFolder(folderId: ID!): Folder!
  unpinPost(postId: ID!): Post!

  """Remove vote from a comment"""
  unvoteComment(
    """ID of comment to remove vote"""
    commentId: ID!
  ): Comment!
  unvotePost(postId: ID!): Post!

  """Add vote to a comment"""
  voteComment(
    """ID of comment to vote"""
    commentId: ID!
  ): Comment!
  votePost(postId: ID!): Post!
}

type Post implements BaseEntity {
  addedAt: DateTime
  addedByUser: User
  author: User
  commentCount: Int!
  createdAt: DateTime!
  domain: String
  editedAt: DateTime
  id: ID!
  imageUrls: [String!]!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadata: LinkMetadata
  linkMetadatas: [LinkMetadata!]!
  linkUrl: String
  pinPosition: String
  relativeUrl: String!
  server: Server!
  text: String
  thumbnailUrl: String
  title: String!
  voteCount: Int!
}

type PostAddedToFolderResponse {
  folderId: ID!
  post: Post!
}

type PostCommentResponse {
  comment: Comment!
  postId: ID!
}

type PostDeletedResponse {
  postId: ID!
  serverId: ID!
}

type PostRemovedFromFolderResponse {
  folderId: ID!
  postId: ID!
}

type Query {
  getChannelPermissions(channelId: ID!): GetChannelPermissionsResponse!
  getChannelUsers(channelId: ID!): [ChannelUsersResponse!]!
  getComments(postId: ID, sort: GetCommentsSort = Top): [Comment!]!
  getCurrentUser: User
  getFolder(folderId: ID!): Folder!
  getGroupsAndDms: [GroupDmUnion!]!
  getJoinedServers: [Server!]!
  getMessages(channelId: ID, groupId: ID, initialTime: DateTime, page: Int = 0, pageSize: Int = 100, pinned: Boolean = false, userId: ID): [GetMessagesResponse!]!
  getMutualFriends(userId: ID!): [User!]!
  getMutualServers(userId: ID!): [Server!]!
  getOtherUserFolders(userId: ID!): [Folder!]!
  getPost(postId: ID!): Post!
  getPosts(folderId: ID, page: Int = 0, pageSize: Int = 20, search: String, serverId: ID, sort: GetPostsSort = Hot, time: GetPostsTime = All): [GetPostsResponse!]!
  getPublicServers(category: ServerCategory, sort: GetPublicServersSort = Top): [Server!]!
  getReplies: [Reply!]!
  getServerFolders(serverId: ID!): [Folder!]!
  getServerPermissions(serverId: ID!): [ServerPermission!]!

  """Get LinkMetadata for a URL (requires admin)"""
  getUrlEmbed(url: String!): LinkMetadata! @deprecated(reason: "For testing only")
  getUser(userId: ID!): User!
  getUserFolders: [Folder!]!
  getUserRelationships: GetUserRelationshipsResponse!
}

type RemovedFromRoleResponse {
  roleId: ID!
  serverId: ID!
}

type Reply implements BaseEntity {
  comment: Comment!
  createdAt: DateTime!
  fromUser: User!
  id: ID!
  isRead: Boolean!
  parentComment: Comment
  post: Post!
}

type RolesUpdatedResponse {
  roles: [ServerRole!]!
  serverId: ID!
}

type Server implements BaseEntity {
  avatarUrl: String
  bannerUrl: String
  category: ServerCategory!
  channels: [Channel!]!
  createdAt: DateTime!
  description: String
  id: ID!
  isBanned: Boolean!
  isChatEnabled: Boolean!
  isFeatured: Boolean!
  isPostsEnabled: Boolean!
  isPublic: Boolean!
  name: String!
  userCount: Int!
}

enum ServerCategory {
  Arts
  Business
  Culture
  Discussion
  Entertainment
  Gaming
  Health
  Hobbies
  Lifestyle
  Memes
  Meta
  News
  Other
  Politics
  Programming
  Science
  Sports
  Technology
}

type ServerFoldersUpdatedResponse {
  folders: [Folder!]!
  serverId: ID!
}

enum ServerPermission {
  AddPostToFolder
  Admin
  AttachFiles
  BanUser
  ChangeNickname
  CreateComment
  CreateInvite
  CreatePost
  DisplayRoleSeparately
  EmbedLinks
  KickUser
  ManageChannels
  ManageComments
  ManageFolders
  ManageMessages
  ManageNicknames
  ManagePosts
  ManageRoles
  ManageServer
  Mention
  Mentionable
  SendMessages
  ViewChannels
  ViewComments
  VoteComment
  VotePost
}

type ServerRole implements BaseEntity {
  channelRoles: [ChannelRole!]!
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  permissions: [ServerPermission!]!
}

type ServerRoleResponse {
  role: ServerRole!
  serverId: ID!
}

type Subscription {
  addedToGroup: Group!
  addedToRole: ServerRoleResponse!
  allRepliesRead: Boolean!
  channelRead: ID!
  channelUpdated: Channel!
  channelsUpdated: ChannelResponse!
  commentCreated: PostCommentResponse!
  commentDeleted: CommentDeletedResponse!
  commentUpdated: Comment!
  dmClosed: ID!
  dmOpened: User!
  dmRead: ID!
  folderUpdated: Folder!
  friendStatusChanged: FriendStatusChangedResponse!
  groupRead: ID!
  groupUpdated: Group!
  joinedServersUpdated: [Server!]!
  messageDeleted: MessageDeletedResponse!
  messageSent: MessageResponse!
  messageUpdated: MessageResponse!
  postAddedToFolder: PostAddedToFolderResponse!
  postCreated: Post!
  postDeleted: PostDeletedResponse!
  postRemovedFromFolder: PostRemovedFromFolderResponse!
  postUpdated: Post!
  removedFromGroup: ID!
  removedFromRole: RemovedFromRoleResponse!
  replyRead: Reply!
  replyReceived: Reply!
  roleUpdated: ServerRoleResponse!
  rolesUpdated: RolesUpdatedResponse!
  serverFoldersUpdated: ServerFoldersUpdatedResponse!
  serverUpdated: Server!
  userBannedGlobal: Boolean!
  userFoldersUpdated: [Folder!]!
  userJoinedGroup: UserJoinedGroupResponse!
  userJoinedServer: UserJoinedServerResponse!
  userLeftGroup: UserLeftGroupResponse!
  userLeftServer: UserLeftServerResponse!
  userStartedTyping(channelId: ID, groupId: ID, userId: ID): String!
  userUpdated: User!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isAdmin: Boolean!
  isOnline: Boolean!
  isPremium: Boolean!
  lastLoginAt: DateTime
  name: String!
  tag: String!
  unreadCount: Int
  username: String!
}

type UserJoinedGroupResponse {
  groupId: ID!
  user: User!
}

type UserJoinedServerResponse {
  serverId: ID!
  user: User!
}

type UserLeftGroupResponse {
  groupId: ID!
  userId: ID!
}

type UserLeftServerResponse {
  serverId: ID!
  userId: ID!
}
