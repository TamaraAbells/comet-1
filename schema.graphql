# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
Instruction for establishing a live connection that is updated once the underlying data changes.
"""
directive @live(
  """Whether the query should be live or not."""
  if: Boolean = true
) on QUERY

interface BaseEntity {
  createdAt: DateTime!
  id: ID!
}

input ChangePasswordInput {
  currentPassword: String!
  password: String!
}

type Channel implements BaseEntity {
  createdAt: DateTime!
  description: String
  id: ID!
  isUnread: Boolean!
  mentionCount: Int!
  name: String
  server: Server!
}

enum ChannelPermission {
  SendMessages
  ViewChannel
}

type ChannelRole {
  allowedPermissions: [ChannelPermission!]!
  channel: Channel!
  deniedPermissions: [ChannelPermission!]!
}

type Comment implements BaseEntity {
  author: User
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadatas: [LinkMetadata!]!
  parentComment: Comment
  pinPosition: String
  post: Post!
  serverUser: ServerUser!
  text: String!
  voteCount: Int!
}

type CommentChangedResponse {
  added: Comment
  deleted: Comment
  updated: Comment
}

input CreateAccountInput {
  email: String!
  name: String!
  password: String!
}

input CreateChannelInput {
  isPrivate: Boolean = false
  name: String!
  serverId: ID!
}

input CreateCommentInput {
  parentCommentId: ID
  postId: ID!
  text: String!
}

input CreateFolderInput {
  isCollaborative: Boolean = false
  name: String!
  serverId: ID
  visibility: FolderVisibility = Public
}

input CreateGroupInput {
  usernames: [String!]!
}

input CreateMessageInput {
  channelId: ID
  file: Upload
  groupId: ID
  text: String
  userId: ID
}

input CreatePostInput {
  images: [Upload!]
  linkUrl: String
  serverId: ID!
  text: String
  title: String!
}

input CreateRoleInput {
  color: String
  name: String!
  permissions: [ServerPermission!]!
  serverId: ID!
}

input CreateServerInput {
  avatarFile: Upload
  category: ServerCategory = Other
  isPublic: Boolean = false
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type File {
  filename: String!
  mime: String!
  size: Float!
  url: String!
}

type Folder implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  description: String
  followerCount: Int!
  id: ID!
  isCollaborative: Boolean!
  name: String!
  owner: User
  postCount: Int!
  server: Server
  visibility: FolderVisibility!
}

enum FolderVisibility {
  Friends
  Private
  Public
  Unlisted
}

enum GetCommentsSort {
  New
  Top
}

type GetMessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
}

type GetPostsResponse {
  hasMore: Boolean!
  posts: [Post!]!
}

enum GetPostsSort {
  Added
  Hot
  New
  Top
}

enum GetPostsTime {
  All
  Day
  Hour
  Month
  Week
  Year
}

enum GetPublicServersSort {
  Featured
  New
  Top
}

type Group implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  displayName: String!
  id: ID!
  lastMessageAt: DateTime!
  name: String!
  owner: User!
  unreadCount: Int!
  users: [User!]!
}

type Image {
  originalHeight: Int!
  originalUrl: String!
  originalWidth: Int!
  popupHeight: Int!
  popupUrl: String
  popupWidth: Int!
  smallHeight: Int!
  smallUrl: String
  smallWidth: Int!
}

input JoinServerInput {
  inviteId: ID
  serverId: ID
}

type LinkMetadata {
  author: String
  date: DateTime
  description: String
  image: String
  logo: String
  publisher: String
  title: String
  twitterCard: String
  url: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Message implements BaseEntity {
  author: User!
  createdAt: DateTime!
  editedAt: DateTime
  file: File
  id: ID!
  image: Image
  isDeleted: Boolean!
  isPinned: Boolean!
  linkMetadatas: [LinkMetadata!]!
  serverUser: ServerUser
  text: String
  type: MessageType!
}

type MessageChangedResponse {
  added: Message
  deleted: Message
  updated: Message
}

enum MessageType {
  Join
  Normal
}

type Mutation {
  changePassword(input: ChangePasswordInput!): LoginResponse!
  createAccount(input: CreateAccountInput!): LoginResponse!
  createChannel(input: CreateChannelInput!): Channel!
  createComment(input: CreateCommentInput!): Comment!
  createFolder(input: CreateFolderInput!): Folder!
  createGroup(input: CreateGroupInput!): Group!
  createMessage(input: CreateMessageInput!): Message!
  createPost(input: CreatePostInput!): Post!
  createRole(input: CreateRoleInput!): Role!
  createServer(input: CreateServerInput!): Server!
  joinServer(input: JoinServerInput!): Server!
  login(input: LoginInput!): LoginResponse!
  markAllRepliesRead: Boolean!
  startTyping(channelId: ID, groupId: ID, userId: ID): Boolean!
  updateChannel(input: UpdateChannelInput!): Channel!
  updateComment(input: UpdateCommentInput!): Comment!
  updateFolder(input: UpdateFolderInput!): Folder!
  updateGroup(input: UpdateGroupInput!): Group!
  updateMessage(input: UpdateMessageInput!): Message!
  updatePost(input: UpdatePostInput!): Post!
  updateReply(input: UpdateReplyInput!): Reply!
  updateRole(input: UpdateRoleInput!): Role!
  updateServer(input: UpdateServerInput!): Server!
  updateUser(input: UpdateUserInput!): User!
}

enum NotificationSetting {
  All
  Mentions
  None
}

enum OnlineStatus {
  Away
  DoNotDisturb
  Offline
  Online
}

type Post implements BaseEntity {
  addedAt: DateTime
  addedByUser: User
  author: User
  commentCount: Int!
  createdAt: DateTime!
  domain: String
  editedAt: DateTime
  folders: [Folder!]
  id: ID!
  imageUrls: [String!]!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadata: LinkMetadata
  linkMetadatas: [LinkMetadata!]!
  linkUrl: String
  pinPosition: String
  relativeUrl: String!
  server: Server!
  serverUser: ServerUser!
  text: String
  thumbnailUrl: String
  title: String!
  voteCount: Int!
}

type PostChangedResponse {
  added: Post
  deleted: Post
  updated: Post
}

type Query {
  getChannelUsers(channelId: ID!): [ServerUser!]!
  getComments(postId: ID, sort: GetCommentsSort = Top): [Comment!]!
  getCurrentUser: User
  getFolder(folderId: ID!): Folder!
  getJoinedServers(id: ID!): [Server!]!
  getMessages(channelId: ID, groupId: ID, initialTime: DateTime, page: Int = 0, pageSize: Int = 100, pinned: Boolean = false, userId: ID): [GetMessagesResponse!]!
  getMutualFriends(userId: ID!): [User!]!
  getMutualServers(userId: ID!): [ServerUser!]!
  getOtherUserFolders(userId: ID!): [Folder!]!
  getPost(postId: ID!): Post!
  getPosts(folderId: ID, page: Int = 0, pageSize: Int = 20, search: String, serverId: ID, sort: GetPostsSort = Hot, time: GetPostsTime = All): [GetPostsResponse!]!
  getPublicServers(category: ServerCategory, sort: GetPublicServersSort = Top): [Server!]!
  getReplies(id: ID!): [Reply!]!
  getRoleUsers(roleId: ID!): [ServerUser!]!

  """Get LinkMetadata for a URL (requires admin)"""
  getUrlEmbed(url: String!): LinkMetadata! @deprecated(reason: "For testing only")
  getUser(userId: ID!): User!
}

enum RelationshipStatus {
  Blocked
  Blocking
  FriendRequestIncoming
  FriendRequestOutgoing
  Friends
  None
}

type RepliesChangedResponse {
  added: [Reply!]!
  deleted: [Reply!]!
  updated: [Reply!]!
}

type Reply implements BaseEntity {
  comment: Comment!
  createdAt: DateTime!
  fromUser: User!
  id: ID!
  isRead: Boolean!
  parentComment: Comment
  post: Post!
}

type Role implements BaseEntity {
  channelRoles: [ChannelRole!]!
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  permissions: [ServerPermission!]!
}

type Server implements BaseEntity {
  avatarUrl: String
  bannerUrl: String
  category: ServerCategory!
  channels: [Channel!]!
  createdAt: DateTime!
  description: String
  folders: [Folder!]!
  id: ID!
  isBanned: Boolean!
  isDeleted: Boolean!
  isFeatured: Boolean!
  isPublic: Boolean!
  myRoles: [Role!]!
  name: String!
  roles: [Role!]!
  sendWelcomeMessage: Boolean!
  systemMessagesChannel: Channel!
  userCount: Int!
}

enum ServerCategory {
  Arts
  Business
  Culture
  Discussion
  Entertainment
  Gaming
  Health
  Hobbies
  Lifestyle
  Memes
  Meta
  News
  Other
  Politics
  Programming
  Science
  Sports
  Technology
}

enum ServerPermission {
  AddPostToFolder
  Admin
  ChangeNickname
  CreateComment
  CreateInvite
  CreatePost
  DisplayRoleSeparately
  ManageChannels
  ManageComments
  ManageFolders
  ManageMessages
  ManagePosts
  ManageServer
  ManageUsers
  Mention
  Mentionable
  SendMessages
  ViewChannels
  ViewComments
  VoteComment
  VotePost
}

type ServerUser {
  color: String
  name: String!
  nickname: String
  notificationSetting: NotificationSetting!
  roles: [Role!]!
}

type Subscription {
  commentChanged: CommentChangedResponse!
  messageChanged: MessageChangedResponse!
  postChanged: PostChangedResponse!
  repliesChanged: RepliesChangedResponse!
  userStartedTyping(channelId: ID, groupId: ID, userId: ID): String!
}

input UpdateChannelInput {
  beforeChannelId: ID
  channelId: ID!
  isDeleted: Boolean = false
  isPrivate: Boolean
  isRead: Boolean
  name: String
}

input UpdateChannelRoleInput {
  allowedPermissions: [ChannelPermission!]!
  channelId: ID!
  deniedPermissions: [ChannelPermission!]!
}

input UpdateCommentInput {
  commentId: ID!
  isDeleted: Boolean = false
  isPinned: Boolean
  isVoted: Boolean
  text: String
}

input UpdateFolderInput {
  addedPostId: ID
  beforeFolderId: ID
  folderId: ID!
  isCollaborative: Boolean
  isDeleted: Boolean = false
  isFollowing: Boolean
  name: String
  removedPostId: ID
  visibility: FolderVisibility
}

input UpdateGroupInput {
  addedUserId: ID
  avatarFile: Upload
  groupId: ID!
  isRead: Boolean
  name: String
  removedUserId: ID
}

input UpdateMessageInput {
  isDeleted: Boolean = false
  isPinned: Boolean
  messageId: ID!
  text: String
}

input UpdatePostInput {
  isDeleted: Boolean = false
  isPinned: Boolean
  isVoted: Boolean
  postId: ID!
  text: String
}

input UpdateReplyInput {
  isRead: Boolean
  replyId: ID!
}

input UpdateRoleInput {
  addedUserId: ID
  beforeRoleId: ID
  color: String
  isDeleted: Boolean = false
  name: String
  permissions: [ServerPermission!]
  removedUserId: ID
  roleId: ID!
  updateChannelRole: UpdateChannelRoleInput
}

input UpdateServerInput {
  avatarFile: Upload
  banUserId: ID
  bannerFile: Upload
  beforeServerId: ID
  category: ServerCategory
  description: String
  featuredPosition: Int
  isDeleted: Boolean = false
  isFeatured: Boolean
  isPublic: Boolean
  isRead: Boolean = false
  kickUserId: ID
  name: String
  nickname: String
  notificationSetting: NotificationSetting
  ownerId: ID
  purge: Boolean = false
  sendWelcomeMessage: Boolean
  serverId: ID!
  systemMessagesChannelId: ID
  unbanUserId: ID
}

input UpdateUserInput {
  avatarFile: Upload
  banGlobalReason: String
  email: String
  isBannedGlobal: Boolean = false
  isDeleted: Boolean = false
  isRead: Boolean
  isUnbannedGlobal: Boolean = false
  name: String
  purge: Boolean = false
  relationshipStatus: RelationshipStatus
  showChat: Boolean
  userId: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  folders: [Folder!]
  id: ID!
  isAdmin: Boolean!
  isOnline: Boolean!
  isPremium: Boolean!
  lastLoginAt: DateTime
  name: String!
  onlineStatus: OnlineStatus!
  tag: String!
  username: String!
}
