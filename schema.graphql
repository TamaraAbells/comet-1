# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Comment {
  author: User
  authorId: ID
  createdAt: DateTime!
  editedAt: DateTime
  editedTimeSince: String
  endorsementCount: Float!
  id: ID!
  isEndorsed: Boolean!
  level: Float
  parentComment: Comment
  parentCommentId: ID
  post: Post
  postId: ID
  rootCommentId: ID
  textContent: String!
  timeSince: String!
}

type CommentEndorsement {
  active: Boolean!
  commentId: ID!
  createdAt: DateTime!
  userId: ID!
}

type Galaxy {
  bannerImageUrl: String
  description: String
  fullName: String!
  icon: String!
  name: ID!
  planetCount: Float
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Mutation {
  addModerator(planetName: ID!, username: String!): Boolean!
  banAndPurgeUser(banReason: String!, bannedId: ID!): Boolean!
  banUser(banReason: String!, bannedId: ID!): Boolean!
  banUserFromPlanet(bannedUserId: ID!, planetName: ID!): Boolean!
  blockUser(blockedUsername: String!): Boolean!
  changePassword(newPassword: String!, oldPassword: String!): LoginResponse!
  createPlanet(description: String!, galaxy: String!, name: String!): Boolean!
  deleteComment(commentId: ID!): Boolean!
  deletePost(postId: ID!): Boolean!
  editComment(commentId: ID!, newTextContent: String!): Boolean!
  editPost(newTextContent: String!, postId: ID!): Boolean!
  followUser(followedId: ID!): Boolean!
  hidePost(postId: ID!): Boolean!
  joinPlanet(planetName: ID!): Boolean!
  leavePlanet(planetName: ID!): Boolean!
  login(password: String!, username: String!): LoginResponse!
  markAllNotificationsRead: Boolean!
  markNotificationRead(id: ID!): Boolean!
  mutePlanet(planetName: ID!): Boolean!
  pinPost(planetName: ID!, postId: ID!): Boolean!
  recordPostView(postId: ID!): PostView
  removeComment(commentId: ID!, planetName: ID!, removedReason: String!): Boolean!
  removePlanetAvatar(planetName: ID!): Boolean!
  removePlanetBanner(planetName: ID!): Boolean!
  removePost(planetName: ID!, postId: ID!, removedReason: String!): Boolean!
  reportPost(postId: ID!): Boolean!
  saveComment(commentId: ID!): Boolean!
  savePost(postId: ID!): Boolean!
  sendFeedback(feedback: String!): Boolean!
  setAppearOffline(appearOffline: Boolean!): Boolean!
  setBio(bio: String!): Boolean!
  setGalaxyDescription(description: String!, galaxyName: ID!): Boolean!
  setPlanetInfo(allowImagePosts: Boolean!, allowLinkPosts: Boolean!, allowTextPosts: Boolean!, customName: String, description: String!, modPostsOnly: Boolean!, planetName: ID!, themeColor: String): Boolean!
  setProfilePic(image: Upload, profilePicUrl: String!): Boolean!
  signUp(email: String, password: String!, username: String!): LoginResponse!
  submitComment(parentCommentId: ID, postId: ID!, textContent: String!): Comment!
  submitPost(image: Upload, link: String, planet: String!, textContent: String, title: String!, type: PostType!): Post!
  toggleCommentEndorsement(commentId: ID!): Boolean!
  togglePostEndorsement(postId: ID!): Boolean!
  unbanUser(bannedId: ID!): Boolean!
  unbanUserFromPlanet(bannedUserId: ID!, planetName: ID!): Boolean!
  unblockUser(blockedId: ID!): Boolean!
  unfollowUser(followedId: ID!): Boolean!
  unhidePost(postId: ID!): Boolean!
  unmutePlanet(planetName: ID!): Boolean!
  unpinPost(planetName: ID!, postId: ID!): Boolean!
  unsaveComment(commentId: ID!): Boolean!
  unsavePost(postId: ID!): Boolean!
  uploadBannerImage(file: Upload!): Boolean!
  uploadGalaxyBannerImage(file: Upload!, galaxyName: ID!): Boolean!
  uploadPlanetAvatarImage(file: Upload!, planetName: ID!): Boolean!
  uploadPlanetBannerImage(file: Upload!, planetName: ID!): Boolean!
  uploadProfilePic(file: Upload!): Boolean!
}

type Planet {
  allowImagePosts: Boolean!
  allowLinkPosts: Boolean!
  allowTextPosts: Boolean!
  avatarImageUrl: String
  bannerImageUrl: String
  createdAt: DateTime!
  creator: User
  creatorId: ID
  customName: String
  defaultCommentSort: CommentSort!
  defaultSort: Sort!
  description: String
  galaxy: Galaxy!
  joined: Boolean!
  modPostsOnly: Boolean!
  moderators: [User!]!
  muted: Boolean!
  name: ID!
  postCount: Float!
  themeColor: String
  userCount: Float
}

type Post {
  author: User
  authorId: ID!
  commentCount: Float!
  createdAt: DateTime!
  domain: String
  editedAt: DateTime
  editedTimeSince: String
  endorsementCount: Float!
  id: ID!
  isEndorsed: Boolean!
  isHidden: Boolean!
  link: String
  newCommentCount: Float!
  planet: Planet
  planetName: ID
  postView: PostView
  postedToProfile: Boolean!
  relativeUrl: String!
  sticky: Boolean!
  textContent: String
  thumbnailUrl: String
  timeSince: String!
  title: String!
  type: PostType!
}

type PostEndorsement {
  active: Boolean!
  createdAt: DateTime!
  postId: ID!
  userId: ID!
}

type PostView {
  createdAt: DateTime!
  lastCommentCount: Float!
  postId: ID!
  userId: ID!
}

type Query {
  allPlanets(galaxyName: ID): [Planet!]!
  blockedUsers: [User!]!
  currentUser: User
  feed(filter: Filter = ALL, galaxyName: ID, page: Int = 0, pageSize: Int = 20, planetName: ID, search: String, sort: Sort = HOT, time: Time = ALL, types: [Type!] = [], username: String): [Post!]!
  galaxies: [Galaxy!]!
  galaxy(galaxyName: ID!): Galaxy
  getTitleAtUrl(url: String!): String!
  hiddenPosts: [Post!]!
  joinedPlanets: [Planet!]!
  mutedPlanets: [Planet!]!
  notifications(unreadOnly: Boolean = false): [ReplyNotification!]!
  planet(planetName: ID!): Planet
  planetExists(name: String!): Boolean!
  popularPlanets(galaxyName: ID): [Planet!]!
  post(postId: ID!): Post
  postComments(postId: ID!, sort: Sort = TOP): [Comment!]!
  recentPlanets(planetNames: [ID!]!): [Planet!]!
  searchPlanets(search: String!): [Planet!]!
  user(username: String!): User
  userComments(page: Int = 0, pageSize: Int = 20, sort: CommentSort = NEW, time: Time = ALL, username: String!): [Comment!]!
}

type ReplyNotification {
  comment: Comment
  commentId: ID
  createdAt: DateTime!
  fromUser: User
  fromUserId: ID
  id: String!
  parentCommentId: ID
  post: Post
  postId: ID
  read: Boolean!
  toUser: User
  toUserId: ID
}

type User {
  admin: Boolean!
  appearOffline: Boolean!
  bannerImageUrl: String
  bio: String
  commentCount: Float!
  createdAt: DateTime!
  endorsementCount: Float!
  followerCount: Float!
  id: ID!
  isBlocked: Boolean!
  isBlocking: Boolean!
  isCurrentUser: Boolean!
  isFollowed: Boolean!
  isFollowing: Boolean!
  lastLogin: DateTime
  level: Float!
  moderatedPlanets: [Planet!]!
  planets: [Planet!]!
  postCount: Float!
  profilePicUrl: String
  tag: String
  tagColor: String
  username: String!
  xp: Float!
}

enum CommentSort {
  NEW
  TOP
}

enum Filter {
  ALL
  MYPLANETS
}

enum PostType {
  IMAGE
  LINK
  TEXT
}

enum Sort {
  HOT
  MOSTCOMMENTS
  NEW
  TOP
}

enum Time {
  ALL
  DAY
  HOUR
  MONTH
  WEEK
  YEAR
}

enum Type {
  IMAGE
  LINK
  TEXT
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
