# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

interface BaseEntity {
  createdAt: DateTime!
  id: ID!
}

type Channel implements BaseEntity {
  createdAt: DateTime!
  description: String
  id: ID!
  isUnread: Boolean!
  lastMessageAt: DateTime
  mentionCount: Int!
  name: String
  server: Server!
}

enum ChannelPermission {
  AttachFiles
  EmbedLinks
  ManageChannel
  ManageMessages
  ManagePermissions
  Mention
  SendMessages
  ViewChannel
}

type ChannelUsersResponse {
  role: String!
  users: [User!]!
}

type Comment implements BaseEntity {
  author: User
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadatas: [LinkMetadata!]!
  parentComment: Comment
  pinPosition: String
  post: Post!
  text: String!
  voteCount: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type File {
  filename: String!
  mime: String!
  size: Float!
  url: String!
}

type Folder implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  description: String
  followerCount: Int!
  id: ID!
  isCollaborative: Boolean!
  name: String!
  owner: User
  postCount: Int!
  server: Server
  visibility: FolderVisibility!
}

enum FolderVisibility {
  Friends
  Private
  Public
  Unlisted
}

type GetChannelPermissionsResponse {
  allowedPermissions: [ChannelPermission!]!
  deniedPermissions: [ChannelPermission!]!
}

enum GetCommentsSort {
  New
  Top
}

type GetMessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
}

type GetPostsResponse {
  hasMore: Boolean!
  posts: [Post!]!
}

enum GetPostsSort {
  Added
  Hot
  New
  Top
}

enum GetPostsTime {
  All
  Day
  Hour
  Month
  Week
  Year
}

enum GetPublicServersSort {
  Featured
  New
  Top
}

type GetUserRelationshipsResponse {
  blockedByUsers: [User!]!
  blockingUsers: [User!]!
  friends: [User!]!
  incomingFriendRequests: [User!]!
  outgoingFriendRequests: [User!]!
}

type Group implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  displayName: String!
  id: ID!
  name: String!
  owner: User!
  users: [User!]!
}

union GroupDmUnion = Group | User

type Image {
  originalHeight: Int!
  originalUrl: String!
  originalWidth: Int!
  popupHeight: Int!
  popupUrl: String
  popupWidth: Int!
  smallHeight: Int!
  smallUrl: String
  smallWidth: Int!
}

type LinkMetadata {
  author: String
  date: DateTime
  description: String
  image: String
  logo: String
  publisher: String
  title: String
  twitterCard: String
  url: String
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Message implements BaseEntity {
  author: User!
  createdAt: DateTime!
  editedAt: DateTime
  file: File
  id: ID!
  image: Image
  isDeleted: Boolean!
  isPinned: Boolean!
  linkMetadatas: [LinkMetadata!]!
  text: String
}

type MessageRemovedResponse {
  channelId: ID
  groupId: ID
  messageId: ID!
  userId: ID
}

type MessageSentResponse {
  channelId: ID
  groupId: ID
  message: Message!
  userId: ID
}

type Mutation {
  """Accept a friend request"""
  acceptFriendRequest(
    """ID of user whose friend request will be accepted"""
    userId: ID!
  ): Boolean!
  addPostToFolder(folderId: ID!, postId: ID!): Folder!

  """Ban a user from a server (requires ServerPermission.BanUser)"""
  banUserFromServer(
    """Remove all posts, comments and messages"""
    purge: Boolean = false
    reason: String

    """ID of server user is being banned from"""
    serverId: ID!

    """ID of user to ban"""
    userId: ID!
  ): Boolean!

  """
  Ban user globally and optionally purge all posts, comments, and messages (requires admin)
  """
  banUserGlobal(
    """Purge (remove all) user's posts, comments, and messages"""
    purge: Boolean = false

    """Reason for ban"""
    reason: String

    """ID of user to ban"""
    userId: ID!
  ): Boolean!

  """Block a user"""
  blockUser(
    """ID of user to block"""
    userId: ID!
  ): Boolean!

  """Change avatar image of group"""
  changeGroupAvatar(
    """Avatar file upload for group, or null to remove avatar"""
    avatarFile: Upload

    """ID of group to update"""
    groupId: ID!
  ): Group!

  """Change password"""
  changePassword(
    """Current password for verification"""
    currentPassword: String!

    """New password"""
    password: String!
  ): LoginResponse!

  """Create an account"""
  createAccount(email: String!, name: String!, password: String!): LoginResponse!
  createChannel(isPrivate: Boolean, name: String!, serverId: ID!): Channel!

  """Create a comment on a post"""
  createComment(parentCommentId: ID, postId: ID!, text: String!): Comment!
  createFolder(isCollaborative: Boolean = false, name: String!, serverId: ID, visibility: FolderVisibility = Public): Folder!

  """Request to be friends with a user"""
  createFriendRequest(
    """ID of user who will receive friend request"""
    userId: ID!
  ): Boolean!

  """Create group with users"""
  createGroup(usernames: [String!]!): Group!

  """Create a post in a server (requires ServerPermission.CreatePost)"""
  createPost(images: [Upload!], linkUrl: String, serverId: ID!, text: String, title: String!): Post!

  """Create a server"""
  createServer(avatarFile: Upload, category: ServerCategory, name: String!, searchable: Boolean = false): Server!

  """Delete a comment"""
  deleteComment(commentId: ID!): Boolean!
  deleteFolder(folderId: ID!): Boolean!

  """Delete a message"""
  deleteMessage(
    """ID of message to delete"""
    messageId: ID!
  ): Boolean!

  """Delete a post (must be author)"""
  deletePost(postId: ID!): Boolean!

  """Update a comment"""
  editComment(
    commentId: ID!

    """New comment text"""
    text: String!
  ): Comment!
  editMessage(
    """ID of message to edit"""
    messageId: ID!

    """New message text"""
    text: String!
  ): Message!

  """Edit a post (must be author)"""
  editPost(
    """ID of post to edit"""
    postId: ID!
    text: String!
  ): Post!
  followFolder(folderId: ID!): Folder!
  hideDm(userId: ID!): Boolean!

  """Ignore (reject) a friend request"""
  ignoreFriendRequest(
    """ID of user whose friend request will be ignored"""
    userId: ID!
  ): Boolean!
  joinPublicServer(serverId: ID!): Boolean!
  joinServerWithInvite(inviteId: ID!): Boolean!

  """Leave a group"""
  leaveGroup(
    """ID of group to leave"""
    groupId: ID!
  ): Boolean!
  leaveServer(
    """ID of server to leave"""
    serverId: ID!
  ): Boolean!

  """Log in with email and password"""
  login(email: String!, password: String!): LoginResponse!

  """Mark all notifications as read"""
  markAllNotificationsRead: Boolean!

  """Mark a single notification as read"""
  markNotificationRead(notifId: ID!): Notification!

  """Pin a post (requires ServerPermission.PinPosts)"""
  pinPost(
    """ID of post to pin"""
    postId: ID!
  ): Post!

  """Remove a friend"""
  removeFriend(
    """ID of friend to remove"""
    userId: ID!
  ): Boolean!
  removePostFromFolder(folderId: ID!, postId: ID!): Folder!

  """Rename a group"""
  renameGroup(
    """ID of group to rename"""
    groupId: ID!

    """New name of group, or null to use default name (list of users)"""
    name: String
  ): Group!

  """Revoke a friend request sent to a user"""
  revokeFriendRequest(
    """ID of user whose friend request will be revoked"""
    userId: ID!
  ): Boolean!

  """Create a chat message"""
  sendMessage(channelId: ID, file: Upload, groupId: ID, text: String, userId: ID): Message!
  startTyping(channelId: ID, groupId: ID, userId: ID): Boolean!
  unbanUserFromServer(serverId: ID!, userId: ID!): Boolean!

  """Unban a user globally (requires admin)"""
  unbanUserGlobal(
    """ID of user to unban"""
    userId: ID!
  ): Boolean!

  """Unblock a user"""
  unblockUser(
    """ID of user to unblock"""
    userId: ID!
  ): Boolean!
  unfollowFolder(folderId: ID!): Folder!

  """Unpin a post (requires ServerPermission.PinPosts)"""
  unpinPost(
    """ID of post to unpin"""
    postId: ID!
  ): Post!

  """Remove vote from a comment"""
  unvoteComment(
    """ID of comment to remove vote"""
    commentId: ID!
  ): Comment!

  """Remove vote from post"""
  unvotePost(
    """ID of post to remove vote (requires ServerPermission.VotePost)"""
    postId: ID!
  ): Post!
  updateFolder(avatarFile: Upload, description: String, folderId: ID!, isCollaborative: Boolean, name: String, visibility: FolderVisibility): Folder!
  updateServer(avatarFile: Upload, bannerFile: Upload, category: ServerCategory, description: String, name: String, searchable: Boolean, serverId: ID!): Server!

  """Update user properties"""
  updateUser(avatarFile: Upload, email: String, name: String): User!

  """Add vote to a comment"""
  voteComment(
    """ID of comment to vote"""
    commentId: ID!
  ): Comment!

  """Add vote to post"""
  votePost(
    """ID of post to vote (requires ServerPermission.VotePost)"""
    postId: ID!
  ): Post!
}

type Notification implements BaseEntity {
  comment: Comment!
  createdAt: DateTime!
  fromUser: User!
  id: ID!
  isRead: Boolean!
  parentComment: Comment
  post: Post!
}

type Post implements BaseEntity {
  author: User
  commentCount: Int!
  createdAt: DateTime!
  domain: String
  editedAt: DateTime
  id: ID!
  imageUrls: [String!]!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadata: LinkMetadata
  linkMetadatas: [LinkMetadata!]!
  linkUrl: String
  pinPosition: String
  relativeUrl: String!
  server: Server!
  text: String
  thumbnailUrl: String
  title: String!
  voteCount: Int!
}

type Query {
  getChannelPermissions(channelId: ID!): GetChannelPermissionsResponse!
  getChannelUsers(channelId: ID!): [ChannelUsersResponse!]!

  """Get comments on a post"""
  getComments(
    """Return all comments for given post ID"""
    postId: ID

    """Sort comments by new or top"""
    sort: GetCommentsSort = Top
  ): [Comment!]!

  """Returns the currently logged in user, or null"""
  getCurrentUser: User
  getFolder(folderId: ID!): Folder!

  """Get list of groups and DMs, sorted by latest activity (updatedAt)"""
  getGroupsAndDms: [GroupDmUnion!]!
  getJoinedServers: [Server!]!

  """
  Get messages in a DM, group, or channel (requires ChannelPermission.ViewChannel or ServerPermission.ViewChannels)
  """
  getMessages(channelId: ID, groupId: ID, initialTime: DateTime, page: Int = 0, pageSize: Int = 50, pinned: Boolean = false, userId: ID): [GetMessagesResponse!]!
  getMutualFriends(userId: ID!): [User!]!
  getMutualServers(userId: ID!): [Server!]!

  """Get all notifications or only unread notifications"""
  getNotifications(
    """Return only unread notifications"""
    unreadOnly: Boolean = false
  ): [Notification!]!
  getOtherUserFolders(userId: ID!): [Folder!]!

  """Get a specific post (requires ServerPermission.ViewPosts)"""
  getPost(
    """ID of post to retrieve"""
    postId: ID!
  ): Post!

  """
  Get posts (requires ServerPermission.ViewPosts if serverId is provided)
  """
  getPosts(
    """If provided, only posts from given folder ID will be returned"""
    folderId: ID
    page: Int = 0
    pageSize: Int = 20

    """If provided, only posts matching given search term will be returned"""
    search: String

    """If provided, only posts from given server ID will be returned"""
    serverId: ID

    """Sort by new, hot, top, most comments"""
    sort: GetPostsSort = Hot

    """Filter by all, hour, day, week, month, year"""
    time: GetPostsTime = All
  ): [GetPostsResponse!]!
  getPublicServers(category: ServerCategory, sort: GetPublicServersSort = Top): [Server!]!
  getServerChannels(serverId: ID!): [Channel!]!
  getServerFolders(serverId: ID!): [Folder!]!
  getServerPermissions(serverId: ID!): [ServerPermission!]!

  """Get LinkMetadata for a URL (requires admin)"""
  getUrlEmbed(url: String!): LinkMetadata! @deprecated(reason: "For testing only")
  getUser(userId: ID!): User!
  getUserFolders: [Folder!]!
  getUserRelationships: GetUserRelationshipsResponse!
}

type Server implements BaseEntity {
  avatarUrl: String
  bannerUrl: String
  category: ServerCategory!
  createdAt: DateTime!
  description: String
  id: ID!
  isBanned: Boolean!
  isChatEnabled: Boolean!
  isFeatured: Boolean!
  isPostsEnabled: Boolean!
  isPublic: Boolean!
  name: String!
  onlineUserCount: Int!
  userCount: Int!
}

enum ServerCategory {
  Arts
  Business
  Culture
  Discussion
  Entertainment
  Gaming
  Health
  Hobbies
  Lifestyle
  Memes
  Meta
  News
  Other
  Politics
  Programming
  Science
  Sports
  Technology
}

enum ServerPermission {
  AddPostToFolder
  Admin
  AttachFiles
  BanUser
  ChangeNickname
  CreateComment
  CreateInvite
  CreatePost
  DisplayRoleSeparately
  EmbedLinks
  KickUser
  ManageChannels
  ManageComments
  ManageFolders
  ManageMessages
  ManageNicknames
  ManagePosts
  ManageRoles
  ManageServer
  Mention
  Mentionable
  SendMessages
  ViewComments
  VoteComment
  VotePost
}

type Subscription {
  """
  Published to all users with permission to view message when a message is deleted or removed
  """
  messageRemoved: MessageRemovedResponse!

  """
  Published to all users with permission to view message when a message is sent
  """
  messageSent: MessageSentResponse!

  """
  Published to all users with permission to view message when a message is updated (edited or embeds fetched)
  """
  messageUpdated: MessageSentResponse!
  refetchGroupsAndDms: Boolean!
  refetchJoinedServers: Boolean!
  refetchNotifications: Boolean!
  refetchServerChannels: Boolean!
  refetchServerFolders: Boolean!
  refetchUserFolders: Boolean!
  refetchUserRelationships: Boolean!
  refetchUsers: Boolean!

  """Published to all users looking at messages when a user starts typing"""
  userStartedTyping(channelId: ID, groupId: ID, userId: ID): String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements BaseEntity {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isAdmin: Boolean!
  isOnline: Boolean!
  isPremium: Boolean!
  lastLoginAt: DateTime
  name: String!
  tag: String!
  username: String!
}
