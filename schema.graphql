# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
Instruction for establishing a live connection that is updated once the underlying data changes.
"""
directive @live(
  """Whether the query should be live or not."""
  if: Boolean = true
) on QUERY

input AddPostToFolderInput {
  folderId: ID!
  postId: ID!
}

input AddUserToGroupInput {
  groupId: ID!
  userId: ID!
}

input AddUserToRoleInput {
  roleId: ID!
  userId: ID!
}

input AnswerFriendRequestInput {
  accept: Boolean!
  userId: ID!
}

input BanUserFromServerInput {
  serverId: ID!
  userId: ID!
}

interface BaseEntity {
  createdAt: DateTime!
  id: ID!
}

input BlockUserInput {
  userId: ID!
}

input ChangeNicknameInput {
  nickname: String
  serverId: ID!
  userId: ID
}

input ChangeNotificationSettingInput {
  notificationSetting: NotificationSetting!
  serverId: ID!
}

input ChangeOnlineStatusInput {
  onlineStatus: OnlineStatus!
}

input ChangePasswordInput {
  currentPassword: String!
  password: String!
}

type Channel implements BaseEntity {
  createdAt: DateTime!
  description: String
  id: ID!
  mentionCount: NonNegativeInt!
  name: String
  permissions: [ChannelPermission!]!
  rolePermissions: [ChannelPermissions!]!
  server: Server!
  unreadCount: NonNegativeInt!
}

enum ChannelPermission {
  ManageMessages
  ManagePermissions
  SendMessages
  ViewChannel
}

type ChannelPermissions {
  allowedPermissions: [ChannelPermission!]!
  deniedPermissions: [ChannelPermission!]!
  role: Role!
}

input CloseDmInput {
  userId: ID!
}

type Comment implements BaseEntity {
  author: ServerUser
  createdAt: DateTime!
  id: ID!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadatas: [LinkMetadata!]!
  parentComment: Comment
  pinnedAt: DateTime
  post: Post!
  text: String!
  updatedAt: DateTime
  voteCount: NonNegativeInt!
}

type CommentChangedResponse {
  added: Comment
  deleted: Comment
  updated: Comment
}

enum CommentsSort {
  New
  Top
}

input CreateAccountInput {
  email: EmailAddress!
  name: String!
  password: String!
}

input CreateChannelInput {
  isPrivate: Boolean = false
  name: String!
  serverId: ID!
}

input CreateCommentInput {
  parentCommentId: ID
  postId: ID!
  text: String!
}

input CreateFolderInput {
  isCollaborative: Boolean = false
  name: String!
  serverId: ID
  visibility: FolderVisibility = Public
}

input CreateFriendRequestInput {
  userId: ID!
}

input CreateGroupInput {
  usernames: [String!]!
}

input CreateMessageInput {
  channelId: ID
  file: Upload
  groupId: ID
  text: String
  userId: ID
}

input CreatePostInput {
  images: [Upload!]
  linkUrl: URL
  serverId: ID!
  text: String
  title: String!
}

input CreateRoleInput {
  color: HexColorCode
  name: String!
  permissions: [ServerPermission!]!
  serverId: ID!
}

input CreateServerInput {
  avatarFile: Upload
  category: ServerCategory = Other
  isPublic: Boolean = false
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteChannelInput {
  channelId: ID!
}

input DeleteCommentInput {
  commentId: ID!
}

input DeleteFolderInput {
  folderId: ID!
}

input DeleteFriendRequestInput {
  userId: ID!
}

input DeleteMessageInput {
  messageId: ID!
}

input DeletePostInput {
  postId: ID!
}

input DeleteRoleInput {
  roleId: ID!
}

input DeleteServerInput {
  serverId: ID!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type File {
  filename: String!
  mime: String!
  size: Float!
  url: URL!
}

type Folder implements BaseEntity {
  avatarUrl: URL
  createdAt: DateTime!
  description: String
  followerCount: NonNegativeInt!
  id: ID!
  isCollaborative: Boolean!
  isFollowing: Boolean!
  name: String!
  owner: User
  postCount: NonNegativeInt!
  server: Server
  visibility: FolderVisibility!
}

enum FolderVisibility {
  Friends
  Private
  Public
  Unlisted
}

input FollowFolderInput {
  folderId: ID!
}

input GlobalBanInput {
  reason: String
  userId: ID!
}

type Group implements BaseEntity {
  avatarUrl: URL
  createdAt: DateTime!
  displayName: String!
  id: ID!
  lastMessageAt: DateTime!
  name: String!
  owner: User!
  unreadCount: NonNegativeInt!
  users: [User!]!
}

"""
A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
"""
scalar HexColorCode

type Image {
  originalHeight: PositiveInt!
  originalUrl: URL!
  originalWidth: PositiveInt!
  popupHeight: PositiveInt!
  popupUrl: URL
  popupWidth: PositiveInt!
  smallHeight: PositiveInt!
  smallUrl: URL
  smallWidth: PositiveInt!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input JoinServerInput {
  inviteId: ID
  serverId: ID
}

input KickUserFromServerInput {
  serverId: ID!
  userId: ID!
}

input LeaveGroupInput {
  groupId: ID!
}

input LeaveServerInput {
  serverId: ID!
}

type LinkMetadata {
  author: String
  date: DateTime
  description: String
  image: URL
  logo: URL
  publisher: String
  title: String
  twitterCard: String
  url: URL
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: JWT!
  user: User!
}

input MarkReplyReadInput {
  isRead: Boolean
  replyId: ID!
}

type Message implements BaseEntity {
  author: User!
  channel: Channel!
  createdAt: DateTime!
  file: File
  group: Group!
  id: ID!
  image: Image
  isDeleted: Boolean!
  isPinned: Boolean!
  linkMetadatas: [LinkMetadata!]!
  pinnedAt: DateTime
  serverUser: ServerUser
  text: String
  toUser: User!
  type: MessageType!
  updatedAt: DateTime
}

type MessageChangedResponse {
  added: Message
  deleted: Message
  updated: Message
}

enum MessageType {
  Join
  Left
  Normal
}

type MessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
}

input MoveChannelInput {
  beforeChannelId: ID
  channelId: ID!
}

input MoveRoleInput {
  beforeRoleId: ID
  roleId: ID!
}

input MoveServerFolderInput {
  beforeFolderId: ID
  folderId: ID!
}

input MoveServerInput {
  beforeServerId: ID
  serverId: ID!
}

input MoveUserFolderInput {
  beforeFolderId: ID
  folderId: ID!
}

type Mutation {
  addPostToFolder(input: AddPostToFolderInput!): Folder!
  addUserToGroup(input: AddUserToGroupInput!): Group!
  addUserToRole(input: AddUserToRoleInput!): ServerUser!
  answerFriendRequest(input: AnswerFriendRequestInput!): Relationship!
  banUserFromServer(input: BanUserFromServerInput!): Boolean!
  blockUser(input: BlockUserInput!): Relationship!
  changeNickname(input: ChangeNicknameInput!): ServerUser!
  changeNotificationSetting(input: ChangeNotificationSettingInput!): ServerUser!
  changeOnlineStatus(input: ChangeOnlineStatusInput!): User!
  changePassword(input: ChangePasswordInput!): LoginResponse!
  closeDm(input: CloseDmInput!): Relationship!
  createAccount(input: CreateAccountInput!): LoginResponse!
  createChannel(input: CreateChannelInput!): Channel!
  createComment(input: CreateCommentInput!): Comment!
  createFolder(input: CreateFolderInput!): Folder!
  createFriendRequest(input: CreateFriendRequestInput!): Relationship!
  createGroup(input: CreateGroupInput!): Group!
  createMessage(input: CreateMessageInput!): Message!
  createPost(input: CreatePostInput!): Post!
  createRole(input: CreateRoleInput!): Role!
  createServer(input: CreateServerInput!): Server!
  deleteAccount: Boolean!
  deleteChannel(input: DeleteChannelInput!): Boolean!
  deleteComment(input: DeleteCommentInput!): Comment!
  deleteFolder(input: DeleteFolderInput!): Boolean!
  deleteFriendRequest(input: DeleteFriendRequestInput!): Relationship!
  deleteMessage(input: DeleteMessageInput!): Boolean!
  deletePost(input: DeletePostInput!): Post!
  deleteRole(input: DeleteRoleInput!): Boolean!
  deleteServer(input: DeleteServerInput!): Boolean!
  followFolder(input: FollowFolderInput!): Folder!
  globalBan(input: GlobalBanInput!): Boolean!
  joinServer(input: JoinServerInput!): Server!
  kickUserFromServer(input: KickUserFromServerInput!): Boolean!
  leaveGroup(input: LeaveGroupInput!): Boolean!
  leaveServer(input: LeaveServerInput!): Boolean!
  login(input: LoginInput!): LoginResponse!
  markAllRepliesRead: Boolean!
  markReplyRead(input: MarkReplyReadInput!): Reply!
  moveChannel(input: MoveChannelInput!): Channel!
  moveRole(input: MoveRoleInput!): Role!
  moveServer(input: MoveServerInput!): ServerUser!
  moveServerFolder(input: MoveServerFolderInput!): Folder!
  moveUserFolder(input: MoveUserFolderInput!): Folder!
  openDm(input: OpenDmInput!): Relationship!
  pinComment(input: PinCommentInput!): Comment!
  pinMessage(input: PinMessageInput!): Message!
  pinPost(input: PinPostInput!): Post!
  readChannel(input: ReadChannelInput!): Channel!
  readDm(input: ReadDmInput!): Relationship!
  readGroup(input: ReadGroupInput!): Group!
  readServer(input: ReadServerInput!): ServerUser!
  removeFriend(input: RemoveFriendInput!): Relationship!
  removePostFromFolder(input: RemovePostFromFolderInput!): Folder!
  removeUserFromGroup(input: RemoveUserFromGroupInput!): Group!
  removeUserFromRole(input: RemoveUserFromRoleInput!): ServerUser!
  startTyping(channelId: ID, groupId: ID, userId: ID): Boolean!
  unbanUserFromServer(input: UnbanUserFromServerInput!): Boolean!
  unblockUser(input: UnblockUserInput!): Relationship!
  unfollowFolder(input: UnfollowFolderInput!): Folder!
  unpinComment(input: UnpinCommentInput!): Comment!
  unpinMessage(input: UnpinMessageInput!): Message!
  unpinPost(input: UnpinPostInput!): Post!
  unvoteComment(input: UnvoteCommentInput!): Comment!
  unvotePost(input: UnvotePostInput!): Post!
  updateAccount(input: UpdateAccountInput!): User!
  updateChannel(input: UpdateChannelInput!): Channel!
  updateChannelPermissions(input: UpdateChannelPermissionsInput!): Role!
  updateComment(input: UpdateCommentInput!): Comment!
  updateFolder(input: UpdateFolderInput!): Folder!
  updateGroup(input: UpdateGroupInput!): Group!
  updateMessage(input: UpdateMessageInput!): Message!
  updatePost(input: UpdatePostInput!): Post!
  updateRole(input: UpdateRoleInput!): Role!
  updateServer(input: UpdateServerInput!): Server!
  voteComment(input: VoteCommentInput!): Comment!
  votePost(input: VotePostInput!): Post!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

enum NotificationSetting {
  All
  Mentions
  None
}

enum OnlineStatus {
  Away
  DoNotDisturb
  Offline
  Online
}

input OpenDmInput {
  userId: ID!
}

input PinCommentInput {
  commentId: ID!
}

input PinMessageInput {
  messageId: ID!
}

input PinPostInput {
  postId: ID!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type Post implements BaseEntity {
  author: ServerUser
  commentCount: NonNegativeInt!
  createdAt: DateTime!
  domain: String
  folders: [Folder!]
  id: ID!
  imageUrls: [String!]!
  isDeleted: Boolean!
  isPinned: Boolean!
  isVoted: Boolean!
  linkMetadata: LinkMetadata
  linkMetadatas: [LinkMetadata!]!
  linkUrl: URL
  pinnedAt: DateTime
  relativeUrl: String!
  server: Server!
  text: String
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime
  voteCount: NonNegativeInt!
}

type PostChangedResponse {
  added: Post
  deleted: Post
  updated: Post
}

type PostsResponse {
  hasMore: Boolean!
  posts: [Post!]!
}

enum PostsSort {
  Added
  Hot
  New
  Top
}

enum PostsTime {
  All
  Day
  Hour
  Month
  Week
  Year
}

enum PublicServersSort {
  Featured
  New
  Top
}

type Query {
  channelUsers(channelId: ID!): [ServerUser!]!
  comments(postId: ID, sort: CommentsSort = Top): [Comment!]!
  folder(id: ID!): Folder!
  messages(channelId: ID, groupId: ID, initialTime: DateTime, page: NonNegativeInt = 0, pageSize: PositiveInt = 100, pinned: Boolean = false, userId: ID): [MessagesResponse!]!
  post(id: ID!): Post!
  posts(folderId: ID, page: NonNegativeInt = 0, pageSize: PositiveInt = 20, search: String, serverId: ID, sort: PostsSort = Hot, time: PostsTime = All): [PostsResponse!]!
  publicServers(category: ServerCategory, sort: PublicServersSort = Top): [Server!]!
  replies(userId: ID!): [Reply!]!
  roleUsers(roleId: ID!): [ServerUser!]!
  user(id: ID): User
}

input ReadChannelInput {
  channelId: ID!
}

input ReadDmInput {
  userId: ID!
}

input ReadGroupInput {
  groupId: ID!
}

input ReadServerInput {
  serverId: ID!
}

type Relationship {
  lastMessageAt: DateTime!
  showChat: Boolean!
  status: RelationshipStatus!
  unreadCount: NonNegativeInt!
  updatedAt: DateTime!
  user: User!
}

enum RelationshipStatus {
  Blocked
  Blocking
  FriendRequestIncoming
  FriendRequestOutgoing
  Friends
  None
}

input RemoveFriendInput {
  userId: ID!
}

input RemovePostFromFolderInput {
  folderId: ID!
  postId: ID!
}

input RemoveUserFromGroupInput {
  groupId: ID!
  userId: ID!
}

input RemoveUserFromRoleInput {
  roleId: ID!
  userId: ID!
}

type RepliesChangedResponse {
  added: [Reply!]!
  deleted: [Reply!]!
  updated: [Reply!]!
}

type Reply implements BaseEntity {
  comment: Comment!
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
}

type Role implements BaseEntity {
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  permissions: [ServerPermission!]!
}

type Server implements BaseEntity {
  avatarUrl: URL
  bannerUrl: URL
  category: ServerCategory!
  channels: [Channel!]!
  createdAt: DateTime!
  description: String
  folders: [Folder!]!
  id: ID!
  isBanned: Boolean!
  isDeleted: Boolean!
  isFeatured: Boolean!
  isPublic: Boolean!
  myRoles: [Role!]!
  name: String!
  nickname: String
  notificationSetting: NotificationSetting!
  owner: User!
  permissions: [ServerPermission!]!
  roles: [Role!]!
  sendWelcomeMessage: Boolean!
  systemMessagesChannel: Channel!
  userCount: NonNegativeInt!
}

enum ServerCategory {
  Arts
  Business
  Culture
  Discussion
  Entertainment
  Gaming
  Health
  Hobbies
  Lifestyle
  Memes
  Meta
  News
  Other
  Politics
  Programming
  Science
  Sports
  Technology
}

enum ServerPermission {
  AddPostToFolder
  Admin
  ChangeNickname
  CreateComment
  CreateInvite
  CreatePost
  DisplayRoleSeparately
  ManageChannels
  ManageComments
  ManageFolders
  ManageMessages
  ManageNicknames
  ManagePosts
  ManageRoles
  ManageServer
  ManageUsers
  Mention
  Mentionable
  SendMessages
  ViewChannels
  ViewComments
  VoteComment
  VotePost
}

type ServerUser {
  color: String
  name: String!
  nickname: String
  roles: [Role!]!
  user: User!
}

type Subscription {
  commentChanged: CommentChangedResponse!
  messageChanged: MessageChangedResponse!
  postChanged: PostChangedResponse!
  repliesChanged: RepliesChangedResponse!
  userStartedTyping(channelId: ID, groupId: ID, userId: ID): String!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UnbanUserFromServerInput {
  serverId: ID!
  userId: ID!
}

input UnblockUserInput {
  userId: ID!
}

input UnfollowFolderInput {
  folderId: ID!
}

input UnpinCommentInput {
  commentId: ID!
}

input UnpinMessageInput {
  messageId: ID!
}

input UnpinPostInput {
  postId: ID!
}

input UnvoteCommentInput {
  commentId: ID!
}

input UnvotePostInput {
  postId: ID!
}

input UpdateAccountInput {
  avatarFile: Upload
  email: EmailAddress
  name: String
}

input UpdateChannelInput {
  channelId: ID!
  isPrivate: Boolean
  name: String
}

input UpdateChannelPermissionsInput {
  allowedPermissions: [ChannelPermission!]!
  channelId: ID!
  deniedPermissions: [ChannelPermission!]!
  roleId: ID!
}

input UpdateCommentInput {
  commentId: ID!
  text: String!
}

input UpdateFolderInput {
  avatarFile: Upload
  folderId: ID!
  isCollaborative: Boolean
  name: String
  visibility: FolderVisibility
}

input UpdateGroupInput {
  avatarFile: Upload
  groupId: ID!
  name: String
}

input UpdateMessageInput {
  messageId: ID!
  text: String!
}

input UpdatePostInput {
  postId: ID!
  text: String!
}

input UpdateRoleInput {
  color: HexColorCode
  name: String
  permissions: [ServerPermission!]
  roleId: ID!
}

input UpdateServerInput {
  avatarFile: Upload
  bannerFile: Upload
  category: ServerCategory
  description: String
  featuredPosition: String
  isFeatured: Boolean
  isPublic: Boolean
  name: String
  ownerId: ID
  sendWelcomeMessage: Boolean
  serverId: ID!
  systemMessagesChannelId: ID
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements BaseEntity {
  avatarUrl: URL
  createdAt: DateTime!
  email: EmailAddress!
  folders: [Folder!]!
  groups: [Group!]!
  id: ID!
  isAdmin: Boolean!
  isCurrentUser: Boolean!
  isOnline: Boolean!
  isPremium: Boolean!
  lastLoginAt: DateTime
  name: String!
  onlineStatus: OnlineStatus!
  relatedUsers: [User!]!
  relationshipStatus: RelationshipStatus!
  servers: [Server!]!
  tag: String!
  unreadCount: NonNegativeInt!
  username: String!
}

input VoteCommentInput {
  commentId: ID!
}

input VotePostInput {
  postId: ID!
}
