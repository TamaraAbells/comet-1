import {
  require_hoist_non_react_statics_cjs
} from "./chunk.P6GW2Q7K.js";
import "./chunk.NQTQMCX3.js";
import {
  require_es
} from "./chunk.4V6HEHZM.js";
import {
  invariant
} from "./chunk.USDFEUXJ.js";
import "./chunk.BROQQF2P.js";
import {
  __toModule
} from "./chunk.5JD2HCIV.js";
import "./chunk.FNFVRXQK.js";
import {
  require_react
} from "./chunk.BD4KNU7W.js";
import {
  require_object_assign
} from "./chunk.MXG56MB2.js";
import {
  __commonJS
} from "./chunk.5OSL2VXB.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/cache/react-npm-17.0.2-99ba37d931-7d0dfebafe.zip/node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS((exports) => {
  /** @license React v17.0.2
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var React = require_react();
      var _assign = require_object_assign();
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      exports.Fragment = 60107;
      var REACT_STRICT_MODE_TYPE = 60108;
      var REACT_PROFILER_TYPE = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      var REACT_SUSPENSE_TYPE = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_OPAQUE_ID_TYPE = 60128;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_OFFSCREEN_TYPE = 60130;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        exports.Fragment = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      __name(getIteratorFn, "getIteratorFn");
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
      __name(error, "error");
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      __name(printWarning, "printWarning");
      var enableScopeAPI = false;
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      __name(isValidElementType, "isValidElementType");
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      __name(getWrappedName, "getWrappedName");
      function getContextName(type) {
        return type.displayName || "Context";
      }
      __name(getContextName, "getContextName");
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case exports.Fragment:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      __name(getComponentName, "getComponentName");
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      __name(disabledLog, "disabledLog");
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      __name(disableLogs, "disableLogs");
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      __name(reenableLogs, "reenableLogs");
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = /* @__PURE__ */ __name(function() {
              throw Error();
            }, "Fake");
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      __name(describeNativeComponentFrame, "describeNativeComponentFrame");
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      __name(shouldConstruct, "shouldConstruct");
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      __name(checkPropTypes, "checkPropTypes");
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      __name(hasValidRef, "hasValidRef");
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      __name(hasValidKey, "hasValidKey");
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }, "warnAboutAccessingKey");
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }, "warnAboutAccessingRef");
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
      var ReactElement = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      }, "ReactElement");
      function jsxDEV(type, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== void 0) {
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      __name(jsxDEV, "jsxDEV");
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement2(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      __name(isValidElement2, "isValidElement");
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      __name(validateExplicitKey, "validateExplicitKey");
      function validateChildKeys(node, parentType) {
        {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      __name(validateChildKeys, "validateChildKeys");
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentName(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      __name(validatePropTypes, "validatePropTypes");
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      __name(validateFragmentProps, "validateFragmentProps");
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    validateChildKeys(children[i], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      __name(jsxWithValidation, "jsxWithValidation");
      function jsxWithValidationStatic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, true);
        }
      }
      __name(jsxWithValidationStatic, "jsxWithValidationStatic");
      function jsxWithValidationDynamic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, false);
        }
      }
      __name(jsxWithValidationDynamic, "jsxWithValidationDynamic");
      var jsx = jsxWithValidationDynamic;
      var jsxs = jsxWithValidationStatic;
      exports.jsx = jsx;
      exports.jsxs = jsxs;
    })();
  }
});

// ../.yarn/cache/react-npm-17.0.2-99ba37d931-7d0dfebafe.zip/node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS((exports, module) => {
  "use strict";
  if (false) {
    module.exports = null;
  } else {
    module.exports = require_react_jsx_runtime_development();
  }
});

// ../.yarn/cache/fast-deep-equal-npm-3.1.3-790edcfcf5-451526766b.zip/node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function equal2(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      if (a.constructor !== b.constructor)
        return false;
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length)
          return false;
        for (i = length; i-- !== 0; )
          if (!equal2(a[i], b[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length)
        return false;
      for (i = length; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
          return false;
      for (i = length; i-- !== 0; ) {
        var key = keys[i];
        if (!equal2(a[key], b[key]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  }, "equal");
});

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/core/DndContext.js
var import_react = __toModule(require_react());
var DndContext = (0, import_react.createContext)({
  dragDropManager: void 0
});

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/core/DndProvider.js
var import_jsx_runtime = __toModule(require_jsx_runtime());
var import_react2 = __toModule(require_react());

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/interfaces.js
var HandlerRole;
(function(HandlerRole2) {
  HandlerRole2["SOURCE"] = "SOURCE";
  HandlerRole2["TARGET"] = "TARGET";
})(HandlerRole || (HandlerRole = {}));

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/types.js
var INIT_COORDS = "dnd-core/INIT_COORDS";
var BEGIN_DRAG = "dnd-core/BEGIN_DRAG";
var PUBLISH_DRAG_SOURCE = "dnd-core/PUBLISH_DRAG_SOURCE";
var HOVER = "dnd-core/HOVER";
var DROP = "dnd-core/DROP";
var END_DRAG = "dnd-core/END_DRAG";

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js
function setClientOffset(clientOffset, sourceClientOffset) {
  return {
    type: INIT_COORDS,
    payload: {
      sourceClientOffset: sourceClientOffset || null,
      clientOffset: clientOffset || null
    }
  };
}
__name(setClientOffset, "setClientOffset");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/js_utils.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof(obj);
}
__name(_typeof, "_typeof");
function get(obj, path, defaultValue) {
  return path.split(".").reduce(function(a, c) {
    return a && a[c] ? a[c] : defaultValue || null;
  }, obj);
}
__name(get, "get");
function without(items, item) {
  return items.filter(function(i) {
    return i !== item;
  });
}
__name(without, "without");
function isObject(input) {
  return _typeof(input) === "object";
}
__name(isObject, "isObject");
function xor(itemsA, itemsB) {
  var map = new Map();
  var insertItem = /* @__PURE__ */ __name(function insertItem2(item) {
    map.set(item, map.has(item) ? map.get(item) + 1 : 1);
  }, "insertItem");
  itemsA.forEach(insertItem);
  itemsB.forEach(insertItem);
  var result = [];
  map.forEach(function(count, key) {
    if (count === 1) {
      result.push(key);
    }
  });
  return result;
}
__name(xor, "xor");
function intersection(itemsA, itemsB) {
  return itemsA.filter(function(t) {
    return itemsB.indexOf(t) > -1;
  });
}
__name(intersection, "intersection");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js
var ResetCoordinatesAction = {
  type: INIT_COORDS,
  payload: {
    clientOffset: null,
    sourceClientOffset: null
  }
};
function createBeginDrag(manager) {
  return /* @__PURE__ */ __name(function beginDrag() {
    var sourceIds = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      publishSource: true
    };
    var _options$publishSourc = options.publishSource, publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc, clientOffset = options.clientOffset, getSourceClientOffset2 = options.getSourceClientOffset;
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    manager.dispatch(setClientOffset(clientOffset));
    verifyInvariants(sourceIds, monitor, registry);
    var sourceId = getDraggableSource(sourceIds, monitor);
    if (sourceId === null) {
      manager.dispatch(ResetCoordinatesAction);
      return;
    }
    var sourceClientOffset = null;
    if (clientOffset) {
      if (!getSourceClientOffset2) {
        throw new Error("getSourceClientOffset must be defined");
      }
      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset2);
      sourceClientOffset = getSourceClientOffset2(sourceId);
    }
    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));
    var source = registry.getSource(sourceId);
    var item = source.beginDrag(monitor, sourceId);
    if (item == null) {
      return void 0;
    }
    verifyItemIsObject(item);
    registry.pinSource(sourceId);
    var itemType = registry.getSourceType(sourceId);
    return {
      type: BEGIN_DRAG,
      payload: {
        itemType,
        item,
        sourceId,
        clientOffset: clientOffset || null,
        sourceClientOffset: sourceClientOffset || null,
        isSourcePublic: !!publishSource
      }
    };
  }, "beginDrag");
}
__name(createBeginDrag, "createBeginDrag");
function verifyInvariants(sourceIds, monitor, registry) {
  invariant(!monitor.isDragging(), "Cannot call beginDrag while dragging.");
  sourceIds.forEach(function(sourceId) {
    invariant(registry.getSource(sourceId), "Expected sourceIds to be registered.");
  });
}
__name(verifyInvariants, "verifyInvariants");
function verifyGetSourceClientOffsetIsFunction(getSourceClientOffset2) {
  invariant(typeof getSourceClientOffset2 === "function", "When clientOffset is provided, getSourceClientOffset must be a function.");
}
__name(verifyGetSourceClientOffsetIsFunction, "verifyGetSourceClientOffsetIsFunction");
function verifyItemIsObject(item) {
  invariant(isObject(item), "Item must be an object.");
}
__name(verifyItemIsObject, "verifyItemIsObject");
function getDraggableSource(sourceIds, monitor) {
  var sourceId = null;
  for (var i = sourceIds.length - 1; i >= 0; i--) {
    if (monitor.canDragSource(sourceIds[i])) {
      sourceId = sourceIds[i];
      break;
    }
  }
  return sourceId;
}
__name(getDraggableSource, "getDraggableSource");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js
function createPublishDragSource(manager) {
  return /* @__PURE__ */ __name(function publishDragSource() {
    var monitor = manager.getMonitor();
    if (monitor.isDragging()) {
      return {
        type: PUBLISH_DRAG_SOURCE
      };
    }
  }, "publishDragSource");
}
__name(createPublishDragSource, "createPublishDragSource");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/matchesType.js
function matchesType(targetType, draggedItemType) {
  if (draggedItemType === null) {
    return targetType === null;
  }
  return Array.isArray(targetType) ? targetType.some(function(t) {
    return t === draggedItemType;
  }) : targetType === draggedItemType;
}
__name(matchesType, "matchesType");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js
function createHover(manager) {
  return /* @__PURE__ */ __name(function hover(targetIdsArg) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, clientOffset = _ref.clientOffset;
    verifyTargetIdsIsArray(targetIdsArg);
    var targetIds = targetIdsArg.slice(0);
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    checkInvariants(targetIds, monitor, registry);
    var draggedItemType = monitor.getItemType();
    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
    hoverAllTargets(targetIds, monitor, registry);
    return {
      type: HOVER,
      payload: {
        targetIds,
        clientOffset: clientOffset || null
      }
    };
  }, "hover");
}
__name(createHover, "createHover");
function verifyTargetIdsIsArray(targetIdsArg) {
  invariant(Array.isArray(targetIdsArg), "Expected targetIds to be an array.");
}
__name(verifyTargetIdsIsArray, "verifyTargetIdsIsArray");
function checkInvariants(targetIds, monitor, registry) {
  invariant(monitor.isDragging(), "Cannot call hover while not dragging.");
  invariant(!monitor.didDrop(), "Cannot call hover after drop.");
  for (var i = 0; i < targetIds.length; i++) {
    var targetId = targetIds[i];
    invariant(targetIds.lastIndexOf(targetId) === i, "Expected targetIds to be unique in the passed array.");
    var target = registry.getTarget(targetId);
    invariant(target, "Expected targetIds to be registered.");
  }
}
__name(checkInvariants, "checkInvariants");
function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
  for (var i = targetIds.length - 1; i >= 0; i--) {
    var targetId = targetIds[i];
    var targetType = registry.getTargetType(targetId);
    if (!matchesType(targetType, draggedItemType)) {
      targetIds.splice(i, 1);
    }
  }
}
__name(removeNonMatchingTargetIds, "removeNonMatchingTargetIds");
function hoverAllTargets(targetIds, monitor, registry) {
  targetIds.forEach(function(targetId) {
    var target = registry.getTarget(targetId);
    target.hover(monitor, targetId);
  });
}
__name(hoverAllTargets, "hoverAllTargets");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
__name(ownKeys, "ownKeys");
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
__name(_objectSpread, "_objectSpread");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
__name(_defineProperty, "_defineProperty");
function createDrop(manager) {
  return /* @__PURE__ */ __name(function drop() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    verifyInvariants2(monitor);
    var targetIds = getDroppableTargets(monitor);
    targetIds.forEach(function(targetId, index2) {
      var dropResult = determineDropResult(targetId, index2, registry, monitor);
      var action = {
        type: DROP,
        payload: {
          dropResult: _objectSpread(_objectSpread({}, options), dropResult)
        }
      };
      manager.dispatch(action);
    });
  }, "drop");
}
__name(createDrop, "createDrop");
function verifyInvariants2(monitor) {
  invariant(monitor.isDragging(), "Cannot call drop while not dragging.");
  invariant(!monitor.didDrop(), "Cannot call drop twice during one drag operation.");
}
__name(verifyInvariants2, "verifyInvariants");
function determineDropResult(targetId, index2, registry, monitor) {
  var target = registry.getTarget(targetId);
  var dropResult = target ? target.drop(monitor, targetId) : void 0;
  verifyDropResultType(dropResult);
  if (typeof dropResult === "undefined") {
    dropResult = index2 === 0 ? {} : monitor.getDropResult();
  }
  return dropResult;
}
__name(determineDropResult, "determineDropResult");
function verifyDropResultType(dropResult) {
  invariant(typeof dropResult === "undefined" || isObject(dropResult), "Drop result must either be an object or undefined.");
}
__name(verifyDropResultType, "verifyDropResultType");
function getDroppableTargets(monitor) {
  var targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
  targetIds.reverse();
  return targetIds;
}
__name(getDroppableTargets, "getDroppableTargets");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js
function createEndDrag(manager) {
  return /* @__PURE__ */ __name(function endDrag() {
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    verifyIsDragging(monitor);
    var sourceId = monitor.getSourceId();
    if (sourceId != null) {
      var source = registry.getSource(sourceId, true);
      source.endDrag(monitor, sourceId);
      registry.unpinSource();
    }
    return {
      type: END_DRAG
    };
  }, "endDrag");
}
__name(createEndDrag, "createEndDrag");
function verifyIsDragging(monitor) {
  invariant(monitor.isDragging(), "Cannot call endDrag while not dragging.");
}
__name(verifyIsDragging, "verifyIsDragging");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/dragDrop/index.js
function createDragDropActions(manager) {
  return {
    beginDrag: createBeginDrag(manager),
    publishDragSource: createPublishDragSource(manager),
    hover: createHover(manager),
    drop: createDrop(manager),
    endDrag: createEndDrag(manager)
  };
}
__name(createDragDropActions, "createDragDropActions");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/classes/DragDropManagerImpl.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck, "_classCallCheck");
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties, "_defineProperties");
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
__name(_createClass, "_createClass");
var DragDropManagerImpl = function() {
  function DragDropManagerImpl2(store, monitor) {
    var _this = this;
    _classCallCheck(this, DragDropManagerImpl2);
    this.isSetUp = false;
    this.handleRefCountChange = function() {
      var shouldSetUp = _this.store.getState().refCount > 0;
      if (_this.backend) {
        if (shouldSetUp && !_this.isSetUp) {
          _this.backend.setup();
          _this.isSetUp = true;
        } else if (!shouldSetUp && _this.isSetUp) {
          _this.backend.teardown();
          _this.isSetUp = false;
        }
      }
    };
    this.store = store;
    this.monitor = monitor;
    store.subscribe(this.handleRefCountChange);
  }
  __name(DragDropManagerImpl2, "DragDropManagerImpl");
  _createClass(DragDropManagerImpl2, [{
    key: "receiveBackend",
    value: /* @__PURE__ */ __name(function receiveBackend(backend) {
      this.backend = backend;
    }, "receiveBackend")
  }, {
    key: "getMonitor",
    value: /* @__PURE__ */ __name(function getMonitor() {
      return this.monitor;
    }, "getMonitor")
  }, {
    key: "getBackend",
    value: /* @__PURE__ */ __name(function getBackend() {
      return this.backend;
    }, "getBackend")
  }, {
    key: "getRegistry",
    value: /* @__PURE__ */ __name(function getRegistry() {
      return this.monitor.registry;
    }, "getRegistry")
  }, {
    key: "getActions",
    value: /* @__PURE__ */ __name(function getActions() {
      var manager = this;
      var dispatch = this.store.dispatch;
      function bindActionCreator(actionCreator) {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var action = actionCreator.apply(manager, args);
          if (typeof action !== "undefined") {
            dispatch(action);
          }
        };
      }
      __name(bindActionCreator, "bindActionCreator");
      var actions = createDragDropActions(this);
      return Object.keys(actions).reduce(function(boundActions, key) {
        var action = actions[key];
        boundActions[key] = bindActionCreator(action);
        return boundActions;
      }, {});
    }, "getActions")
  }, {
    key: "dispatch",
    value: /* @__PURE__ */ __name(function dispatch(action) {
      this.store.dispatch(action);
    }, "dispatch")
  }]);
  return DragDropManagerImpl2;
}();

// ../.yarn/cache/redux-npm-4.0.5-aca53e621f-112739c2fb.zip/node_modules/redux/es/redux.js
var import_symbol_observable = __toModule(require_es());
var randomString = /* @__PURE__ */ __name(function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
}, "randomString");
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: /* @__PURE__ */ __name(function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }, "PROBE_UNKNOWN_ACTION")
};
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
__name(isPlainObject, "isPlainObject");
function createStore(reducer, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error("Expected the enhancer to be a function.");
    }
    return enhancer(createStore)(reducer, preloadedState);
  }
  if (typeof reducer !== "function") {
    throw new Error("Expected the reducer to be a function.");
  }
  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  __name(ensureCanMutateNextListeners, "ensureCanMutateNextListeners");
  function getState() {
    if (isDispatching) {
      throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  __name(getState, "getState");
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error("Expected the listener to be a function.");
    }
    if (isDispatching) {
      throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return /* @__PURE__ */ __name(function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index2 = nextListeners.indexOf(listener);
      nextListeners.splice(index2, 1);
      currentListeners = null;
    }, "unsubscribe");
  }
  __name(subscribe, "subscribe");
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
    }
    if (typeof action.type === "undefined") {
      throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
    }
    if (isDispatching) {
      throw new Error("Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
    return action;
  }
  __name(dispatch, "dispatch");
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error("Expected the nextReducer to be a function.");
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  __name(replaceReducer, "replaceReducer");
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: /* @__PURE__ */ __name(function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new TypeError("Expected the observer to be an object.");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        __name(observeState, "observeState");
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }, "subscribe")
    }, _ref[import_symbol_observable.default] = function() {
      return this;
    }, _ref;
  }
  __name(observable, "observable");
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[import_symbol_observable.default] = observable, _ref2;
}
__name(createStore, "createStore");
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {
  }
}
__name(warning, "warning");
function isCrushed() {
}
__name(isCrushed, "isCrushed");
if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
  warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
}

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/equality.js
var strictEquality = /* @__PURE__ */ __name(function strictEquality2(a, b) {
  return a === b;
}, "strictEquality");
function areCoordsEqual(offsetA, offsetB) {
  if (!offsetA && !offsetB) {
    return true;
  } else if (!offsetA || !offsetB) {
    return false;
  } else {
    return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
  }
}
__name(areCoordsEqual, "areCoordsEqual");
function areArraysEqual(a, b) {
  var isEqual = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : strictEquality;
  if (a.length !== b.length) {
    return false;
  }
  for (var i = 0; i < a.length; ++i) {
    if (!isEqual(a[i], b[i])) {
      return false;
    }
  }
  return true;
}
__name(areArraysEqual, "areArraysEqual");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/dragOffset.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
__name(ownKeys2, "ownKeys");
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
__name(_objectSpread2, "_objectSpread");
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
__name(_defineProperty2, "_defineProperty");
var initialState = {
  initialSourceClientOffset: null,
  initialClientOffset: null,
  clientOffset: null
};
function reduce() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : void 0;
  var payload = action.payload;
  switch (action.type) {
    case INIT_COORDS:
    case BEGIN_DRAG:
      return {
        initialSourceClientOffset: payload.sourceClientOffset,
        initialClientOffset: payload.clientOffset,
        clientOffset: payload.clientOffset
      };
    case HOVER:
      if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {
        return state;
      }
      return _objectSpread2(_objectSpread2({}, state), {}, {
        clientOffset: payload.clientOffset
      });
    case END_DRAG:
    case DROP:
      return initialState;
    default:
      return state;
  }
}
__name(reduce, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/actions/registry.js
var ADD_SOURCE = "dnd-core/ADD_SOURCE";
var ADD_TARGET = "dnd-core/ADD_TARGET";
var REMOVE_SOURCE = "dnd-core/REMOVE_SOURCE";
var REMOVE_TARGET = "dnd-core/REMOVE_TARGET";
function addSource(sourceId) {
  return {
    type: ADD_SOURCE,
    payload: {
      sourceId
    }
  };
}
__name(addSource, "addSource");
function addTarget(targetId) {
  return {
    type: ADD_TARGET,
    payload: {
      targetId
    }
  };
}
__name(addTarget, "addTarget");
function removeSource(sourceId) {
  return {
    type: REMOVE_SOURCE,
    payload: {
      sourceId
    }
  };
}
__name(removeSource, "removeSource");
function removeTarget(targetId) {
  return {
    type: REMOVE_TARGET,
    payload: {
      targetId
    }
  };
}
__name(removeTarget, "removeTarget");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/dragOperation.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
__name(ownKeys3, "ownKeys");
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
__name(_objectSpread3, "_objectSpread");
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
__name(_defineProperty3, "_defineProperty");
var initialState2 = {
  itemType: null,
  item: null,
  sourceId: null,
  targetIds: [],
  dropResult: null,
  didDrop: false,
  isSourcePublic: null
};
function reduce2() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : initialState2;
  var action = arguments.length > 1 ? arguments[1] : void 0;
  var payload = action.payload;
  switch (action.type) {
    case BEGIN_DRAG:
      return _objectSpread3(_objectSpread3({}, state), {}, {
        itemType: payload.itemType,
        item: payload.item,
        sourceId: payload.sourceId,
        isSourcePublic: payload.isSourcePublic,
        dropResult: null,
        didDrop: false
      });
    case PUBLISH_DRAG_SOURCE:
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isSourcePublic: true
      });
    case HOVER:
      return _objectSpread3(_objectSpread3({}, state), {}, {
        targetIds: payload.targetIds
      });
    case REMOVE_TARGET:
      if (state.targetIds.indexOf(payload.targetId) === -1) {
        return state;
      }
      return _objectSpread3(_objectSpread3({}, state), {}, {
        targetIds: without(state.targetIds, payload.targetId)
      });
    case DROP:
      return _objectSpread3(_objectSpread3({}, state), {}, {
        dropResult: payload.dropResult,
        didDrop: true,
        targetIds: []
      });
    case END_DRAG:
      return _objectSpread3(_objectSpread3({}, state), {}, {
        itemType: null,
        item: null,
        sourceId: null,
        dropResult: null,
        didDrop: false,
        isSourcePublic: null,
        targetIds: []
      });
    default:
      return state;
  }
}
__name(reduce2, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/refCount.js
function reduce3() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : void 0;
  switch (action.type) {
    case ADD_SOURCE:
    case ADD_TARGET:
      return state + 1;
    case REMOVE_SOURCE:
    case REMOVE_TARGET:
      return state - 1;
    default:
      return state;
  }
}
__name(reduce3, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/dirtiness.js
var NONE = [];
var ALL = [];
NONE.__IS_NONE__ = true;
ALL.__IS_ALL__ = true;
function areDirty(dirtyIds, handlerIds) {
  if (dirtyIds === NONE) {
    return false;
  }
  if (dirtyIds === ALL || typeof handlerIds === "undefined") {
    return true;
  }
  var commonIds = intersection(handlerIds, dirtyIds);
  return commonIds.length > 0;
}
__name(areDirty, "areDirty");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js
function reduce4() {
  var _state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : NONE;
  var action = arguments.length > 1 ? arguments[1] : void 0;
  switch (action.type) {
    case HOVER:
      break;
    case ADD_SOURCE:
    case ADD_TARGET:
    case REMOVE_TARGET:
    case REMOVE_SOURCE:
      return NONE;
    case BEGIN_DRAG:
    case PUBLISH_DRAG_SOURCE:
    case END_DRAG:
    case DROP:
    default:
      return ALL;
  }
  var _action$payload = action.payload, _action$payload$targe = _action$payload.targetIds, targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe, _action$payload$prevT = _action$payload.prevTargetIds, prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;
  var result = xor(targetIds, prevTargetIds);
  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);
  if (!didChange) {
    return NONE;
  }
  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
  var innermostTargetId = targetIds[targetIds.length - 1];
  if (prevInnermostTargetId !== innermostTargetId) {
    if (prevInnermostTargetId) {
      result.push(prevInnermostTargetId);
    }
    if (innermostTargetId) {
      result.push(innermostTargetId);
    }
  }
  return result;
}
__name(reduce4, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/stateId.js
function reduce5() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  return state + 1;
}
__name(reduce5, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/reducers/index.js
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
__name(ownKeys4, "ownKeys");
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys4(Object(source), true).forEach(function(key) {
        _defineProperty4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
__name(_objectSpread4, "_objectSpread");
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
__name(_defineProperty4, "_defineProperty");
function reduce6() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : void 0;
  return {
    dirtyHandlerIds: reduce4(state.dirtyHandlerIds, {
      type: action.type,
      payload: _objectSpread4(_objectSpread4({}, action.payload), {}, {
        prevTargetIds: get(state, "dragOperation.targetIds", [])
      })
    }),
    dragOffset: reduce(state.dragOffset, action),
    refCount: reduce3(state.refCount, action),
    dragOperation: reduce2(state.dragOperation, action),
    stateId: reduce5(state.stateId)
  };
}
__name(reduce6, "reduce");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/coords.js
function add(a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y
  };
}
__name(add, "add");
function subtract(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
__name(subtract, "subtract");
function getSourceClientOffset(state) {
  var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset, initialSourceClientOffset = state.initialSourceClientOffset;
  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
    return null;
  }
  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
}
__name(getSourceClientOffset, "getSourceClientOffset");
function getDifferenceFromInitialOffset(state) {
  var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset;
  if (!clientOffset || !initialClientOffset) {
    return null;
  }
  return subtract(clientOffset, initialClientOffset);
}
__name(getDifferenceFromInitialOffset, "getDifferenceFromInitialOffset");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/classes/DragDropMonitorImpl.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck2, "_classCallCheck");
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties2, "_defineProperties");
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
__name(_createClass2, "_createClass");
var DragDropMonitorImpl = function() {
  function DragDropMonitorImpl2(store, registry) {
    _classCallCheck2(this, DragDropMonitorImpl2);
    this.store = store;
    this.registry = registry;
  }
  __name(DragDropMonitorImpl2, "DragDropMonitorImpl");
  _createClass2(DragDropMonitorImpl2, [{
    key: "subscribeToStateChange",
    value: /* @__PURE__ */ __name(function subscribeToStateChange(listener) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        handlerIds: void 0
      };
      var handlerIds = options.handlerIds;
      invariant(typeof listener === "function", "listener must be a function.");
      invariant(typeof handlerIds === "undefined" || Array.isArray(handlerIds), "handlerIds, when specified, must be an array of strings.");
      var prevStateId = this.store.getState().stateId;
      var handleChange = /* @__PURE__ */ __name(function handleChange2() {
        var state = _this.store.getState();
        var currentStateId = state.stateId;
        try {
          var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);
          if (!canSkipListener) {
            listener();
          }
        } finally {
          prevStateId = currentStateId;
        }
      }, "handleChange");
      return this.store.subscribe(handleChange);
    }, "subscribeToStateChange")
  }, {
    key: "subscribeToOffsetChange",
    value: /* @__PURE__ */ __name(function subscribeToOffsetChange(listener) {
      var _this2 = this;
      invariant(typeof listener === "function", "listener must be a function.");
      var previousState = this.store.getState().dragOffset;
      var handleChange = /* @__PURE__ */ __name(function handleChange2() {
        var nextState = _this2.store.getState().dragOffset;
        if (nextState === previousState) {
          return;
        }
        previousState = nextState;
        listener();
      }, "handleChange");
      return this.store.subscribe(handleChange);
    }, "subscribeToOffsetChange")
  }, {
    key: "canDragSource",
    value: /* @__PURE__ */ __name(function canDragSource(sourceId) {
      if (!sourceId) {
        return false;
      }
      var source = this.registry.getSource(sourceId);
      invariant(source, "Expected to find a valid source. sourceId=".concat(sourceId));
      if (this.isDragging()) {
        return false;
      }
      return source.canDrag(this, sourceId);
    }, "canDragSource")
  }, {
    key: "canDropOnTarget",
    value: /* @__PURE__ */ __name(function canDropOnTarget(targetId) {
      if (!targetId) {
        return false;
      }
      var target = this.registry.getTarget(targetId);
      invariant(target, "Expected to find a valid target. targetId=".concat(targetId));
      if (!this.isDragging() || this.didDrop()) {
        return false;
      }
      var targetType = this.registry.getTargetType(targetId);
      var draggedItemType = this.getItemType();
      return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);
    }, "canDropOnTarget")
  }, {
    key: "isDragging",
    value: /* @__PURE__ */ __name(function isDragging() {
      return Boolean(this.getItemType());
    }, "isDragging")
  }, {
    key: "isDraggingSource",
    value: /* @__PURE__ */ __name(function isDraggingSource(sourceId) {
      if (!sourceId) {
        return false;
      }
      var source = this.registry.getSource(sourceId, true);
      invariant(source, "Expected to find a valid source. sourceId=".concat(sourceId));
      if (!this.isDragging() || !this.isSourcePublic()) {
        return false;
      }
      var sourceType = this.registry.getSourceType(sourceId);
      var draggedItemType = this.getItemType();
      if (sourceType !== draggedItemType) {
        return false;
      }
      return source.isDragging(this, sourceId);
    }, "isDraggingSource")
  }, {
    key: "isOverTarget",
    value: /* @__PURE__ */ __name(function isOverTarget(targetId) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        shallow: false
      };
      if (!targetId) {
        return false;
      }
      var shallow = options.shallow;
      if (!this.isDragging()) {
        return false;
      }
      var targetType = this.registry.getTargetType(targetId);
      var draggedItemType = this.getItemType();
      if (draggedItemType && !matchesType(targetType, draggedItemType)) {
        return false;
      }
      var targetIds = this.getTargetIds();
      if (!targetIds.length) {
        return false;
      }
      var index2 = targetIds.indexOf(targetId);
      if (shallow) {
        return index2 === targetIds.length - 1;
      } else {
        return index2 > -1;
      }
    }, "isOverTarget")
  }, {
    key: "getItemType",
    value: /* @__PURE__ */ __name(function getItemType() {
      return this.store.getState().dragOperation.itemType;
    }, "getItemType")
  }, {
    key: "getItem",
    value: /* @__PURE__ */ __name(function getItem() {
      return this.store.getState().dragOperation.item;
    }, "getItem")
  }, {
    key: "getSourceId",
    value: /* @__PURE__ */ __name(function getSourceId() {
      return this.store.getState().dragOperation.sourceId;
    }, "getSourceId")
  }, {
    key: "getTargetIds",
    value: /* @__PURE__ */ __name(function getTargetIds() {
      return this.store.getState().dragOperation.targetIds;
    }, "getTargetIds")
  }, {
    key: "getDropResult",
    value: /* @__PURE__ */ __name(function getDropResult() {
      return this.store.getState().dragOperation.dropResult;
    }, "getDropResult")
  }, {
    key: "didDrop",
    value: /* @__PURE__ */ __name(function didDrop() {
      return this.store.getState().dragOperation.didDrop;
    }, "didDrop")
  }, {
    key: "isSourcePublic",
    value: /* @__PURE__ */ __name(function isSourcePublic() {
      return Boolean(this.store.getState().dragOperation.isSourcePublic);
    }, "isSourcePublic")
  }, {
    key: "getInitialClientOffset",
    value: /* @__PURE__ */ __name(function getInitialClientOffset() {
      return this.store.getState().dragOffset.initialClientOffset;
    }, "getInitialClientOffset")
  }, {
    key: "getInitialSourceClientOffset",
    value: /* @__PURE__ */ __name(function getInitialSourceClientOffset() {
      return this.store.getState().dragOffset.initialSourceClientOffset;
    }, "getInitialSourceClientOffset")
  }, {
    key: "getClientOffset",
    value: /* @__PURE__ */ __name(function getClientOffset() {
      return this.store.getState().dragOffset.clientOffset;
    }, "getClientOffset")
  }, {
    key: "getSourceClientOffset",
    value: /* @__PURE__ */ __name(function getSourceClientOffset2() {
      return getSourceClientOffset(this.store.getState().dragOffset);
    }, "getSourceClientOffset")
  }, {
    key: "getDifferenceFromInitialOffset",
    value: /* @__PURE__ */ __name(function getDifferenceFromInitialOffset2() {
      return getDifferenceFromInitialOffset(this.store.getState().dragOffset);
    }, "getDifferenceFromInitialOffset")
  }]);
  return DragDropMonitorImpl2;
}();

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/utils/getNextUniqueId.js
var nextUniqueId = 0;
function getNextUniqueId() {
  return nextUniqueId++;
}
__name(getNextUniqueId, "getNextUniqueId");

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/contracts.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof2 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof2(obj);
}
__name(_typeof2, "_typeof");
function validateSourceContract(source) {
  invariant(typeof source.canDrag === "function", "Expected canDrag to be a function.");
  invariant(typeof source.beginDrag === "function", "Expected beginDrag to be a function.");
  invariant(typeof source.endDrag === "function", "Expected endDrag to be a function.");
}
__name(validateSourceContract, "validateSourceContract");
function validateTargetContract(target) {
  invariant(typeof target.canDrop === "function", "Expected canDrop to be a function.");
  invariant(typeof target.hover === "function", "Expected hover to be a function.");
  invariant(typeof target.drop === "function", "Expected beginDrag to be a function.");
}
__name(validateTargetContract, "validateTargetContract");
function validateType(type, allowArray) {
  if (allowArray && Array.isArray(type)) {
    type.forEach(function(t) {
      return validateType(t, false);
    });
    return;
  }
  invariant(typeof type === "string" || _typeof2(type) === "symbol", allowArray ? "Type can only be a string, a symbol, or an array of either." : "Type can only be a string or a symbol.");
}
__name(validateType, "validateType");

// ../.yarn/cache/@react-dnd-asap-npm-4.0.0-f6b65c5b5b-d3fd66488e.zip/node_modules/@react-dnd/asap/dist/esm/browser/raw.js
function rawAsap(task) {
  if (!queue.length) {
    requestFlush();
    flushing = true;
  }
  queue[queue.length] = task;
}
__name(rawAsap, "rawAsap");
var queue = [];
var flushing = false;
var requestFlush;
var index = 0;
var capacity = 1024;
function flush() {
  while (index < queue.length) {
    var currentIndex = index;
    index = index + 1;
    queue[currentIndex].call();
    if (index > capacity) {
      for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
        queue[scan] = queue[scan + index];
      }
      queue.length -= index;
      index = 0;
    }
  }
  queue.length = 0;
  index = 0;
  flushing = false;
}
__name(flush, "flush");
var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
if (typeof BrowserMutationObserver === "function") {
  requestFlush = makeRequestCallFromMutationObserver(flush);
} else {
  requestFlush = makeRequestCallFromTimer(flush);
}
rawAsap.requestFlush = requestFlush;
function makeRequestCallFromMutationObserver(callback) {
  var toggle = 1;
  var observer = new BrowserMutationObserver(callback);
  var node = document.createTextNode("");
  observer.observe(node, {
    characterData: true
  });
  return /* @__PURE__ */ __name(function requestCall() {
    toggle = -toggle;
    node.data = toggle;
  }, "requestCall");
}
__name(makeRequestCallFromMutationObserver, "makeRequestCallFromMutationObserver");
function makeRequestCallFromTimer(callback) {
  return /* @__PURE__ */ __name(function requestCall() {
    var timeoutHandle = setTimeout(handleTimer, 0);
    var intervalHandle = setInterval(handleTimer, 50);
    function handleTimer() {
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      callback();
    }
    __name(handleTimer, "handleTimer");
  }, "requestCall");
}
__name(makeRequestCallFromTimer, "makeRequestCallFromTimer");
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ../.yarn/cache/@react-dnd-asap-npm-4.0.0-f6b65c5b5b-d3fd66488e.zip/node_modules/@react-dnd/asap/dist/esm/browser/asap.js
var freeTasks = [];
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
function throwFirstError() {
  if (pendingErrors.length) {
    throw pendingErrors.shift();
  }
}
__name(throwFirstError, "throwFirstError");
function asap(task) {
  var rawTask;
  if (freeTasks.length) {
    rawTask = freeTasks.pop();
  } else {
    rawTask = new RawTask();
  }
  rawTask.task = task;
  rawAsap(rawTask);
}
__name(asap, "asap");
var RawTask = function() {
  function RawTask2() {
  }
  __name(RawTask2, "RawTask");
  RawTask2.prototype.call = function() {
    try {
      this.task.call();
    } catch (error) {
      if (asap.onerror) {
        asap.onerror(error);
      } else {
        pendingErrors.push(error);
        requestErrorThrow();
      }
    } finally {
      this.task = null;
      freeTasks[freeTasks.length] = this;
    }
  };
  return RawTask2;
}();

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/classes/HandlerRegistryImpl.js
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck3, "_classCallCheck");
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties3, "_defineProperties");
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
__name(_createClass3, "_createClass");
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
__name(_slicedToArray, "_slicedToArray");
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest, "_nonIterableRest");
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
__name(_unsupportedIterableToArray, "_unsupportedIterableToArray");
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray, "_arrayLikeToArray");
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit, "_iterableToArrayLimit");
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles, "_arrayWithHoles");
function getNextHandlerId(role) {
  var id = getNextUniqueId().toString();
  switch (role) {
    case HandlerRole.SOURCE:
      return "S".concat(id);
    case HandlerRole.TARGET:
      return "T".concat(id);
    default:
      throw new Error("Unknown Handler Role: ".concat(role));
  }
}
__name(getNextHandlerId, "getNextHandlerId");
function parseRoleFromHandlerId(handlerId) {
  switch (handlerId[0]) {
    case "S":
      return HandlerRole.SOURCE;
    case "T":
      return HandlerRole.TARGET;
    default:
      invariant(false, "Cannot parse handler ID: ".concat(handlerId));
  }
}
__name(parseRoleFromHandlerId, "parseRoleFromHandlerId");
function mapContainsValue(map, searchValue) {
  var entries = map.entries();
  var isDone = false;
  do {
    var _entries$next = entries.next(), done = _entries$next.done, _entries$next$value = _slicedToArray(_entries$next.value, 2), value = _entries$next$value[1];
    if (value === searchValue) {
      return true;
    }
    isDone = !!done;
  } while (!isDone);
  return false;
}
__name(mapContainsValue, "mapContainsValue");
var HandlerRegistryImpl = function() {
  function HandlerRegistryImpl2(store) {
    _classCallCheck3(this, HandlerRegistryImpl2);
    this.types = new Map();
    this.dragSources = new Map();
    this.dropTargets = new Map();
    this.pinnedSourceId = null;
    this.pinnedSource = null;
    this.store = store;
  }
  __name(HandlerRegistryImpl2, "HandlerRegistryImpl");
  _createClass3(HandlerRegistryImpl2, [{
    key: "addSource",
    value: /* @__PURE__ */ __name(function addSource2(type, source) {
      validateType(type);
      validateSourceContract(source);
      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);
      this.store.dispatch(addSource(sourceId));
      return sourceId;
    }, "addSource")
  }, {
    key: "addTarget",
    value: /* @__PURE__ */ __name(function addTarget2(type, target) {
      validateType(type, true);
      validateTargetContract(target);
      var targetId = this.addHandler(HandlerRole.TARGET, type, target);
      this.store.dispatch(addTarget(targetId));
      return targetId;
    }, "addTarget")
  }, {
    key: "containsHandler",
    value: /* @__PURE__ */ __name(function containsHandler(handler) {
      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
    }, "containsHandler")
  }, {
    key: "getSource",
    value: /* @__PURE__ */ __name(function getSource(sourceId) {
      var includePinned = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      invariant(this.isSourceId(sourceId), "Expected a valid source ID.");
      var isPinned = includePinned && sourceId === this.pinnedSourceId;
      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
      return source;
    }, "getSource")
  }, {
    key: "getTarget",
    value: /* @__PURE__ */ __name(function getTarget(targetId) {
      invariant(this.isTargetId(targetId), "Expected a valid target ID.");
      return this.dropTargets.get(targetId);
    }, "getTarget")
  }, {
    key: "getSourceType",
    value: /* @__PURE__ */ __name(function getSourceType(sourceId) {
      invariant(this.isSourceId(sourceId), "Expected a valid source ID.");
      return this.types.get(sourceId);
    }, "getSourceType")
  }, {
    key: "getTargetType",
    value: /* @__PURE__ */ __name(function getTargetType(targetId) {
      invariant(this.isTargetId(targetId), "Expected a valid target ID.");
      return this.types.get(targetId);
    }, "getTargetType")
  }, {
    key: "isSourceId",
    value: /* @__PURE__ */ __name(function isSourceId(handlerId) {
      var role = parseRoleFromHandlerId(handlerId);
      return role === HandlerRole.SOURCE;
    }, "isSourceId")
  }, {
    key: "isTargetId",
    value: /* @__PURE__ */ __name(function isTargetId(handlerId) {
      var role = parseRoleFromHandlerId(handlerId);
      return role === HandlerRole.TARGET;
    }, "isTargetId")
  }, {
    key: "removeSource",
    value: /* @__PURE__ */ __name(function removeSource2(sourceId) {
      var _this = this;
      invariant(this.getSource(sourceId), "Expected an existing source.");
      this.store.dispatch(removeSource(sourceId));
      asap(function() {
        _this.dragSources.delete(sourceId);
        _this.types.delete(sourceId);
      });
    }, "removeSource")
  }, {
    key: "removeTarget",
    value: /* @__PURE__ */ __name(function removeTarget2(targetId) {
      invariant(this.getTarget(targetId), "Expected an existing target.");
      this.store.dispatch(removeTarget(targetId));
      this.dropTargets.delete(targetId);
      this.types.delete(targetId);
    }, "removeTarget")
  }, {
    key: "pinSource",
    value: /* @__PURE__ */ __name(function pinSource(sourceId) {
      var source = this.getSource(sourceId);
      invariant(source, "Expected an existing source.");
      this.pinnedSourceId = sourceId;
      this.pinnedSource = source;
    }, "pinSource")
  }, {
    key: "unpinSource",
    value: /* @__PURE__ */ __name(function unpinSource() {
      invariant(this.pinnedSource, "No source is pinned at the time.");
      this.pinnedSourceId = null;
      this.pinnedSource = null;
    }, "unpinSource")
  }, {
    key: "addHandler",
    value: /* @__PURE__ */ __name(function addHandler(role, type, handler) {
      var id = getNextHandlerId(role);
      this.types.set(id, type);
      if (role === HandlerRole.SOURCE) {
        this.dragSources.set(id, handler);
      } else if (role === HandlerRole.TARGET) {
        this.dropTargets.set(id, handler);
      }
      return id;
    }, "addHandler")
  }]);
  return HandlerRegistryImpl2;
}();

// ../.yarn/cache/dnd-core-npm-14.0.0-d38062dc24-828092cc15.zip/node_modules/dnd-core/dist/esm/createDragDropManager.js
function createDragDropManager(backendFactory) {
  var globalContext = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
  var backendOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var debugMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var store = makeStoreInstance(debugMode);
  var monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));
  var manager = new DragDropManagerImpl(store, monitor);
  var backend = backendFactory(manager, globalContext, backendOptions);
  manager.receiveBackend(backend);
  return manager;
}
__name(createDragDropManager, "createDragDropManager");
function makeStoreInstance(debugMode) {
  var reduxDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__;
  return createStore(reduce6, debugMode && reduxDevTools && reduxDevTools({
    name: "dnd-core",
    instanceId: "dnd-core"
  }));
}
__name(makeStoreInstance, "makeStoreInstance");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/core/DndProvider.js
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
__name(_slicedToArray2, "_slicedToArray");
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest2, "_nonIterableRest");
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
__name(_unsupportedIterableToArray2, "_unsupportedIterableToArray");
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray2, "_arrayLikeToArray");
function _iterableToArrayLimit2(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit2, "_iterableToArrayLimit");
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles2, "_arrayWithHoles");
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
__name(_objectWithoutProperties, "_objectWithoutProperties");
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
__name(_objectWithoutPropertiesLoose, "_objectWithoutPropertiesLoose");
var refCount = 0;
var INSTANCE_SYM = Symbol.for("__REACT_DND_CONTEXT_INSTANCE__");
var DndProvider = (0, import_react2.memo)(/* @__PURE__ */ __name(function DndProvider2(_ref) {
  var children = _ref.children, props = _objectWithoutProperties(_ref, ["children"]);
  var _getDndContextValue = getDndContextValue(props), _getDndContextValue2 = _slicedToArray2(_getDndContextValue, 2), manager = _getDndContextValue2[0], isGlobalInstance = _getDndContextValue2[1];
  (0, import_react2.useEffect)(function() {
    if (isGlobalInstance) {
      var context = getGlobalContext();
      ++refCount;
      return function() {
        if (--refCount === 0) {
          context[INSTANCE_SYM] = null;
        }
      };
    }
  }, []);
  return (0, import_jsx_runtime.jsx)(DndContext.Provider, Object.assign({
    value: manager
  }, {
    children
  }), void 0);
}, "DndProvider"));
function getDndContextValue(props) {
  if ("manager" in props) {
    var _manager = {
      dragDropManager: props.manager
    };
    return [_manager, false];
  }
  var manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
  var isGlobalInstance = !props.context;
  return [manager, isGlobalInstance];
}
__name(getDndContextValue, "getDndContextValue");
function createSingletonDndContext(backend) {
  var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getGlobalContext();
  var options = arguments.length > 2 ? arguments[2] : void 0;
  var debugMode = arguments.length > 3 ? arguments[3] : void 0;
  var ctx = context;
  if (!ctx[INSTANCE_SYM]) {
    ctx[INSTANCE_SYM] = {
      dragDropManager: createDragDropManager(backend, context, options, debugMode)
    };
  }
  return ctx[INSTANCE_SYM];
}
__name(createSingletonDndContext, "createSingletonDndContext");
function getGlobalContext() {
  return typeof global !== "undefined" ? global : window;
}
__name(getGlobalContext, "getGlobalContext");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/core/DragPreviewImage.js
var import_react3 = __toModule(require_react());
var DragPreviewImage = (0, import_react3.memo)(/* @__PURE__ */ __name(function DragPreviewImage2(_ref) {
  var connect = _ref.connect, src = _ref.src;
  (0, import_react3.useEffect)(function() {
    if (typeof Image === "undefined")
      return;
    var connected = false;
    var img = new Image();
    img.src = src;
    img.onload = function() {
      connect(img);
      connected = true;
    };
    return function() {
      if (connected) {
        connect(null);
      }
    };
  });
  return null;
}, "DragPreviewImage"));

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/DragSourceMonitorImpl.js
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck4, "_classCallCheck");
function _defineProperties4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties4, "_defineProperties");
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  return Constructor;
}
__name(_createClass4, "_createClass");
var isCallingCanDrag = false;
var isCallingIsDragging = false;
var DragSourceMonitorImpl = function() {
  function DragSourceMonitorImpl2(manager) {
    _classCallCheck4(this, DragSourceMonitorImpl2);
    this.sourceId = null;
    this.internalMonitor = manager.getMonitor();
  }
  __name(DragSourceMonitorImpl2, "DragSourceMonitorImpl");
  _createClass4(DragSourceMonitorImpl2, [{
    key: "receiveHandlerId",
    value: /* @__PURE__ */ __name(function receiveHandlerId(sourceId) {
      this.sourceId = sourceId;
    }, "receiveHandlerId")
  }, {
    key: "getHandlerId",
    value: /* @__PURE__ */ __name(function getHandlerId() {
      return this.sourceId;
    }, "getHandlerId")
  }, {
    key: "canDrag",
    value: /* @__PURE__ */ __name(function canDrag() {
      invariant(!isCallingCanDrag, "You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
      try {
        isCallingCanDrag = true;
        return this.internalMonitor.canDragSource(this.sourceId);
      } finally {
        isCallingCanDrag = false;
      }
    }, "canDrag")
  }, {
    key: "isDragging",
    value: /* @__PURE__ */ __name(function isDragging() {
      if (!this.sourceId) {
        return false;
      }
      invariant(!isCallingIsDragging, "You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
      try {
        isCallingIsDragging = true;
        return this.internalMonitor.isDraggingSource(this.sourceId);
      } finally {
        isCallingIsDragging = false;
      }
    }, "isDragging")
  }, {
    key: "subscribeToStateChange",
    value: /* @__PURE__ */ __name(function subscribeToStateChange(listener, options) {
      return this.internalMonitor.subscribeToStateChange(listener, options);
    }, "subscribeToStateChange")
  }, {
    key: "isDraggingSource",
    value: /* @__PURE__ */ __name(function isDraggingSource(sourceId) {
      return this.internalMonitor.isDraggingSource(sourceId);
    }, "isDraggingSource")
  }, {
    key: "isOverTarget",
    value: /* @__PURE__ */ __name(function isOverTarget(targetId, options) {
      return this.internalMonitor.isOverTarget(targetId, options);
    }, "isOverTarget")
  }, {
    key: "getTargetIds",
    value: /* @__PURE__ */ __name(function getTargetIds() {
      return this.internalMonitor.getTargetIds();
    }, "getTargetIds")
  }, {
    key: "isSourcePublic",
    value: /* @__PURE__ */ __name(function isSourcePublic() {
      return this.internalMonitor.isSourcePublic();
    }, "isSourcePublic")
  }, {
    key: "getSourceId",
    value: /* @__PURE__ */ __name(function getSourceId() {
      return this.internalMonitor.getSourceId();
    }, "getSourceId")
  }, {
    key: "subscribeToOffsetChange",
    value: /* @__PURE__ */ __name(function subscribeToOffsetChange(listener) {
      return this.internalMonitor.subscribeToOffsetChange(listener);
    }, "subscribeToOffsetChange")
  }, {
    key: "canDragSource",
    value: /* @__PURE__ */ __name(function canDragSource(sourceId) {
      return this.internalMonitor.canDragSource(sourceId);
    }, "canDragSource")
  }, {
    key: "canDropOnTarget",
    value: /* @__PURE__ */ __name(function canDropOnTarget(targetId) {
      return this.internalMonitor.canDropOnTarget(targetId);
    }, "canDropOnTarget")
  }, {
    key: "getItemType",
    value: /* @__PURE__ */ __name(function getItemType() {
      return this.internalMonitor.getItemType();
    }, "getItemType")
  }, {
    key: "getItem",
    value: /* @__PURE__ */ __name(function getItem() {
      return this.internalMonitor.getItem();
    }, "getItem")
  }, {
    key: "getDropResult",
    value: /* @__PURE__ */ __name(function getDropResult() {
      return this.internalMonitor.getDropResult();
    }, "getDropResult")
  }, {
    key: "didDrop",
    value: /* @__PURE__ */ __name(function didDrop() {
      return this.internalMonitor.didDrop();
    }, "didDrop")
  }, {
    key: "getInitialClientOffset",
    value: /* @__PURE__ */ __name(function getInitialClientOffset() {
      return this.internalMonitor.getInitialClientOffset();
    }, "getInitialClientOffset")
  }, {
    key: "getInitialSourceClientOffset",
    value: /* @__PURE__ */ __name(function getInitialSourceClientOffset() {
      return this.internalMonitor.getInitialSourceClientOffset();
    }, "getInitialSourceClientOffset")
  }, {
    key: "getSourceClientOffset",
    value: /* @__PURE__ */ __name(function getSourceClientOffset2() {
      return this.internalMonitor.getSourceClientOffset();
    }, "getSourceClientOffset")
  }, {
    key: "getClientOffset",
    value: /* @__PURE__ */ __name(function getClientOffset() {
      return this.internalMonitor.getClientOffset();
    }, "getClientOffset")
  }, {
    key: "getDifferenceFromInitialOffset",
    value: /* @__PURE__ */ __name(function getDifferenceFromInitialOffset2() {
      return this.internalMonitor.getDifferenceFromInitialOffset();
    }, "getDifferenceFromInitialOffset")
  }]);
  return DragSourceMonitorImpl2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/DropTargetMonitorImpl.js
function _classCallCheck5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck5, "_classCallCheck");
function _defineProperties5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties5, "_defineProperties");
function _createClass5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  return Constructor;
}
__name(_createClass5, "_createClass");
var isCallingCanDrop = false;
var DropTargetMonitorImpl = function() {
  function DropTargetMonitorImpl2(manager) {
    _classCallCheck5(this, DropTargetMonitorImpl2);
    this.targetId = null;
    this.internalMonitor = manager.getMonitor();
  }
  __name(DropTargetMonitorImpl2, "DropTargetMonitorImpl");
  _createClass5(DropTargetMonitorImpl2, [{
    key: "receiveHandlerId",
    value: /* @__PURE__ */ __name(function receiveHandlerId(targetId) {
      this.targetId = targetId;
    }, "receiveHandlerId")
  }, {
    key: "getHandlerId",
    value: /* @__PURE__ */ __name(function getHandlerId() {
      return this.targetId;
    }, "getHandlerId")
  }, {
    key: "subscribeToStateChange",
    value: /* @__PURE__ */ __name(function subscribeToStateChange(listener, options) {
      return this.internalMonitor.subscribeToStateChange(listener, options);
    }, "subscribeToStateChange")
  }, {
    key: "canDrop",
    value: /* @__PURE__ */ __name(function canDrop() {
      if (!this.targetId) {
        return false;
      }
      invariant(!isCallingCanDrop, "You may not call monitor.canDrop() inside your canDrop() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor");
      try {
        isCallingCanDrop = true;
        return this.internalMonitor.canDropOnTarget(this.targetId);
      } finally {
        isCallingCanDrop = false;
      }
    }, "canDrop")
  }, {
    key: "isOver",
    value: /* @__PURE__ */ __name(function isOver(options) {
      if (!this.targetId) {
        return false;
      }
      return this.internalMonitor.isOverTarget(this.targetId, options);
    }, "isOver")
  }, {
    key: "getItemType",
    value: /* @__PURE__ */ __name(function getItemType() {
      return this.internalMonitor.getItemType();
    }, "getItemType")
  }, {
    key: "getItem",
    value: /* @__PURE__ */ __name(function getItem() {
      return this.internalMonitor.getItem();
    }, "getItem")
  }, {
    key: "getDropResult",
    value: /* @__PURE__ */ __name(function getDropResult() {
      return this.internalMonitor.getDropResult();
    }, "getDropResult")
  }, {
    key: "didDrop",
    value: /* @__PURE__ */ __name(function didDrop() {
      return this.internalMonitor.didDrop();
    }, "didDrop")
  }, {
    key: "getInitialClientOffset",
    value: /* @__PURE__ */ __name(function getInitialClientOffset() {
      return this.internalMonitor.getInitialClientOffset();
    }, "getInitialClientOffset")
  }, {
    key: "getInitialSourceClientOffset",
    value: /* @__PURE__ */ __name(function getInitialSourceClientOffset() {
      return this.internalMonitor.getInitialSourceClientOffset();
    }, "getInitialSourceClientOffset")
  }, {
    key: "getSourceClientOffset",
    value: /* @__PURE__ */ __name(function getSourceClientOffset2() {
      return this.internalMonitor.getSourceClientOffset();
    }, "getSourceClientOffset")
  }, {
    key: "getClientOffset",
    value: /* @__PURE__ */ __name(function getClientOffset() {
      return this.internalMonitor.getClientOffset();
    }, "getClientOffset")
  }, {
    key: "getDifferenceFromInitialOffset",
    value: /* @__PURE__ */ __name(function getDifferenceFromInitialOffset2() {
      return this.internalMonitor.getDifferenceFromInitialOffset();
    }, "getDifferenceFromInitialOffset")
  }]);
  return DropTargetMonitorImpl2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/wrapConnectorHooks.js
var import_react4 = __toModule(require_react());
function throwIfCompositeComponentElement(element) {
  if (typeof element.type === "string") {
    return;
  }
  var displayName = element.type.displayName || element.type.name || "the component";
  throw new Error("Only native element nodes can now be passed to React DnD connectors." + "You can either wrap ".concat(displayName, " into a <div>, or turn it into a ") + "drag source or a drop target itself.");
}
__name(throwIfCompositeComponentElement, "throwIfCompositeComponentElement");
function wrapHookToRecognizeElement(hook) {
  return function() {
    var elementOrNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (!(0, import_react4.isValidElement)(elementOrNode)) {
      var node = elementOrNode;
      hook(node, options);
      return node;
    }
    var element = elementOrNode;
    throwIfCompositeComponentElement(element);
    var ref = options ? function(node2) {
      return hook(node2, options);
    } : hook;
    return cloneWithRef(element, ref);
  };
}
__name(wrapHookToRecognizeElement, "wrapHookToRecognizeElement");
function wrapConnectorHooks(hooks) {
  var wrappedHooks = {};
  Object.keys(hooks).forEach(function(key) {
    var hook = hooks[key];
    if (key.endsWith("Ref")) {
      wrappedHooks[key] = hooks[key];
    } else {
      var wrappedHook = wrapHookToRecognizeElement(hook);
      wrappedHooks[key] = function() {
        return wrappedHook;
      };
    }
  });
  return wrappedHooks;
}
__name(wrapConnectorHooks, "wrapConnectorHooks");
function setRef(ref, node) {
  if (typeof ref === "function") {
    ref(node);
  } else {
    ref.current = node;
  }
}
__name(setRef, "setRef");
function cloneWithRef(element, newRef) {
  var previousRef = element.ref;
  invariant(typeof previousRef !== "string", "Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs");
  if (!previousRef) {
    return (0, import_react4.cloneElement)(element, {
      ref: newRef
    });
  } else {
    return (0, import_react4.cloneElement)(element, {
      ref: /* @__PURE__ */ __name(function ref(node) {
        setRef(previousRef, node);
        setRef(newRef, node);
      }, "ref")
    });
  }
}
__name(cloneWithRef, "cloneWithRef");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/isRef.js
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof3 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof3(obj);
}
__name(_typeof3, "_typeof");
function isRef(obj) {
  return obj !== null && _typeof3(obj) === "object" && Object.prototype.hasOwnProperty.call(obj, "current");
}
__name(isRef, "isRef");

// ../.yarn/cache/@react-dnd-shallowequal-npm-2.0.0-2a10dca275-cbac47721d.zip/node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js
function shallowEqual(objA, objB, compare, compareContext) {
  var compareResult = compare ? compare.call(compareContext, objA, objB) : void 0;
  if (compareResult !== void 0) {
    return !!compareResult;
  }
  if (objA === objB) {
    return true;
  }
  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];
    if (!bHasOwnProperty(key)) {
      return false;
    }
    var valueA = objA[key];
    var valueB = objB[key];
    compareResult = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
    if (compareResult === false || compareResult === void 0 && valueA !== valueB) {
      return false;
    }
  }
  return true;
}
__name(shallowEqual, "shallowEqual");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/SourceConnector.js
function _classCallCheck6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck6, "_classCallCheck");
function _defineProperties6(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties6, "_defineProperties");
function _createClass6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties6(Constructor, staticProps);
  return Constructor;
}
__name(_createClass6, "_createClass");
var SourceConnector = function() {
  function SourceConnector2(backend) {
    var _this = this;
    _classCallCheck6(this, SourceConnector2);
    this.hooks = wrapConnectorHooks({
      dragSource: /* @__PURE__ */ __name(function dragSource(node, options) {
        _this.clearDragSource();
        _this.dragSourceOptions = options || null;
        if (isRef(node)) {
          _this.dragSourceRef = node;
        } else {
          _this.dragSourceNode = node;
        }
        _this.reconnectDragSource();
      }, "dragSource"),
      dragPreview: /* @__PURE__ */ __name(function dragPreview(node, options) {
        _this.clearDragPreview();
        _this.dragPreviewOptions = options || null;
        if (isRef(node)) {
          _this.dragPreviewRef = node;
        } else {
          _this.dragPreviewNode = node;
        }
        _this.reconnectDragPreview();
      }, "dragPreview")
    });
    this.handlerId = null;
    this.dragSourceRef = null;
    this.dragSourceOptionsInternal = null;
    this.dragPreviewRef = null;
    this.dragPreviewOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDragSource = null;
    this.lastConnectedDragSourceOptions = null;
    this.lastConnectedDragPreview = null;
    this.lastConnectedDragPreviewOptions = null;
    this.backend = backend;
  }
  __name(SourceConnector2, "SourceConnector");
  _createClass6(SourceConnector2, [{
    key: "receiveHandlerId",
    value: /* @__PURE__ */ __name(function receiveHandlerId(newHandlerId) {
      if (this.handlerId === newHandlerId) {
        return;
      }
      this.handlerId = newHandlerId;
      this.reconnect();
    }, "receiveHandlerId")
  }, {
    key: "connectTarget",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dragSource;
    }, "get")
  }, {
    key: "dragSourceOptions",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dragSourceOptionsInternal;
    }, "get"),
    set: /* @__PURE__ */ __name(function set(options) {
      this.dragSourceOptionsInternal = options;
    }, "set")
  }, {
    key: "dragPreviewOptions",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dragPreviewOptionsInternal;
    }, "get"),
    set: /* @__PURE__ */ __name(function set(options) {
      this.dragPreviewOptionsInternal = options;
    }, "set")
  }, {
    key: "reconnect",
    value: /* @__PURE__ */ __name(function reconnect() {
      this.reconnectDragSource();
      this.reconnectDragPreview();
    }, "reconnect")
  }, {
    key: "reconnectDragSource",
    value: /* @__PURE__ */ __name(function reconnectDragSource() {
      var dragSource = this.dragSource;
      var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();
      if (didChange) {
        this.disconnectDragSource();
      }
      if (!this.handlerId) {
        return;
      }
      if (!dragSource) {
        this.lastConnectedDragSource = dragSource;
        return;
      }
      if (didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDragSource = dragSource;
        this.lastConnectedDragSourceOptions = this.dragSourceOptions;
        this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);
      }
    }, "reconnectDragSource")
  }, {
    key: "reconnectDragPreview",
    value: /* @__PURE__ */ __name(function reconnectDragPreview() {
      var dragPreview = this.dragPreview;
      var didChange = this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();
      if (didChange) {
        this.disconnectDragPreview();
      }
      if (!this.handlerId) {
        return;
      }
      if (!dragPreview) {
        this.lastConnectedDragPreview = dragPreview;
        return;
      }
      if (didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDragPreview = dragPreview;
        this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;
        this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);
      }
    }, "reconnectDragPreview")
  }, {
    key: "didHandlerIdChange",
    value: /* @__PURE__ */ __name(function didHandlerIdChange() {
      return this.lastConnectedHandlerId !== this.handlerId;
    }, "didHandlerIdChange")
  }, {
    key: "didConnectedDragSourceChange",
    value: /* @__PURE__ */ __name(function didConnectedDragSourceChange() {
      return this.lastConnectedDragSource !== this.dragSource;
    }, "didConnectedDragSourceChange")
  }, {
    key: "didConnectedDragPreviewChange",
    value: /* @__PURE__ */ __name(function didConnectedDragPreviewChange() {
      return this.lastConnectedDragPreview !== this.dragPreview;
    }, "didConnectedDragPreviewChange")
  }, {
    key: "didDragSourceOptionsChange",
    value: /* @__PURE__ */ __name(function didDragSourceOptionsChange() {
      return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);
    }, "didDragSourceOptionsChange")
  }, {
    key: "didDragPreviewOptionsChange",
    value: /* @__PURE__ */ __name(function didDragPreviewOptionsChange() {
      return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);
    }, "didDragPreviewOptionsChange")
  }, {
    key: "disconnectDragSource",
    value: /* @__PURE__ */ __name(function disconnectDragSource() {
      if (this.dragSourceUnsubscribe) {
        this.dragSourceUnsubscribe();
        this.dragSourceUnsubscribe = void 0;
      }
    }, "disconnectDragSource")
  }, {
    key: "disconnectDragPreview",
    value: /* @__PURE__ */ __name(function disconnectDragPreview() {
      if (this.dragPreviewUnsubscribe) {
        this.dragPreviewUnsubscribe();
        this.dragPreviewUnsubscribe = void 0;
        this.dragPreviewNode = null;
        this.dragPreviewRef = null;
      }
    }, "disconnectDragPreview")
  }, {
    key: "dragSource",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;
    }, "get")
  }, {
    key: "dragPreview",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;
    }, "get")
  }, {
    key: "clearDragSource",
    value: /* @__PURE__ */ __name(function clearDragSource() {
      this.dragSourceNode = null;
      this.dragSourceRef = null;
    }, "clearDragSource")
  }, {
    key: "clearDragPreview",
    value: /* @__PURE__ */ __name(function clearDragPreview() {
      this.dragPreviewNode = null;
      this.dragPreviewRef = null;
    }, "clearDragPreview")
  }]);
  return SourceConnector2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/TargetConnector.js
function _classCallCheck7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck7, "_classCallCheck");
function _defineProperties7(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties7, "_defineProperties");
function _createClass7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties7(Constructor, staticProps);
  return Constructor;
}
__name(_createClass7, "_createClass");
var TargetConnector = function() {
  function TargetConnector2(backend) {
    var _this = this;
    _classCallCheck7(this, TargetConnector2);
    this.hooks = wrapConnectorHooks({
      dropTarget: /* @__PURE__ */ __name(function dropTarget(node, options) {
        _this.clearDropTarget();
        _this.dropTargetOptions = options;
        if (isRef(node)) {
          _this.dropTargetRef = node;
        } else {
          _this.dropTargetNode = node;
        }
        _this.reconnect();
      }, "dropTarget")
    });
    this.handlerId = null;
    this.dropTargetRef = null;
    this.dropTargetOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDropTarget = null;
    this.lastConnectedDropTargetOptions = null;
    this.backend = backend;
  }
  __name(TargetConnector2, "TargetConnector");
  _createClass7(TargetConnector2, [{
    key: "connectTarget",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dropTarget;
    }, "get")
  }, {
    key: "reconnect",
    value: /* @__PURE__ */ __name(function reconnect() {
      var didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();
      if (didChange) {
        this.disconnectDropTarget();
      }
      var dropTarget = this.dropTarget;
      if (!this.handlerId) {
        return;
      }
      if (!dropTarget) {
        this.lastConnectedDropTarget = dropTarget;
        return;
      }
      if (didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDropTarget = dropTarget;
        this.lastConnectedDropTargetOptions = this.dropTargetOptions;
        this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);
      }
    }, "reconnect")
  }, {
    key: "receiveHandlerId",
    value: /* @__PURE__ */ __name(function receiveHandlerId(newHandlerId) {
      if (newHandlerId === this.handlerId) {
        return;
      }
      this.handlerId = newHandlerId;
      this.reconnect();
    }, "receiveHandlerId")
  }, {
    key: "dropTargetOptions",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dropTargetOptionsInternal;
    }, "get"),
    set: /* @__PURE__ */ __name(function set(options) {
      this.dropTargetOptionsInternal = options;
    }, "set")
  }, {
    key: "didHandlerIdChange",
    value: /* @__PURE__ */ __name(function didHandlerIdChange() {
      return this.lastConnectedHandlerId !== this.handlerId;
    }, "didHandlerIdChange")
  }, {
    key: "didDropTargetChange",
    value: /* @__PURE__ */ __name(function didDropTargetChange() {
      return this.lastConnectedDropTarget !== this.dropTarget;
    }, "didDropTargetChange")
  }, {
    key: "didOptionsChange",
    value: /* @__PURE__ */ __name(function didOptionsChange() {
      return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);
    }, "didOptionsChange")
  }, {
    key: "disconnectDropTarget",
    value: /* @__PURE__ */ __name(function disconnectDropTarget() {
      if (this.unsubscribeDropTarget) {
        this.unsubscribeDropTarget();
        this.unsubscribeDropTarget = void 0;
      }
    }, "disconnectDropTarget")
  }, {
    key: "dropTarget",
    get: /* @__PURE__ */ __name(function get2() {
      return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;
    }, "get")
  }, {
    key: "clearDropTarget",
    value: /* @__PURE__ */ __name(function clearDropTarget() {
      this.dropTargetRef = null;
      this.dropTargetNode = null;
    }, "clearDropTarget")
  }]);
  return TargetConnector2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/internals/registration.js
function registerTarget(type, target, manager) {
  var registry = manager.getRegistry();
  var targetId = registry.addTarget(type, target);
  return [targetId, function() {
    return registry.removeTarget(targetId);
  }];
}
__name(registerTarget, "registerTarget");
function registerSource(type, source, manager) {
  var registry = manager.getRegistry();
  var sourceId = registry.addSource(type, source);
  return [sourceId, function() {
    return registry.removeSource(sourceId);
  }];
}
__name(registerSource, "registerSource");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/utils.js
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof4 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof4(obj);
}
__name(_typeof4, "_typeof");
function getDecoratedComponent(instanceRef) {
  var currentRef = instanceRef.current;
  if (currentRef == null) {
    return null;
  } else if (currentRef.decoratedRef) {
    return currentRef.decoratedRef.current;
  } else {
    return currentRef;
  }
}
__name(getDecoratedComponent, "getDecoratedComponent");
function isClassComponent(Component3) {
  return Component3 && Component3.prototype && typeof Component3.prototype.render === "function";
}
__name(isClassComponent, "isClassComponent");
function isRefForwardingComponent(C) {
  var _item$$$typeof;
  var item = C;
  return (item === null || item === void 0 ? void 0 : (_item$$$typeof = item.$$typeof) === null || _item$$$typeof === void 0 ? void 0 : _item$$$typeof.toString()) === "Symbol(react.forward_ref)";
}
__name(isRefForwardingComponent, "isRefForwardingComponent");
function isRefable(C) {
  return isClassComponent(C) || isRefForwardingComponent(C);
}
__name(isRefable, "isRefable");
function checkDecoratorArguments(functionName, signature) {
  if (true) {
    for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
      var arg = i + 2 < 2 || arguments.length <= i + 2 ? void 0 : arguments[i + 2];
      if (arg && arg.prototype && arg.prototype.render) {
        console.error("You seem to be applying the arguments in the wrong order. " + "It should be ".concat(functionName, "(").concat(signature, ")(Component), not the other way around. ") + "Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#you-seem-to-be-applying-the-arguments-in-the-wrong-order");
        return;
      }
    }
  }
}
__name(checkDecoratorArguments, "checkDecoratorArguments");
function isFunction(input) {
  return typeof input === "function";
}
__name(isFunction, "isFunction");
function noop() {
}
__name(noop, "noop");
function isObjectLike(input) {
  return _typeof4(input) === "object" && input !== null;
}
__name(isObjectLike, "isObjectLike");
function isPlainObject2(input) {
  if (!isObjectLike(input)) {
    return false;
  }
  if (Object.getPrototypeOf(input) === null) {
    return true;
  }
  var proto = input;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(input) === proto;
}
__name(isPlainObject2, "isPlainObject");
function isValidType(type, allowArray) {
  return typeof type === "string" || _typeof4(type) === "symbol" || !!allowArray && Array.isArray(type) && type.every(function(t) {
    return isValidType(t, false);
  });
}
__name(isValidType, "isValidType");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/decorateHandler.js
var import_jsx_runtime2 = __toModule(require_jsx_runtime());
var import_react5 = __toModule(require_react());

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/disposables.js
function _classCallCheck8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck8, "_classCallCheck");
function _defineProperties8(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties8, "_defineProperties");
function _createClass8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties8(Constructor, staticProps);
  return Constructor;
}
__name(_createClass8, "_createClass");
var Disposable = function() {
  function Disposable2(action) {
    _classCallCheck8(this, Disposable2);
    this.isDisposed = false;
    this.action = isFunction(action) ? action : noop;
  }
  __name(Disposable2, "Disposable");
  _createClass8(Disposable2, [{
    key: "dispose",
    value: /* @__PURE__ */ __name(function dispose() {
      if (!this.isDisposed) {
        this.action();
        this.isDisposed = true;
      }
    }, "dispose")
  }], [{
    key: "isDisposable",
    value: /* @__PURE__ */ __name(function isDisposable(d) {
      return Boolean(d && isFunction(d.dispose));
    }, "isDisposable")
  }, {
    key: "_fixup",
    value: /* @__PURE__ */ __name(function _fixup(result) {
      return Disposable2.isDisposable(result) ? result : Disposable2.empty;
    }, "_fixup")
  }, {
    key: "create",
    value: /* @__PURE__ */ __name(function create(action) {
      return new Disposable2(action);
    }, "create")
  }]);
  return Disposable2;
}();
Disposable.empty = {
  dispose: noop
};
var CompositeDisposable = function() {
  function CompositeDisposable2() {
    _classCallCheck8(this, CompositeDisposable2);
    this.isDisposed = false;
    for (var _len = arguments.length, disposables = new Array(_len), _key = 0; _key < _len; _key++) {
      disposables[_key] = arguments[_key];
    }
    this.disposables = disposables;
  }
  __name(CompositeDisposable2, "CompositeDisposable");
  _createClass8(CompositeDisposable2, [{
    key: "add",
    value: /* @__PURE__ */ __name(function add2(item) {
      if (this.isDisposed) {
        item.dispose();
      } else {
        this.disposables.push(item);
      }
    }, "add")
  }, {
    key: "remove",
    value: /* @__PURE__ */ __name(function remove(item) {
      var shouldDispose = false;
      if (!this.isDisposed) {
        var idx = this.disposables.indexOf(item);
        if (idx !== -1) {
          shouldDispose = true;
          this.disposables.splice(idx, 1);
          item.dispose();
        }
      }
      return shouldDispose;
    }, "remove")
  }, {
    key: "clear",
    value: /* @__PURE__ */ __name(function clear() {
      if (!this.isDisposed) {
        var len = this.disposables.length;
        var currentDisposables = new Array(len);
        for (var i = 0; i < len; i++) {
          currentDisposables[i] = this.disposables[i];
        }
        this.disposables = [];
        for (var _i = 0; _i < len; _i++) {
          currentDisposables[_i].dispose();
        }
      }
    }, "clear")
  }, {
    key: "dispose",
    value: /* @__PURE__ */ __name(function dispose() {
      if (!this.isDisposed) {
        this.isDisposed = true;
        var len = this.disposables.length;
        var currentDisposables = new Array(len);
        for (var i = 0; i < len; i++) {
          currentDisposables[i] = this.disposables[i];
        }
        this.disposables = [];
        for (var _i2 = 0; _i2 < len; _i2++) {
          currentDisposables[_i2].dispose();
        }
      }
    }, "dispose")
  }]);
  return CompositeDisposable2;
}();
var SerialDisposable = function() {
  function SerialDisposable2() {
    _classCallCheck8(this, SerialDisposable2);
    this.isDisposed = false;
  }
  __name(SerialDisposable2, "SerialDisposable");
  _createClass8(SerialDisposable2, [{
    key: "getDisposable",
    value: /* @__PURE__ */ __name(function getDisposable() {
      return this.current;
    }, "getDisposable")
  }, {
    key: "setDisposable",
    value: /* @__PURE__ */ __name(function setDisposable(value) {
      var shouldDispose = this.isDisposed;
      if (!shouldDispose) {
        var old = this.current;
        this.current = value;
        if (old) {
          old.dispose();
        }
      }
      if (shouldDispose && value) {
        value.dispose();
      }
    }, "setDisposable")
  }, {
    key: "dispose",
    value: /* @__PURE__ */ __name(function dispose() {
      if (!this.isDisposed) {
        this.isDisposed = true;
        var old = this.current;
        this.current = void 0;
        if (old) {
          old.dispose();
        }
      }
    }, "dispose")
  }]);
  return SerialDisposable2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/decorateHandler.js
var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
function _typeof5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof5 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof5 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof5(obj);
}
__name(_typeof5, "_typeof");
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
__name(_slicedToArray3, "_slicedToArray");
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest3, "_nonIterableRest");
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
__name(_unsupportedIterableToArray3, "_unsupportedIterableToArray");
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray3, "_arrayLikeToArray");
function _iterableToArrayLimit3(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit3, "_iterableToArrayLimit");
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles3, "_arrayWithHoles");
function _classCallCheck9(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck9, "_classCallCheck");
function _defineProperties9(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties9, "_defineProperties");
function _createClass9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties9(Constructor, staticProps);
  return Constructor;
}
__name(_createClass9, "_createClass");
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
__name(_inherits, "_inherits");
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  }, "_setPrototypeOf");
  return _setPrototypeOf(o, p);
}
__name(_setPrototypeOf, "_setPrototypeOf");
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return /* @__PURE__ */ __name(function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  }, "_createSuperInternal");
}
__name(_createSuper, "_createSuper");
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof5(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
__name(_possibleConstructorReturn, "_possibleConstructorReturn");
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
__name(_assertThisInitialized, "_assertThisInitialized");
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
__name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf3(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  }, "_getPrototypeOf");
  return _getPrototypeOf(o);
}
__name(_getPrototypeOf, "_getPrototypeOf");
function decorateHandler(_ref) {
  var DecoratedComponent = _ref.DecoratedComponent, createHandler = _ref.createHandler, createMonitor = _ref.createMonitor, createConnector = _ref.createConnector, registerHandler = _ref.registerHandler, containerDisplayName = _ref.containerDisplayName, getType = _ref.getType, collect = _ref.collect, options = _ref.options;
  var _options$arePropsEqua = options.arePropsEqual, arePropsEqual = _options$arePropsEqua === void 0 ? shallowEqual : _options$arePropsEqua;
  var Decorated = DecoratedComponent;
  var displayName = DecoratedComponent.displayName || DecoratedComponent.name || "Component";
  var DragDropContainer = function(_Component) {
    _inherits(DragDropContainer2, _Component);
    var _super = _createSuper(DragDropContainer2);
    function DragDropContainer2(props) {
      var _this;
      _classCallCheck9(this, DragDropContainer2);
      _this = _super.call(this, props);
      _this.decoratedRef = (0, import_react5.createRef)();
      _this.handleChange = function() {
        var nextState = _this.getCurrentState();
        if (!shallowEqual(nextState, _this.state)) {
          _this.setState(nextState);
        }
      };
      _this.disposable = new SerialDisposable();
      _this.receiveProps(props);
      _this.dispose();
      return _this;
    }
    __name(DragDropContainer2, "DragDropContainer");
    _createClass9(DragDropContainer2, [{
      key: "getHandlerId",
      value: /* @__PURE__ */ __name(function getHandlerId() {
        return this.handlerId;
      }, "getHandlerId")
    }, {
      key: "getDecoratedComponentInstance",
      value: /* @__PURE__ */ __name(function getDecoratedComponentInstance() {
        invariant(this.decoratedRef.current, "In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()");
        return this.decoratedRef.current;
      }, "getDecoratedComponentInstance")
    }, {
      key: "shouldComponentUpdate",
      value: /* @__PURE__ */ __name(function shouldComponentUpdate(nextProps, nextState) {
        return !arePropsEqual(nextProps, this.props) || !shallowEqual(nextState, this.state);
      }, "shouldComponentUpdate")
    }, {
      key: "componentDidMount",
      value: /* @__PURE__ */ __name(function componentDidMount() {
        this.disposable = new SerialDisposable();
        this.currentType = void 0;
        this.receiveProps(this.props);
        this.handleChange();
      }, "componentDidMount")
    }, {
      key: "componentDidUpdate",
      value: /* @__PURE__ */ __name(function componentDidUpdate(prevProps) {
        if (!arePropsEqual(this.props, prevProps)) {
          this.receiveProps(this.props);
          this.handleChange();
        }
      }, "componentDidUpdate")
    }, {
      key: "componentWillUnmount",
      value: /* @__PURE__ */ __name(function componentWillUnmount() {
        this.dispose();
      }, "componentWillUnmount")
    }, {
      key: "receiveProps",
      value: /* @__PURE__ */ __name(function receiveProps(props) {
        if (!this.handler) {
          return;
        }
        this.handler.receiveProps(props);
        this.receiveType(getType(props));
      }, "receiveProps")
    }, {
      key: "receiveType",
      value: /* @__PURE__ */ __name(function receiveType(type) {
        if (!this.handlerMonitor || !this.manager || !this.handlerConnector) {
          return;
        }
        if (type === this.currentType) {
          return;
        }
        this.currentType = type;
        var _registerHandler = registerHandler(type, this.handler, this.manager), _registerHandler2 = _slicedToArray3(_registerHandler, 2), handlerId = _registerHandler2[0], unregister = _registerHandler2[1];
        this.handlerId = handlerId;
        this.handlerMonitor.receiveHandlerId(handlerId);
        this.handlerConnector.receiveHandlerId(handlerId);
        var globalMonitor = this.manager.getMonitor();
        var unsubscribe = globalMonitor.subscribeToStateChange(this.handleChange, {
          handlerIds: [handlerId]
        });
        this.disposable.setDisposable(new CompositeDisposable(new Disposable(unsubscribe), new Disposable(unregister)));
      }, "receiveType")
    }, {
      key: "dispose",
      value: /* @__PURE__ */ __name(function dispose() {
        this.disposable.dispose();
        if (this.handlerConnector) {
          this.handlerConnector.receiveHandlerId(null);
        }
      }, "dispose")
    }, {
      key: "getCurrentState",
      value: /* @__PURE__ */ __name(function getCurrentState() {
        if (!this.handlerConnector) {
          return {};
        }
        var nextState = collect(this.handlerConnector.hooks, this.handlerMonitor, this.props);
        if (true) {
          invariant(isPlainObject2(nextState), "Expected `collect` specified as the second argument to %s for %s to return a plain object of props to inject. Instead, received %s.", containerDisplayName, displayName, nextState);
        }
        return nextState;
      }, "getCurrentState")
    }, {
      key: "render",
      value: /* @__PURE__ */ __name(function render() {
        var _this2 = this;
        return (0, import_jsx_runtime2.jsx)(DndContext.Consumer, {
          children: /* @__PURE__ */ __name(function children(_ref2) {
            var dragDropManager = _ref2.dragDropManager;
            _this2.receiveDragDropManager(dragDropManager);
            if (typeof requestAnimationFrame !== "undefined") {
              requestAnimationFrame(function() {
                var _this2$handlerConnect;
                return (_this2$handlerConnect = _this2.handlerConnector) === null || _this2$handlerConnect === void 0 ? void 0 : _this2$handlerConnect.reconnect();
              });
            }
            return (0, import_jsx_runtime2.jsx)(Decorated, Object.assign({}, _this2.props, _this2.getCurrentState(), {
              ref: isRefable(Decorated) ? _this2.decoratedRef : null
            }), void 0);
          }, "children")
        }, void 0);
      }, "render")
    }, {
      key: "receiveDragDropManager",
      value: /* @__PURE__ */ __name(function receiveDragDropManager(dragDropManager) {
        if (this.manager !== void 0) {
          return;
        }
        invariant(dragDropManager !== void 0, "Could not find the drag and drop manager in the context of %s. Make sure to render a DndProvider component in your top-level component. Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#could-not-find-the-drag-and-drop-manager-in-the-context", displayName, displayName);
        if (dragDropManager === void 0) {
          return;
        }
        this.manager = dragDropManager;
        this.handlerMonitor = createMonitor(dragDropManager);
        this.handlerConnector = createConnector(dragDropManager.getBackend());
        this.handler = createHandler(this.handlerMonitor, this.decoratedRef);
      }, "receiveDragDropManager")
    }]);
    return DragDropContainer2;
  }(import_react5.Component);
  DragDropContainer.DecoratedComponent = DecoratedComponent;
  DragDropContainer.displayName = "".concat(containerDisplayName, "(").concat(displayName, ")");
  return (0, import_hoist_non_react_statics.default)(DragDropContainer, DecoratedComponent);
}
__name(decorateHandler, "decorateHandler");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/createSourceFactory.js
function _classCallCheck10(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck10, "_classCallCheck");
function _defineProperties10(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties10, "_defineProperties");
function _createClass10(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties10(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties10(Constructor, staticProps);
  return Constructor;
}
__name(_createClass10, "_createClass");
var ALLOWED_SPEC_METHODS = ["canDrag", "beginDrag", "isDragging", "endDrag"];
var REQUIRED_SPEC_METHODS = ["beginDrag"];
var SourceImpl = function() {
  function SourceImpl2(spec, monitor, ref) {
    var _this = this;
    _classCallCheck10(this, SourceImpl2);
    this.props = null;
    this.beginDrag = function() {
      if (!_this.props) {
        return;
      }
      var item = _this.spec.beginDrag(_this.props, _this.monitor, _this.ref.current);
      if (true) {
        invariant(isPlainObject2(item), "beginDrag() must return a plain object that represents the dragged item. Instead received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source", item);
      }
      return item;
    };
    this.spec = spec;
    this.monitor = monitor;
    this.ref = ref;
  }
  __name(SourceImpl2, "SourceImpl");
  _createClass10(SourceImpl2, [{
    key: "receiveProps",
    value: /* @__PURE__ */ __name(function receiveProps(props) {
      this.props = props;
    }, "receiveProps")
  }, {
    key: "canDrag",
    value: /* @__PURE__ */ __name(function canDrag() {
      if (!this.props) {
        return false;
      }
      if (!this.spec.canDrag) {
        return true;
      }
      return this.spec.canDrag(this.props, this.monitor);
    }, "canDrag")
  }, {
    key: "isDragging",
    value: /* @__PURE__ */ __name(function isDragging(globalMonitor, sourceId) {
      if (!this.props) {
        return false;
      }
      if (!this.spec.isDragging) {
        return sourceId === globalMonitor.getSourceId();
      }
      return this.spec.isDragging(this.props, this.monitor);
    }, "isDragging")
  }, {
    key: "endDrag",
    value: /* @__PURE__ */ __name(function endDrag() {
      if (!this.props) {
        return;
      }
      if (!this.spec.endDrag) {
        return;
      }
      this.spec.endDrag(this.props, this.monitor, getDecoratedComponent(this.ref));
    }, "endDrag")
  }]);
  return SourceImpl2;
}();
function createSourceFactory(spec) {
  Object.keys(spec).forEach(function(key) {
    invariant(ALLOWED_SPEC_METHODS.indexOf(key) > -1, 'Expected the drag source specification to only have some of the following keys: %s. Instead received a specification with an unexpected "%s" key. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', ALLOWED_SPEC_METHODS.join(", "), key);
    invariant(typeof spec[key] === "function", "Expected %s in the drag source specification to be a function. Instead received a specification with %s: %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source", key, key, spec[key]);
  });
  REQUIRED_SPEC_METHODS.forEach(function(key) {
    invariant(typeof spec[key] === "function", "Expected %s in the drag source specification to be a function. Instead received a specification with %s: %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source", key, key, spec[key]);
  });
  return /* @__PURE__ */ __name(function createSource(monitor, ref) {
    return new SourceImpl(spec, monitor, ref);
  }, "createSource");
}
__name(createSourceFactory, "createSourceFactory");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/DragSource.js
function DragSource(type, spec, collect) {
  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  checkDecoratorArguments("DragSource", "type, spec, collect[, options]", type, spec, collect, options);
  var getType = type;
  if (typeof type !== "function") {
    invariant(isValidType(type), 'Expected "type" provided as the first argument to DragSource to be a string, or a function that returns a string given the current props. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', type);
    getType = /* @__PURE__ */ __name(function getType2() {
      return type;
    }, "getType");
  }
  invariant(isPlainObject2(spec), 'Expected "spec" provided as the second argument to DragSource to be a plain object. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', spec);
  var createSource = createSourceFactory(spec);
  invariant(typeof collect === "function", 'Expected "collect" provided as the third argument to DragSource to be a function that returns a plain object of props to inject. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);
  invariant(isPlainObject2(options), 'Expected "options" provided as the fourth argument to DragSource to be a plain object when specified. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);
  return /* @__PURE__ */ __name(function decorateSource(DecoratedComponent) {
    return decorateHandler({
      containerDisplayName: "DragSource",
      createHandler: createSource,
      registerHandler: registerSource,
      createConnector: /* @__PURE__ */ __name(function createConnector(backend) {
        return new SourceConnector(backend);
      }, "createConnector"),
      createMonitor: /* @__PURE__ */ __name(function createMonitor(manager) {
        return new DragSourceMonitorImpl(manager);
      }, "createMonitor"),
      DecoratedComponent,
      getType,
      collect,
      options
    });
  }, "decorateSource");
}
__name(DragSource, "DragSource");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/createTargetFactory.js
function _classCallCheck11(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck11, "_classCallCheck");
function _defineProperties11(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties11, "_defineProperties");
function _createClass11(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties11(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties11(Constructor, staticProps);
  return Constructor;
}
__name(_createClass11, "_createClass");
var ALLOWED_SPEC_METHODS2 = ["canDrop", "hover", "drop"];
var TargetImpl = function() {
  function TargetImpl2(spec, monitor, ref) {
    _classCallCheck11(this, TargetImpl2);
    this.props = null;
    this.spec = spec;
    this.monitor = monitor;
    this.ref = ref;
  }
  __name(TargetImpl2, "TargetImpl");
  _createClass11(TargetImpl2, [{
    key: "receiveProps",
    value: /* @__PURE__ */ __name(function receiveProps(props) {
      this.props = props;
    }, "receiveProps")
  }, {
    key: "receiveMonitor",
    value: /* @__PURE__ */ __name(function receiveMonitor(monitor) {
      this.monitor = monitor;
    }, "receiveMonitor")
  }, {
    key: "canDrop",
    value: /* @__PURE__ */ __name(function canDrop() {
      if (!this.spec.canDrop) {
        return true;
      }
      return this.spec.canDrop(this.props, this.monitor);
    }, "canDrop")
  }, {
    key: "hover",
    value: /* @__PURE__ */ __name(function hover() {
      if (!this.spec.hover || !this.props) {
        return;
      }
      this.spec.hover(this.props, this.monitor, getDecoratedComponent(this.ref));
    }, "hover")
  }, {
    key: "drop",
    value: /* @__PURE__ */ __name(function drop() {
      if (!this.spec.drop) {
        return void 0;
      }
      var dropResult = this.spec.drop(this.props, this.monitor, this.ref.current);
      if (true) {
        invariant(typeof dropResult === "undefined" || isPlainObject2(dropResult), "drop() must either return undefined, or an object that represents the drop result. Instead received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target", dropResult);
      }
      return dropResult;
    }, "drop")
  }]);
  return TargetImpl2;
}();
function createTargetFactory(spec) {
  Object.keys(spec).forEach(function(key) {
    invariant(ALLOWED_SPEC_METHODS2.indexOf(key) > -1, 'Expected the drop target specification to only have some of the following keys: %s. Instead received a specification with an unexpected "%s" key. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', ALLOWED_SPEC_METHODS2.join(", "), key);
    invariant(typeof spec[key] === "function", "Expected %s in the drop target specification to be a function. Instead received a specification with %s: %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target", key, key, spec[key]);
  });
  return /* @__PURE__ */ __name(function createTarget(monitor, ref) {
    return new TargetImpl(spec, monitor, ref);
  }, "createTarget");
}
__name(createTargetFactory, "createTargetFactory");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/DropTarget.js
function DropTarget(type, spec, collect) {
  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  checkDecoratorArguments("DropTarget", "type, spec, collect[, options]", type, spec, collect, options);
  var getType = type;
  if (typeof type !== "function") {
    invariant(isValidType(type, true), 'Expected "type" provided as the first argument to DropTarget to be a string, an array of strings, or a function that returns either given the current props. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', type);
    getType = /* @__PURE__ */ __name(function getType2() {
      return type;
    }, "getType");
  }
  invariant(isPlainObject2(spec), 'Expected "spec" provided as the second argument to DropTarget to be a plain object. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', spec);
  var createTarget = createTargetFactory(spec);
  invariant(typeof collect === "function", 'Expected "collect" provided as the third argument to DropTarget to be a function that returns a plain object of props to inject. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', collect);
  invariant(isPlainObject2(options), 'Expected "options" provided as the fourth argument to DropTarget to be a plain object when specified. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', collect);
  return /* @__PURE__ */ __name(function decorateTarget(DecoratedComponent) {
    return decorateHandler({
      containerDisplayName: "DropTarget",
      createHandler: createTarget,
      registerHandler: registerTarget,
      createMonitor: /* @__PURE__ */ __name(function createMonitor(manager) {
        return new DropTargetMonitorImpl(manager);
      }, "createMonitor"),
      createConnector: /* @__PURE__ */ __name(function createConnector(backend) {
        return new TargetConnector(backend);
      }, "createConnector"),
      DecoratedComponent,
      getType,
      collect,
      options
    });
  }, "decorateTarget");
}
__name(DropTarget, "DropTarget");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/decorators/DragLayer.js
var import_jsx_runtime3 = __toModule(require_jsx_runtime());
var import_react6 = __toModule(require_react());
var import_hoist_non_react_statics2 = __toModule(require_hoist_non_react_statics_cjs());
function _typeof6(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof6 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof6 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof6(obj);
}
__name(_typeof6, "_typeof");
function _classCallCheck12(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck12, "_classCallCheck");
function _defineProperties12(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties12, "_defineProperties");
function _createClass12(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties12(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties12(Constructor, staticProps);
  return Constructor;
}
__name(_createClass12, "_createClass");
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
__name(_inherits2, "_inherits");
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  }, "_setPrototypeOf");
  return _setPrototypeOf2(o, p);
}
__name(_setPrototypeOf2, "_setPrototypeOf");
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return /* @__PURE__ */ __name(function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  }, "_createSuperInternal");
}
__name(_createSuper2, "_createSuper");
function _possibleConstructorReturn2(self2, call) {
  if (call && (_typeof6(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized2(self2);
}
__name(_possibleConstructorReturn2, "_possibleConstructorReturn");
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
__name(_assertThisInitialized2, "_assertThisInitialized");
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
__name(_isNativeReflectConstruct2, "_isNativeReflectConstruct");
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf3(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  }, "_getPrototypeOf");
  return _getPrototypeOf2(o);
}
__name(_getPrototypeOf2, "_getPrototypeOf");
function DragLayer(collect) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  checkDecoratorArguments("DragLayer", "collect[, options]", collect, options);
  invariant(typeof collect === "function", 'Expected "collect" provided as the first argument to DragLayer to be a function that collects props to inject into the component. ', "Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer", collect);
  invariant(isPlainObject2(options), 'Expected "options" provided as the second argument to DragLayer to be a plain object when specified. Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer', options);
  return /* @__PURE__ */ __name(function decorateLayer(DecoratedComponent) {
    var Decorated = DecoratedComponent;
    var _options$arePropsEqua = options.arePropsEqual, arePropsEqual = _options$arePropsEqua === void 0 ? shallowEqual : _options$arePropsEqua;
    var displayName = Decorated.displayName || Decorated.name || "Component";
    var DragLayerContainer = function(_Component) {
      _inherits2(DragLayerContainer2, _Component);
      var _super = _createSuper2(DragLayerContainer2);
      function DragLayerContainer2() {
        var _this;
        _classCallCheck12(this, DragLayerContainer2);
        _this = _super.apply(this, arguments);
        _this.isCurrentlyMounted = false;
        _this.ref = (0, import_react6.createRef)();
        _this.handleChange = function() {
          if (!_this.isCurrentlyMounted) {
            return;
          }
          var nextState = _this.getCurrentState();
          if (!shallowEqual(nextState, _this.state)) {
            _this.setState(nextState);
          }
        };
        return _this;
      }
      __name(DragLayerContainer2, "DragLayerContainer");
      _createClass12(DragLayerContainer2, [{
        key: "getDecoratedComponentInstance",
        value: /* @__PURE__ */ __name(function getDecoratedComponentInstance() {
          invariant(this.ref.current, "In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()");
          return this.ref.current;
        }, "getDecoratedComponentInstance")
      }, {
        key: "shouldComponentUpdate",
        value: /* @__PURE__ */ __name(function shouldComponentUpdate(nextProps, nextState) {
          return !arePropsEqual(nextProps, this.props) || !shallowEqual(nextState, this.state);
        }, "shouldComponentUpdate")
      }, {
        key: "componentDidMount",
        value: /* @__PURE__ */ __name(function componentDidMount() {
          this.isCurrentlyMounted = true;
          this.handleChange();
        }, "componentDidMount")
      }, {
        key: "componentWillUnmount",
        value: /* @__PURE__ */ __name(function componentWillUnmount() {
          this.isCurrentlyMounted = false;
          if (this.unsubscribeFromOffsetChange) {
            this.unsubscribeFromOffsetChange();
            this.unsubscribeFromOffsetChange = void 0;
          }
          if (this.unsubscribeFromStateChange) {
            this.unsubscribeFromStateChange();
            this.unsubscribeFromStateChange = void 0;
          }
        }, "componentWillUnmount")
      }, {
        key: "render",
        value: /* @__PURE__ */ __name(function render() {
          var _this2 = this;
          return (0, import_jsx_runtime3.jsx)(DndContext.Consumer, {
            children: /* @__PURE__ */ __name(function children(_ref) {
              var dragDropManager = _ref.dragDropManager;
              if (dragDropManager === void 0) {
                return null;
              }
              _this2.receiveDragDropManager(dragDropManager);
              if (!_this2.isCurrentlyMounted) {
                return null;
              }
              return (0, import_jsx_runtime3.jsx)(Decorated, Object.assign({}, _this2.props, _this2.state, {
                ref: isRefable(Decorated) ? _this2.ref : null
              }), void 0);
            }, "children")
          }, void 0);
        }, "render")
      }, {
        key: "receiveDragDropManager",
        value: /* @__PURE__ */ __name(function receiveDragDropManager(dragDropManager) {
          if (this.manager !== void 0) {
            return;
          }
          this.manager = dragDropManager;
          invariant(_typeof6(dragDropManager) === "object", "Could not find the drag and drop manager in the context of %s. Make sure to render a DndProvider component in your top-level component. Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#could-not-find-the-drag-and-drop-manager-in-the-context", displayName, displayName);
          var monitor = this.manager.getMonitor();
          this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleChange);
          this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleChange);
        }, "receiveDragDropManager")
      }, {
        key: "getCurrentState",
        value: /* @__PURE__ */ __name(function getCurrentState() {
          if (!this.manager) {
            return {};
          }
          var monitor = this.manager.getMonitor();
          return collect(monitor, this.props);
        }, "getCurrentState")
      }]);
      return DragLayerContainer2;
    }(import_react6.Component);
    DragLayerContainer.displayName = "DragLayer(".concat(displayName, ")");
    DragLayerContainer.DecoratedComponent = DecoratedComponent;
    return (0, import_hoist_non_react_statics2.default)(DragLayerContainer, DecoratedComponent);
  }, "decorateLayer");
}
__name(DragLayer, "DragLayer");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useIsomorphicLayoutEffect.js
var import_react7 = __toModule(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react7.useLayoutEffect : import_react7.useEffect;

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSource.js
var import_react8 = __toModule(require_react());

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/DragSourceImpl.js
function _typeof7(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof7 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof7 = /* @__PURE__ */ __name(function _typeof8(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof7(obj);
}
__name(_typeof7, "_typeof");
function _classCallCheck13(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck13, "_classCallCheck");
function _defineProperties13(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties13, "_defineProperties");
function _createClass13(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties13(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties13(Constructor, staticProps);
  return Constructor;
}
__name(_createClass13, "_createClass");
var DragSourceImpl = function() {
  function DragSourceImpl2(spec, monitor, connector) {
    _classCallCheck13(this, DragSourceImpl2);
    this.spec = spec;
    this.monitor = monitor;
    this.connector = connector;
  }
  __name(DragSourceImpl2, "DragSourceImpl");
  _createClass13(DragSourceImpl2, [{
    key: "beginDrag",
    value: /* @__PURE__ */ __name(function beginDrag() {
      var _result;
      var spec = this.spec;
      var monitor = this.monitor;
      var result = null;
      if (_typeof7(spec.item) === "object") {
        result = spec.item;
      } else if (typeof spec.item === "function") {
        result = spec.item(monitor);
      } else {
        result = {};
      }
      return (_result = result) !== null && _result !== void 0 ? _result : null;
    }, "beginDrag")
  }, {
    key: "canDrag",
    value: /* @__PURE__ */ __name(function canDrag() {
      var spec = this.spec;
      var monitor = this.monitor;
      if (typeof spec.canDrag === "boolean") {
        return spec.canDrag;
      } else if (typeof spec.canDrag === "function") {
        return spec.canDrag(monitor);
      } else {
        return true;
      }
    }, "canDrag")
  }, {
    key: "isDragging",
    value: /* @__PURE__ */ __name(function isDragging(globalMonitor, target) {
      var spec = this.spec;
      var monitor = this.monitor;
      var isDragging2 = spec.isDragging;
      return isDragging2 ? isDragging2(monitor) : target === globalMonitor.getSourceId();
    }, "isDragging")
  }, {
    key: "endDrag",
    value: /* @__PURE__ */ __name(function endDrag() {
      var spec = this.spec;
      var monitor = this.monitor;
      var connector = this.connector;
      var end = spec.end;
      if (end) {
        end(monitor.getItem(), monitor);
      }
      connector.reconnect();
    }, "endDrag")
  }]);
  return DragSourceImpl2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSource.js
function useDragSource(spec, monitor, connector) {
  var handler = (0, import_react8.useMemo)(function() {
    return new DragSourceImpl(spec, monitor, connector);
  }, [monitor, connector]);
  (0, import_react8.useEffect)(function() {
    handler.spec = spec;
  }, [spec]);
  return handler;
}
__name(useDragSource, "useDragSource");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js
var import_react9 = __toModule(require_react());
function useDragDropManager() {
  var _useContext = (0, import_react9.useContext)(DndContext), dragDropManager = _useContext.dragDropManager;
  invariant(dragDropManager != null, "Expected drag drop context");
  return dragDropManager;
}
__name(useDragDropManager, "useDragDropManager");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDragType.js
var import_react10 = __toModule(require_react());
function useDragType(spec) {
  return (0, import_react10.useMemo)(function() {
    var result = spec.type;
    invariant(result != null, "spec.type must be defined");
    return result;
  }, [spec]);
}
__name(useDragType, "useDragType");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useRegisteredDragSource.js
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
}
__name(_slicedToArray4, "_slicedToArray");
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest4, "_nonIterableRest");
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
__name(_unsupportedIterableToArray4, "_unsupportedIterableToArray");
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray4, "_arrayLikeToArray");
function _iterableToArrayLimit4(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit4, "_iterableToArrayLimit");
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles4, "_arrayWithHoles");
function useRegisteredDragSource(spec, monitor, connector) {
  var manager = useDragDropManager();
  var handler = useDragSource(spec, monitor, connector);
  var itemType = useDragType(spec);
  useIsomorphicLayoutEffect(/* @__PURE__ */ __name(function registerDragSource() {
    if (itemType != null) {
      var _registerSource = registerSource(itemType, handler, manager), _registerSource2 = _slicedToArray4(_registerSource, 2), handlerId = _registerSource2[0], unregister = _registerSource2[1];
      monitor.receiveHandlerId(handlerId);
      connector.receiveHandlerId(handlerId);
      return unregister;
    }
  }, "registerDragSource"), [manager, monitor, connector, handler, itemType]);
}
__name(useRegisteredDragSource, "useRegisteredDragSource");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useOptionalFactory.js
var import_react11 = __toModule(require_react());
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray5(arr) || _nonIterableSpread();
}
__name(_toConsumableArray, "_toConsumableArray");
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableSpread, "_nonIterableSpread");
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
__name(_unsupportedIterableToArray5, "_unsupportedIterableToArray");
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
__name(_iterableToArray, "_iterableToArray");
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray5(arr);
}
__name(_arrayWithoutHoles, "_arrayWithoutHoles");
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray5, "_arrayLikeToArray");
function useOptionalFactory(arg, deps) {
  var memoDeps = _toConsumableArray(deps || []);
  if (deps == null && typeof arg !== "function") {
    memoDeps.push(arg);
  }
  return (0, import_react11.useMemo)(function() {
    return typeof arg === "function" ? arg() : arg;
  }, memoDeps);
}
__name(useOptionalFactory, "useOptionalFactory");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSourceMonitor.js
var import_react12 = __toModule(require_react());
function useDragSourceMonitor() {
  var manager = useDragDropManager();
  return (0, import_react12.useMemo)(function() {
    return new DragSourceMonitorImpl(manager);
  }, [manager]);
}
__name(useDragSourceMonitor, "useDragSourceMonitor");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSourceConnector.js
var import_react13 = __toModule(require_react());
function useDragSourceConnector(dragSourceOptions, dragPreviewOptions) {
  var manager = useDragDropManager();
  var connector = (0, import_react13.useMemo)(function() {
    return new SourceConnector(manager.getBackend());
  }, [manager]);
  useIsomorphicLayoutEffect(function() {
    connector.dragSourceOptions = dragSourceOptions || null;
    connector.reconnect();
  }, [connector, dragSourceOptions]);
  useIsomorphicLayoutEffect(function() {
    connector.dragPreviewOptions = dragPreviewOptions || null;
    connector.reconnect();
  }, [connector, dragPreviewOptions]);
  return connector;
}
__name(useDragSourceConnector, "useDragSourceConnector");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useCollector.js
var import_fast_deep_equal = __toModule(require_fast_deep_equal());
var import_react14 = __toModule(require_react());
function _slicedToArray5(arr, i) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest5();
}
__name(_slicedToArray5, "_slicedToArray");
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest5, "_nonIterableRest");
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
__name(_unsupportedIterableToArray6, "_unsupportedIterableToArray");
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray6, "_arrayLikeToArray");
function _iterableToArrayLimit5(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit5, "_iterableToArrayLimit");
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles5, "_arrayWithHoles");
function useCollector(monitor, collect, onUpdate) {
  var _useState = (0, import_react14.useState)(function() {
    return collect(monitor);
  }), _useState2 = _slicedToArray5(_useState, 2), collected = _useState2[0], setCollected = _useState2[1];
  var updateCollected = (0, import_react14.useCallback)(function() {
    var nextValue = collect(monitor);
    if (!(0, import_fast_deep_equal.default)(collected, nextValue)) {
      setCollected(nextValue);
      if (onUpdate) {
        onUpdate();
      }
    }
  }, [collected, monitor, onUpdate]);
  useIsomorphicLayoutEffect(updateCollected);
  return [collected, updateCollected];
}
__name(useCollector, "useCollector");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useMonitorOutput.js
function _slicedToArray6(arr, i) {
  return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i) || _unsupportedIterableToArray7(arr, i) || _nonIterableRest6();
}
__name(_slicedToArray6, "_slicedToArray");
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest6, "_nonIterableRest");
function _unsupportedIterableToArray7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray7(o, minLen);
}
__name(_unsupportedIterableToArray7, "_unsupportedIterableToArray");
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray7, "_arrayLikeToArray");
function _iterableToArrayLimit6(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit6, "_iterableToArrayLimit");
function _arrayWithHoles6(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles6, "_arrayWithHoles");
function useMonitorOutput(monitor, collect, onCollect) {
  var _useCollector = useCollector(monitor, collect, onCollect), _useCollector2 = _slicedToArray6(_useCollector, 2), collected = _useCollector2[0], updateCollected = _useCollector2[1];
  useIsomorphicLayoutEffect(/* @__PURE__ */ __name(function subscribeToMonitorStateChange() {
    var handlerId = monitor.getHandlerId();
    if (handlerId == null) {
      return;
    }
    return monitor.subscribeToStateChange(updateCollected, {
      handlerIds: [handlerId]
    });
  }, "subscribeToMonitorStateChange"), [monitor, updateCollected]);
  return collected;
}
__name(useMonitorOutput, "useMonitorOutput");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useCollectedProps.js
function useCollectedProps(collector, monitor, connector) {
  return useMonitorOutput(monitor, collector || function() {
    return {};
  }, function() {
    return connector.reconnect();
  });
}
__name(useCollectedProps, "useCollectedProps");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/connectors.js
var import_react15 = __toModule(require_react());
function useConnectDragSource(connector) {
  return (0, import_react15.useMemo)(function() {
    return connector.hooks.dragSource();
  }, [connector]);
}
__name(useConnectDragSource, "useConnectDragSource");
function useConnectDragPreview(connector) {
  return (0, import_react15.useMemo)(function() {
    return connector.hooks.dragPreview();
  }, [connector]);
}
__name(useConnectDragPreview, "useConnectDragPreview");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrag/useDrag.js
function useDrag(specArg, deps) {
  var spec = useOptionalFactory(specArg, deps);
  invariant(!spec.begin, "useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)");
  var monitor = useDragSourceMonitor();
  var connector = useDragSourceConnector(spec.options, spec.previewOptions);
  useRegisteredDragSource(spec, monitor, connector);
  return [useCollectedProps(spec.collect, monitor, connector), useConnectDragSource(connector), useConnectDragPreview(connector)];
}
__name(useDrag, "useDrag");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useAccept.js
var import_react16 = __toModule(require_react());
function useAccept(spec) {
  var accept = spec.accept;
  return (0, import_react16.useMemo)(function() {
    invariant(spec.accept != null, "accept must be defined");
    return Array.isArray(accept) ? accept : [accept];
  }, [accept]);
}
__name(useAccept, "useAccept");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTarget.js
var import_react17 = __toModule(require_react());

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/DropTargetImpl.js
function _classCallCheck14(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck14, "_classCallCheck");
function _defineProperties14(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties14, "_defineProperties");
function _createClass14(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties14(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties14(Constructor, staticProps);
  return Constructor;
}
__name(_createClass14, "_createClass");
var DropTargetImpl = function() {
  function DropTargetImpl2(spec, monitor) {
    _classCallCheck14(this, DropTargetImpl2);
    this.spec = spec;
    this.monitor = monitor;
  }
  __name(DropTargetImpl2, "DropTargetImpl");
  _createClass14(DropTargetImpl2, [{
    key: "canDrop",
    value: /* @__PURE__ */ __name(function canDrop() {
      var spec = this.spec;
      var monitor = this.monitor;
      return spec.canDrop ? spec.canDrop(monitor.getItem(), monitor) : true;
    }, "canDrop")
  }, {
    key: "hover",
    value: /* @__PURE__ */ __name(function hover() {
      var spec = this.spec;
      var monitor = this.monitor;
      if (spec.hover) {
        spec.hover(monitor.getItem(), monitor);
      }
    }, "hover")
  }, {
    key: "drop",
    value: /* @__PURE__ */ __name(function drop() {
      var spec = this.spec;
      var monitor = this.monitor;
      if (spec.drop) {
        return spec.drop(monitor.getItem(), monitor);
      }
    }, "drop")
  }]);
  return DropTargetImpl2;
}();

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTarget.js
function useDropTarget(spec, monitor) {
  var dropTarget = (0, import_react17.useMemo)(function() {
    return new DropTargetImpl(spec, monitor);
  }, [monitor]);
  (0, import_react17.useEffect)(function() {
    dropTarget.spec = spec;
  }, [spec]);
  return dropTarget;
}
__name(useDropTarget, "useDropTarget");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useRegisteredDropTarget.js
function _slicedToArray7(arr, i) {
  return _arrayWithHoles7(arr) || _iterableToArrayLimit7(arr, i) || _unsupportedIterableToArray8(arr, i) || _nonIterableRest7();
}
__name(_slicedToArray7, "_slicedToArray");
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest7, "_nonIterableRest");
function _unsupportedIterableToArray8(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray8(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray8(o, minLen);
}
__name(_unsupportedIterableToArray8, "_unsupportedIterableToArray");
function _arrayLikeToArray8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray8, "_arrayLikeToArray");
function _iterableToArrayLimit7(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit7, "_iterableToArrayLimit");
function _arrayWithHoles7(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles7, "_arrayWithHoles");
function useRegisteredDropTarget(spec, monitor, connector) {
  var manager = useDragDropManager();
  var dropTarget = useDropTarget(spec, monitor);
  var accept = useAccept(spec);
  useIsomorphicLayoutEffect(/* @__PURE__ */ __name(function registerDropTarget() {
    var _registerTarget = registerTarget(accept, dropTarget, manager), _registerTarget2 = _slicedToArray7(_registerTarget, 2), handlerId = _registerTarget2[0], unregister = _registerTarget2[1];
    monitor.receiveHandlerId(handlerId);
    connector.receiveHandlerId(handlerId);
    return unregister;
  }, "registerDropTarget"), [manager, monitor, dropTarget, connector, accept.map(function(a) {
    return a.toString();
  }).join("|")]);
}
__name(useRegisteredDropTarget, "useRegisteredDropTarget");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTargetMonitor.js
var import_react18 = __toModule(require_react());
function useDropTargetMonitor() {
  var manager = useDragDropManager();
  return (0, import_react18.useMemo)(function() {
    return new DropTargetMonitorImpl(manager);
  }, [manager]);
}
__name(useDropTargetMonitor, "useDropTargetMonitor");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTargetConnector.js
var import_react19 = __toModule(require_react());
function useDropTargetConnector(options) {
  var manager = useDragDropManager();
  var connector = (0, import_react19.useMemo)(function() {
    return new TargetConnector(manager.getBackend());
  }, [manager]);
  useIsomorphicLayoutEffect(function() {
    connector.dropTargetOptions = options || null;
    connector.reconnect();
  }, [options]);
  return connector;
}
__name(useDropTargetConnector, "useDropTargetConnector");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/connectors.js
var import_react20 = __toModule(require_react());
function useConnectDropTarget(connector) {
  return (0, import_react20.useMemo)(function() {
    return connector.hooks.dropTarget();
  }, [connector]);
}
__name(useConnectDropTarget, "useConnectDropTarget");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDrop/useDrop.js
function useDrop(specArg, deps) {
  var spec = useOptionalFactory(specArg, deps);
  var monitor = useDropTargetMonitor();
  var connector = useDropTargetConnector(spec.options);
  useRegisteredDropTarget(spec, monitor, connector);
  return [useCollectedProps(spec.collect, monitor, connector), useConnectDropTarget(connector)];
}
__name(useDrop, "useDrop");

// ../.yarn/$$virtual/react-dnd-virtual-796ae3c07b/0/cache/react-dnd-npm-14.0.2-95b121732f-c24167f1c3.zip/node_modules/react-dnd/dist/esm/hooks/useDragLayer.js
var import_react21 = __toModule(require_react());
function _slicedToArray8(arr, i) {
  return _arrayWithHoles8(arr) || _iterableToArrayLimit8(arr, i) || _unsupportedIterableToArray9(arr, i) || _nonIterableRest8();
}
__name(_slicedToArray8, "_slicedToArray");
function _nonIterableRest8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
__name(_nonIterableRest8, "_nonIterableRest");
function _unsupportedIterableToArray9(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray9(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray9(o, minLen);
}
__name(_unsupportedIterableToArray9, "_unsupportedIterableToArray");
function _arrayLikeToArray9(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
__name(_arrayLikeToArray9, "_arrayLikeToArray");
function _iterableToArrayLimit8(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
__name(_iterableToArrayLimit8, "_iterableToArrayLimit");
function _arrayWithHoles8(arr) {
  if (Array.isArray(arr))
    return arr;
}
__name(_arrayWithHoles8, "_arrayWithHoles");
function useDragLayer(collect) {
  var dragDropManager = useDragDropManager();
  var monitor = dragDropManager.getMonitor();
  var _useCollector = useCollector(monitor, collect), _useCollector2 = _slicedToArray8(_useCollector, 2), collected = _useCollector2[0], updateCollected = _useCollector2[1];
  (0, import_react21.useEffect)(function() {
    return monitor.subscribeToOffsetChange(updateCollected);
  });
  (0, import_react21.useEffect)(function() {
    return monitor.subscribeToStateChange(updateCollected);
  });
  return collected;
}
__name(useDragLayer, "useDragLayer");
export {
  DndContext,
  DndProvider,
  DragLayer,
  DragPreviewImage,
  DragSource,
  DropTarget,
  useDrag,
  useDragDropManager,
  useDragLayer,
  useDrop
};
//# sourceMappingURL=react-dnd.js.map
