import {
  D,
  filter$1,
  makeFetchBody,
  makeFetchOptions,
  makeFetchSource,
  makeFetchURL,
  merge$1,
  share$1,
  takeUntil$1
} from "./chunk.2QC3HF4U.js";
import {
  H
} from "./chunk.ZKDFWQVH.js";
import "./chunk.WZSZG6XK.js";
import "./chunk.K5PCYWJY.js";
import "./chunk.BROQQF2P.js";
import {
  __toModule
} from "./chunk.5JD2HCIV.js";
import "./chunk.FNFVRXQK.js";
import {
  __commonJS
} from "./chunk.5OSL2VXB.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/cache/extract-files-npm-8.1.0-2a3bdc0800-8d13a42a9a.zip/node_modules/extract-files/lib/ReactNativeFile.js
var require_ReactNativeFile = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function ReactNativeFile(_ref) {
    var uri = _ref.uri, name = _ref.name, type = _ref.type;
    this.uri = uri;
    this.name = name;
    this.type = type;
  }, "ReactNativeFile");
});

// ../.yarn/cache/extract-files-npm-8.1.0-2a3bdc0800-8d13a42a9a.zip/node_modules/extract-files/lib/isExtractableFile.js
var require_isExtractableFile = __commonJS((exports, module) => {
  "use strict";
  var ReactNativeFile = require_ReactNativeFile();
  module.exports = /* @__PURE__ */ __name(function isExtractableFile(value) {
    return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
  }, "isExtractableFile");
});

// ../.yarn/cache/extract-files-npm-8.1.0-2a3bdc0800-8d13a42a9a.zip/node_modules/extract-files/lib/extractFiles.js
var require_extractFiles = __commonJS((exports, module) => {
  "use strict";
  var defaultIsExtractableFile = require_isExtractableFile();
  module.exports = /* @__PURE__ */ __name(function extractFiles(value, path, isExtractableFile) {
    if (path === void 0) {
      path = "";
    }
    if (isExtractableFile === void 0) {
      isExtractableFile = defaultIsExtractableFile;
    }
    var clone;
    var files = new Map();
    function addFile(paths, file) {
      var storedPaths = files.get(file);
      if (storedPaths)
        storedPaths.push.apply(storedPaths, paths);
      else
        files.set(file, paths);
    }
    __name(addFile, "addFile");
    if (isExtractableFile(value)) {
      clone = null;
      addFile([path], value);
    } else {
      var prefix = path ? path + "." : "";
      if (typeof FileList !== "undefined" && value instanceof FileList)
        clone = Array.prototype.map.call(value, function(file, i2) {
          addFile(["" + prefix + i2], file);
          return null;
        });
      else if (Array.isArray(value))
        clone = value.map(function(child, i2) {
          var result2 = extractFiles(child, "" + prefix + i2, isExtractableFile);
          result2.files.forEach(addFile);
          return result2.clone;
        });
      else if (value && value.constructor === Object) {
        clone = {};
        for (var i in value) {
          var result = extractFiles(value[i], "" + prefix + i, isExtractableFile);
          result.files.forEach(addFile);
          clone[i] = result.clone;
        }
      } else
        clone = value;
    }
    return {
      clone,
      files
    };
  }, "extractFiles");
});

// ../.yarn/cache/extract-files-npm-8.1.0-2a3bdc0800-8d13a42a9a.zip/node_modules/extract-files/lib/index.mjs
var import_ReactNativeFile = __toModule(require_ReactNativeFile());
var import_extractFiles = __toModule(require_extractFiles());
var import_isExtractableFile = __toModule(require_isExtractableFile());

// ../.yarn/$$virtual/@urql-exchange-multipart-fetch-virtual-d9842a0885/0/cache/@urql-exchange-multipart-fetch-npm-0.1.11-292f0d012d-0e28ea5dd2.zip/node_modules/@urql/exchange-multipart-fetch/dist/urql-exchange-multipart-fetch.mjs
function h() {
  return (h = Object.assign || function(a) {
    var c, e, b;
    for (c = 1; c < arguments.length; c++) {
      e = arguments[c];
      for (b in e) {
        Object.prototype.hasOwnProperty.call(e, b) && (a[b] = e[b]);
      }
    }
    return a;
  }).apply(this, arguments);
}
__name(h, "h");
function p(a) {
  return "variables." + a;
}
__name(p, "p");
function q(a) {
  return a.kind === "query" || a.kind === "mutation";
}
__name(q, "q");
function r(a) {
  return a.kind !== "query" && a.kind !== "mutation";
}
__name(r, "r");
function multipartFetchExchange(a) {
  var c = a.forward, e = a.dispatchDebug;
  return function(a2) {
    var m, b = share$1(a2);
    a2 = D(function(a3) {
      var g, d, n, k, t = filter$1(function(b2) {
        return b2.kind === "teardown" && b2.key === a3.key;
      })(b), f = (0, import_extractFiles.default)(h({}, a3.variables)), l = f.files;
      f = makeFetchBody({
        query: a3.query,
        variables: f.clone
      });
      if (l.size) {
        g = makeFetchURL(a3);
        (d = makeFetchOptions(a3)).headers["content-type"] === "application/json" && delete d.headers["content-type"];
        d.method = "POST";
        d.body = new FormData();
        d.body.append("operations", JSON.stringify(f));
        n = {}, k = 0;
        l.forEach(/* @__PURE__ */ __name(function c2(a4) {
          n[++k] = a4.map(p);
        }, "c"));
        d.body.append("map", JSON.stringify(n));
        k = 0;
        l.forEach(/* @__PURE__ */ __name(function m2(a4, b2) {
          d.body.append("" + ++k, b2, b2.name);
        }, "m"));
      } else {
        d = makeFetchOptions(a3, f), g = makeFetchURL(a3, f);
      }
      e({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: a3,
        data: {
          url: g,
          fetchOptions: d
        },
        source: "multipartFetchExchange"
      });
      return H(function(b2) {
        var c2 = b2.data ? void 0 : b2.error;
        e({
          type: c2 ? "fetchError" : "fetchSuccess",
          message: "A " + (c2 ? "failed" : "successful") + " fetch response has been returned.",
          operation: a3,
          data: {
            url: g,
            fetchOptions: d,
            value: c2 || b2
          },
          source: "multipartFetchExchange"
        });
      })(takeUntil$1(t)(makeFetchSource(a3, g, d)));
    })(filter$1(q)(b));
    m = c(filter$1(r)(b));
    return merge$1([a2, m]);
  };
}
__name(multipartFetchExchange, "multipartFetchExchange");
export {
  multipartFetchExchange
};
//# sourceMappingURL=@urql_exchange-multipart-fetch.js.map
