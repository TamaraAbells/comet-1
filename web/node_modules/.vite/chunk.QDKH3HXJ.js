import {
  Parser,
  import_printer,
  u,
  w,
  x
} from "./chunk.2QC3HF4U.js";
import {
  l,
  m
} from "./chunk.ZKDFWQVH.js";
import {
  inspect,
  isNode
} from "./chunk.K5PCYWJY.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/cache/wonka-npm-4.0.15-716683372a-df4fd51c15.zip/node_modules/wonka/dist/wonka.mjs
function t(a) {
  a(0);
}
__name(t, "t");
function K(a) {
  return function(b) {
    return function(c) {
      function d(a2) {
        h && (typeof a2 == "number" ? (h = false, n2 ? c(a2) : f || (f = true, e(0))) : a2.tag ? (c(a2), k ? k = false : g(0)) : (g = a2 = a2[0], k = false, a2(0)));
      }
      __name(d, "d");
      let e = m, f = false, g = m, h = false, k = false, n2 = false;
      b(function(b2) {
        typeof b2 == "number" ? n2 || (n2 = true, h || c(0)) : b2.tag ? n2 || (h && (g(1), g = m), f ? f = false : (f = true, e(0)), b2 = a(b2[0]), h = true, b2(d)) : e = b2[0];
      });
      c(l(0, [
        function(a2) {
          if (a2) {
            if (n2 || (n2 = true, e(1)), h) {
              return h = false, g(1);
            }
          } else {
            n2 || f || (f = true, e(0)), h && !k && (k = true, g(0));
          }
        }
      ]));
    };
  };
}
__name(K, "K");
function N(a) {
  return function(b) {
    let c = m, d = false;
    b(function(e) {
      typeof e == "number" ? d = true : e.tag ? d || (a(e[0]), c(0)) : (c = e = e[0], e(0));
    });
    return {
      unsubscribe: function() {
        if (!d) {
          return d = true, c(1);
        }
      }
    };
  };
}
__name(N, "N");
function O() {
}
__name(O, "O");
function fromValue$1(a) {
  return function(b) {
    let c = false;
    b(l(0, [
      function(d) {
        d ? c = true : c || (c = true, b(l(1, [a])), b(0));
      }
    ]));
  };
}
__name(fromValue$1, "fromValue$1");
function makeSubject$1() {
  let a = [], b = false;
  return {
    source: function(c) {
      function b2(a2) {
        return a2 !== c;
      }
      __name(b2, "b");
      a = a.concat(c);
      c(l(0, [
        function(c2) {
          c2 && (a = a.filter(b2));
        }
      ]));
    },
    next: function(c) {
      b || a.forEach(function(a2) {
        a2(l(1, [c]));
      });
    },
    complete: function() {
      b || (b = true, a.forEach(t));
    }
  };
}
__name(makeSubject$1, "makeSubject$1");
function map$1(a) {
  return function(b) {
    return function(c) {
      return b(function(b2) {
        b2 = typeof b2 == "number" ? 0 : b2.tag ? l(1, [a(b2[0])]) : l(0, [b2[0]]);
        c(b2);
      });
    };
  };
}
__name(map$1, "map$1");
function onEnd$1(a) {
  return function(b) {
    return function(c) {
      let d = false;
      return b(function(b2) {
        if (typeof b2 == "number") {
          if (d) {
            return;
          }
          d = true;
          c(b2);
          return a();
        }
        if (b2.tag) {
          d || c(b2);
        } else {
          var e = b2[0];
          c(l(0, [
            function(c2) {
              if (!d) {
                return c2 ? (d = true, e(c2), a()) : e(c2);
              }
            }
          ]));
        }
      });
    };
  };
}
__name(onEnd$1, "onEnd$1");
function onStart$1(a) {
  return function(b) {
    return function(c) {
      return b(function(b2) {
        typeof b2 == "number" ? c(b2) : b2.tag ? c(b2) : (c(b2), a());
      });
    };
  };
}
__name(onStart$1, "onStart$1");
function publish$1(a) {
  return N(O)(a);
}
__name(publish$1, "publish$1");

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/parser.mjs
function parse(source, options) {
  var parser = new Parser(source, options);
  return parser.parseDocument();
}
__name(parse, "parse");

// ../.yarn/$$virtual/@urql-core-virtual-9f6d4998ab/0/cache/@urql-core-npm-2.0.0-7689f44c21-43890e0dc9.zip/node_modules/@urql/core/dist/2c01d8b2.mjs
function n(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}
__name(n, "n");
function v(a) {
  var b = (typeof a != "string" ? a.loc && a.loc.source.body || (0, import_printer.print)(a) : a).replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
  typeof a != "string" && (a.loc ? (a = "definitions" in a && w(a)) && (b = "# " + a + "\n" + b) : a.loc = {
    start: 0,
    end: b.length,
    source: {
      body: b,
      name: "gql",
      locationOffset: {
        line: 1,
        column: 1
      }
    }
  });
  return b;
}
__name(v, "v");
function y(a) {
  if (typeof a == "string") {
    var b = n(5381, v(a)) >>> 0;
    a = x.get(b) || parse(a, {
      noLocation: true
    });
  } else {
    b = a.__key || n(5381, v(a)) >>> 0, a = x.get(b) || a;
  }
  a.loc || v(a);
  a.__key = b;
  x.set(b, a);
  return a;
}
__name(y, "y");
function createRequest(a, b) {
  a = y(a);
  return {
    key: b ? n(a.__key, u(b)) >>> 0 : a.__key,
    query: a,
    variables: b || {}
  };
}
__name(createRequest, "createRequest");

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/visitor.mjs
var QueryDocumentKeys = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
  InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
};
var BREAK = Object.freeze({});
function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
  var stack = void 0;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = void 0;
  var key = void 0;
  var parent = void 0;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};
          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }
          node = clone;
        }
        var editOffset = 0;
        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];
          if (inArray) {
            editKey -= editOffset;
          }
          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : void 0;
      node = parent ? parent[key] : newRoot;
      if (node === null || node === void 0) {
        continue;
      }
      if (parent) {
        path.push(key);
      }
    }
    var result = void 0;
    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
      }
      var visitFn = getVisitFn(visitor, node.kind, isLeaving);
      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);
        if (result === BREAK) {
          break;
        }
        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== void 0) {
          edits.push([key, result]);
          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;
      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }
  return newRoot;
}
__name(visit, "visit");
function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];
  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === "function") {
      return kindVisitor;
    }
    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
    if (typeof kindSpecificVisitor === "function") {
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
    if (specificVisitor) {
      if (typeof specificVisitor === "function") {
        return specificVisitor;
      }
      var specificKindVisitor = specificVisitor[kind];
      if (typeof specificKindVisitor === "function") {
        return specificKindVisitor;
      }
    }
  }
}
__name(getVisitFn, "getVisitFn");

export {
  v,
  y,
  visit,
  createRequest,
  K,
  N,
  fromValue$1,
  makeSubject$1,
  map$1,
  onEnd$1,
  onStart$1,
  publish$1
};
//# sourceMappingURL=chunk.ZERVHL7O.js.map
