{
  "version": 3,
  "sources": ["../../../.yarn/cache/intersection-observer-npm-0.7.0-cf93325852-46ef82d6d5.zip/node_modules/intersection-observer/intersection-observer.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/dom.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/template.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/modify-template.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/directive.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/part.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/template-instance.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/template-result.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/parts.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/template-factory.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/render.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/default-template-processor.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lit-html.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lib/shady-render.js", "../../../.yarn/cache/lit-element-npm-2.4.0-46c50cbef0-1f2c12c538.zip/node_modules/lit-element/lib/updating-element.js", "../../../.yarn/cache/lit-element-npm-2.4.0-46c50cbef0-1f2c12c538.zip/node_modules/lit-element/lib/decorators.js", "../../../.yarn/cache/lit-html-npm-1.3.0-1c0540783a-b32528e92f.zip/node_modules/lit-html/lit-html.js", "../../../.yarn/cache/lit-element-npm-2.4.0-46c50cbef0-1f2c12c538.zip/node_modules/lit-element/lib/css-tag.js", "../../../.yarn/cache/lit-element-npm-2.4.0-46c50cbef0-1f2c12c538.zip/node_modules/lit-element/lit-element.js", "../../../.yarn/cache/content-visibility-npm-1.2.2-20e10169d8-ee3ecafca7.zip/node_modules/content-visibility/content-visibility.js"],
  "sourcesContent": ["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map", "/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this\n                    .requestUpdateInternal(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._updateState = 0;\n        this._updatePromise =\n            new Promise((res) => this._enableUpdatingResolver = res);\n        this._changedProperties = new Map();\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdateInternal();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This protected version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    requestUpdateInternal(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            options = options || ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this.requestUpdateInternal(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this._hasRequestedUpdate) {\n            return;\n        }\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign(Object.assign({}, element), { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function internalProperty(options) {\n    return property({ attribute: false, hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged });\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        if (cache) {\n            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n            descriptor.get = function () {\n                if (this[key] === undefined) {\n                    (this[key] =\n                        this.renderRoot.querySelector(selector));\n                }\n                return this[key];\n            };\n        }\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            async get() {\n                await this.updateComplete;\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign(Object.assign({}, element), { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options) {\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    return ((protoOrDescriptor, name) => (name !== undefined) ?\n        legacyEventOptions(options, protoOrDescriptor, name) :\n        standardEventOptions(options, protoOrDescriptor));\n}\n// x-browser support for matches\n// tslint:disable-next-line:no-any\nconst ElementProto = Element.prototype;\nconst legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(slotName = '', flatten = false, selector = '') {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                const slotSelector = `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n                const slot = this.renderRoot.querySelector(slotSelector);\n                let nodes = slot && slot.assignedNodes({ flatten });\n                if (nodes && selector) {\n                    nodes = nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE &&\n                        node.matches ?\n                        node.matches(selector) :\n                        legacyMatches.call(node, selector));\n                }\n                return nodes;\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n//# sourceMappingURL=decorators.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map", "/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `supportsAdoptingStyleSheets` is true then we assume\n            // CSSStyleSheet is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets, unsafeCSS } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = userStyles === undefined ? [] : [userStyles];\n        }\n        // Ensure that there are no invalid CSSStyleSheet instances here. They are\n        // invalid in two conditions.\n        // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n        //     this is impossible to check except via .replaceSync or use\n        // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n        //     false)\n        this._styles = this._styles.map((s) => {\n            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n                // Flatten the cssText from the passed constructible stylesheet (or\n                // undetectable non-constructible stylesheet). The user might have\n                // expected to update their stylesheets over time, but the alternative\n                // is a crash.\n                const cssText = Array.prototype.slice.call(s.cssRules)\n                    .reduce((css, rule) => css + rule.cssText, '');\n                return unsafeCSS(cssText);\n            }\n            return s;\n        });\n    }\n    /**\n     * Performs element initialization. By default this calls\n     * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n     * captures any pre-set values for registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the [[`styles`]]\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `NodePart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Reference to the underlying library method used to render the element's\n * DOM. By default, points to the `render` method from lit-html's shady-render\n * module.\n *\n * **Most users will never need to touch this property.**\n *\n * This  property should not be confused with the `render` instance method,\n * which should be overridden to define a template for the element.\n *\n * Advanced users creating a new base class based on LitElement can override\n * this property to point to a custom render method with a signature that\n * matches [shady-render's `render`\n * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n *\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport 'intersection-observer';\nimport { css, html, property, LitElement, customElement, internalProperty, } from 'lit-element';\n/**\n * content-visibility, a web component leverages CSS content-visibility and the\n * Intersection Observer API to provide cross browsers content-visibility solution.\n */\nlet ContentVisibility = class ContentVisibility extends LitElement {\n    constructor() {\n        var _a;\n        super(...arguments);\n        /**\n         * CSS contain-intrinsic-size\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size\n         */\n        this.containIntrinsicSize = '';\n        /**\n         * Intersection Observer API option threshold. Since content-visibility only\n         * triggers once, thus no use cases will need to provide array of threshold.\n         * https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n         */\n        this.threshold = 0;\n        /**\n         * Default inView is true when browsers support CSS content visibility, so\n         * no need to initialize IntersectionObserver but just add CSS rules.\n         */\n        this.inView = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports('content-visibility: auto');\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.inView) {\n            this.observer = new IntersectionObserver((entries) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting &&\n                        entry.target === this.renderRoot.children[0]) {\n                        this.inView = true;\n                    }\n                });\n            }, { threshold: this.threshold });\n        }\n    }\n    /**\n     * @param changedProperties\n     */\n    firstUpdated(changedProperties) {\n        super.firstUpdated(changedProperties);\n        if (this.observer) {\n            const container = this.renderRoot.children[0];\n            container && this.observer.observe(container);\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        if (this.observer) {\n            const container = this.renderRoot.children[0];\n            container && this.observer.unobserve(container);\n            this.observer.disconnect();\n        }\n    }\n    render() {\n        var _a;\n        return html `<div\n      class=\"content-visibility\"\n      style=\"${this.containIntrinsicSize && ((_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports('--contain-intrinsic-size: 0'))\n            ? `--contain-intrinsic-size: ${this.containIntrinsicSize}`\n            : !this.inView\n                ? `height: ${this.containIntrinsicSize || 0}`\n                : ''}\"\n    >\n      ${this.inView ? html `<slot></slot>` : ''}\n    </div>`;\n    }\n};\n/**\n * Component scope styles\n * Note: @supports features query is not supported on IE\n */\nContentVisibility.styles = css `\n    @supports (content-visibility: auto) {\n      .content-visibility {\n        content-visibility: auto;\n      }\n    }\n    @supports (contain-intrinsic-size: 0) and\n      (not (--contain-intrinsic-size: 0)) {\n      .content-visibility {\n        contain-intrinsic-size: 0;\n      }\n    }\n    @supports (--contain-intrinsic-size: 0) and (contain-intrinsic-size: 0) {\n      .content-visibility {\n        contain-intrinsic-size: var(--contain-intrinsic-size, 0);\n      }\n    }\n  `;\n__decorate([\n    property({ type: String })\n], ContentVisibility.prototype, \"containIntrinsicSize\", void 0);\n__decorate([\n    property({ type: Number })\n], ContentVisibility.prototype, \"threshold\", void 0);\n__decorate([\n    internalProperty()\n], ContentVisibility.prototype, \"inView\", void 0);\nContentVisibility = __decorate([\n    customElement('content-visibility')\n], ContentVisibility);\nexport { ContentVisibility };\n//# sourceMappingURL=content-visibility.js.map"],
  "mappings": "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",
  "names": []
}
