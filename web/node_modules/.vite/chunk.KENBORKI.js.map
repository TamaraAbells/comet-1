{
  "version": 3,
  "sources": ["../../../.yarn/cache/@react-dnd-invariant-npm-2.0.0-e055f1025b-2217a3c256.zip/node_modules/@react-dnd/invariant/dist/invariant.esm.js"],
  "sourcesContent": ["/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nexport { invariant };\n//# sourceMappingURL=invariant.esm.js.map\n"],
  "mappings": ";;;;;AAUA,mBAAmB,WAAW,QAAQ;AACpC,WAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,OAAO,IAAI,OAAO,IAAI,IAAI,OAAO,GAAG,OAAO,MAAM,QAAQ;AAC1G,SAAK,OAAO,KAAK,UAAU;AAAA;AAG7B,MAAI,MAAuC;AACzC,QAAI,WAAW,QAAW;AACxB,YAAM,IAAI,MAAM;AAAA;AAAA;AAIpB,MAAI,CAAC,WAAW;AACd,QAAI;AAEJ,QAAI,WAAW,QAAW;AACxB,cAAQ,IAAI,MAAM;AAAA,WACb;AACL,UAAI,WAAW;AACf,cAAQ,IAAI,MAAM,OAAO,QAAQ,OAAO,WAAY;AAClD,eAAO,KAAK;AAAA;AAEd,YAAM,OAAO;AAAA;AAGf,UAAM,cAAc;AAEpB,UAAM;AAAA;AAAA;AA1BD;",
  "names": []
}
