{
  "version": 3,
  "sources": ["../../../.yarn/cache/wonka-npm-4.0.15-716683372a-df4fd51c15.zip/node_modules/wonka/dist/wonka.mjs", "../../../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/parser.mjs", "../../../.yarn/$$virtual/@urql-core-virtual-9f6d4998ab/0/cache/@urql-core-npm-2.0.0-7689f44c21-43890e0dc9.zip/node_modules/@urql/core/dist/2c01d8b2.mjs", "../../../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/visitor.mjs"],
  "sourcesContent": ["function l(a, b) {\n  b.tag = a;\n  return b;\n}\n\nfunction m() {}\n\nfunction p(a) {\n  return function (b) {\n    var c = a.length;\n    let d = !1,\n      e = !1,\n      f = !1,\n      g = 0;\n    b(\n      l(0, [\n        function (h) {\n          if (h) {\n            d = !0;\n          } else if (e) {\n            f = !0;\n          } else {\n            for (e = f = !0; f && !d; ) {\n              g < c ? ((h = a[g]), (g = (g + 1) | 0), (f = !1), b(l(1, [h]))) : ((d = !0), b(0));\n            }\n            e = !1;\n          }\n        },\n      ])\n    );\n  };\n}\n\nfunction r() {}\n\nfunction t(a) {\n  a(0);\n}\n\nfunction u(a) {\n  let b = !1;\n  a(\n    l(0, [\n      function (c) {\n        c ? (b = !0) : b || a(0);\n      },\n    ])\n  );\n}\n\nfunction w(a) {\n  if (void 0 === a) {\n    return ((a = [v, 0]).tag = 256), a;\n  }\n  if (null === a || a[0] !== v) {\n    return a;\n  }\n  (a = [v, (a[1] + 1) | 0]).tag = 256;\n  return a;\n}\n\nfunction x(a) {\n  if (null === a || a[0] !== v) {\n    return a;\n  }\n  if (0 !== (a = a[1])) {\n    return [v, (a - 1) | 0];\n  }\n}\n\nfunction z(a) {\n  return function (b) {\n    return function (c) {\n      function d(b) {\n        'number' == typeof b\n          ? k &&\n            ((k = !1),\n            void 0 !== (b = e.shift())\n              ? ((b = a(x(b))), (k = !0), b(d))\n              : q\n              ? c(0)\n              : g || ((g = !0), f(0)))\n          : b.tag\n          ? k && (c(b), n ? (n = !1) : h(0))\n          : ((h = b = b[0]), (n = !1), b(0));\n      }\n      let e = [],\n        f = m,\n        g = !1,\n        h = m,\n        k = !1,\n        n = !1,\n        q = !1;\n      b(function (b) {\n        'number' == typeof b\n          ? q || ((q = !0), k || 0 !== e.length || c(0))\n          : b.tag\n          ? q || ((b = b[0]), (g = !1), k ? e.push(b) : ((b = a(b)), (k = !0), b(d)))\n          : (f = b[0]);\n      });\n      c(\n        l(0, [\n          function (c) {\n            if (c) {\n              if ((q || ((q = !0), f(1)), k)) {\n                return (k = !1), h(1);\n              }\n            } else {\n              q || g || ((g = !0), f(0)), k && !n && ((n = !0), h(0));\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction A(a) {\n  return a;\n}\n\nfunction B(a) {\n  return a;\n}\n\nfunction C(a) {\n  return a(0);\n}\n\nfunction D(a) {\n  return function (b) {\n    return function (c) {\n      let e = m,\n        f = !1,\n        g = [],\n        h = !1;\n      b(function (b) {\n        'number' == typeof b\n          ? h || ((h = !0), 0 === g.length && c(0))\n          : b.tag\n          ? h ||\n            ((f = !1),\n            (function (a) {\n              function b(a) {\n                'number' == typeof a\n                  ? 0 !== g.length &&\n                    ((g = g.filter(d)),\n                    (a = 0 === g.length),\n                    h && a ? c(0) : !f && a && ((f = !0), e(0)))\n                  : a.tag\n                  ? 0 !== g.length && (c(l(1, [a[0]])), k(0))\n                  : ((k = a = a[0]), (g = g.concat(a)), a(0));\n              }\n              function d(a) {\n                return a !== k;\n              }\n              let k = m;\n              1 === a.length ? a(b) : a.bind(null, b);\n            })(a(b[0])),\n            f || ((f = !0), e(0)))\n          : (e = b[0]);\n      });\n      c(\n        l(0, [\n          function (a) {\n            a\n              ? (h || ((h = !0), e(a)),\n                g.forEach(function (c) {\n                  return c(a);\n                }),\n                (g = []))\n              : (f || h ? (f = !1) : ((f = !0), e(0)), g.forEach(C));\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction E(a) {\n  return a;\n}\n\nfunction F(a) {\n  return a;\n}\n\nfunction G(a) {\n  return D(F)(a);\n}\n\nfunction H(a) {\n  return function (b) {\n    return function (c) {\n      let d = !1;\n      return b(function (e) {\n        if ('number' == typeof e) {\n          d || ((d = !0), c(e));\n        } else if (e.tag) {\n          d || (a(e[0]), c(e));\n        } else {\n          var g = e[0];\n          c(\n            l(0, [\n              function (a) {\n                if (!d) {\n                  return a && (d = !0), g(a);\n                }\n              },\n            ])\n          );\n        }\n      });\n    };\n  };\n}\n\nfunction J(a) {\n  a(0);\n}\n\nfunction K(a) {\n  return function (b) {\n    return function (c) {\n      function d(a) {\n        h &&\n          ('number' == typeof a\n            ? ((h = !1), n ? c(a) : f || ((f = !0), e(0)))\n            : a.tag\n            ? (c(a), k ? (k = !1) : g(0))\n            : ((g = a = a[0]), (k = !1), a(0)));\n      }\n      let e = m,\n        f = !1,\n        g = m,\n        h = !1,\n        k = !1,\n        n = !1;\n      b(function (b) {\n        'number' == typeof b\n          ? n || ((n = !0), h || c(0))\n          : b.tag\n          ? n ||\n            (h && (g(1), (g = m)), f ? (f = !1) : ((f = !0), e(0)), (b = a(b[0])), (h = !0), b(d))\n          : (e = b[0]);\n      });\n      c(\n        l(0, [\n          function (a) {\n            if (a) {\n              if ((n || ((n = !0), e(1)), h)) {\n                return (h = !1), g(1);\n              }\n            } else {\n              n || f || ((f = !0), e(0)), h && !k && ((k = !0), g(0));\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction L(a) {\n  return a;\n}\n\nfunction M(a) {\n  return function (b) {\n    return function (c) {\n      let d = [],\n        e = m;\n      return b(function (b) {\n        'number' == typeof b\n          ? p(d)(c)\n          : b.tag\n          ? (d.length >= a && 0 < a && d.shift(), d.push(b[0]), e(0))\n          : ((b = b[0]), 0 >= a ? (b(1), u(c)) : ((e = b), b(0)));\n      });\n    };\n  };\n}\n\nfunction N(a) {\n  return function (b) {\n    let c = m,\n      d = !1;\n    b(function (e) {\n      'number' == typeof e ? (d = !0) : e.tag ? d || (a(e[0]), c(0)) : ((c = e = e[0]), e(0));\n    });\n    return {\n      unsubscribe: function () {\n        if (!d) {\n          return (d = !0), c(1);\n        }\n      },\n    };\n  };\n}\n\nfunction O() {}\n\nfunction Q() {}\n\nfunction R() {}\n\nfunction S() {}\n\nfunction buffer$1(a) {\n  return function (b) {\n    return function (c) {\n      function d(a) {\n        'number' == typeof a\n          ? k || ((k = !0), f(1), 0 < e.length && c(l(1, [e])), c(0))\n          : a.tag\n          ? !k && 0 < e.length && ((a = e), (e = []), c(l(1, [a])))\n          : (g = a[0]);\n      }\n      let e = [],\n        f = m,\n        g = m,\n        h = !1,\n        k = !1;\n      b(function (b) {\n        'number' == typeof b\n          ? k || ((k = !0), g(1), 0 < e.length && c(l(1, [e])), c(0))\n          : b.tag\n          ? k || (e.push(b[0]), h ? (h = !1) : ((h = !0), f(0), g(0)))\n          : ((f = b[0]), a(d));\n      });\n      c(\n        l(0, [\n          function (a) {\n            if (!k) {\n              if (a) {\n                return (k = !0), f(1), g(1);\n              }\n              if (!h) {\n                return (h = !0), f(0), g(0);\n              }\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction combine$1(a, b) {\n  return (function (a, b) {\n    return function (c) {\n      let d = m,\n        e = m,\n        f = void 0,\n        g = void 0,\n        h = !1,\n        k = 0,\n        n = !1;\n      a(function (a) {\n        var b = g;\n        'number' == typeof a\n          ? 1 > k\n            ? (k = (k + 1) | 0)\n            : n || ((n = !0), c(0))\n          : a.tag\n          ? ((a = a[0]),\n            void 0 !== b\n              ? n || ((f = w(a)), (h = !1), c(l(1, [[a, x(b)]])))\n              : ((f = w(a)), h ? (h = !1) : e(0)))\n          : (d = a[0]);\n      });\n      b(function (a) {\n        var b = f;\n        'number' == typeof a\n          ? 1 > k\n            ? (k = (k + 1) | 0)\n            : n || ((n = !0), c(0))\n          : a.tag\n          ? ((a = a[0]),\n            void 0 !== b\n              ? n || ((g = w(a)), (h = !1), c(l(1, [[x(b), a]])))\n              : ((g = w(a)), h ? (h = !1) : d(0)))\n          : (e = a[0]);\n      });\n      c(\n        l(0, [\n          function (c) {\n            if (!n) {\n              if (c) {\n                return (n = !0), d(1), e(1);\n              }\n              if (!h) {\n                return (h = !0), d(c), e(c);\n              }\n            }\n          },\n        ])\n      );\n    };\n  })(a, b);\n}\n\nfunction concat$1(a) {\n  return z(B)(p(a));\n}\n\nfunction concatAll$1(a) {\n  return z(A)(a);\n}\n\nfunction debounce$1(a) {\n  return function (b) {\n    return function (c) {\n      function d() {\n        var a = e;\n        void 0 !== a && ((e = void 0), clearTimeout(x(a)));\n      }\n      let e = void 0,\n        f = !1,\n        g = !1;\n      return b(function (b) {\n        if ('number' == typeof b) {\n          g || ((g = !0), void 0 !== e ? (f = !0) : c(0));\n        } else if (b.tag) {\n          g ||\n            (d(),\n            (e = w(\n              setTimeout(function () {\n                e = void 0;\n                c(b);\n                f && c(0);\n              }, a(b[0]))\n            )));\n        } else {\n          var n = b[0];\n          c(\n            l(0, [\n              function (a) {\n                if (!g) {\n                  return a ? ((g = !0), (f = !1), d(), n(1)) : n(0);\n                }\n              },\n            ])\n          );\n        }\n      });\n    };\n  };\n}\n\nfunction delay$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = 0;\n      return b(function (b) {\n        'number' == typeof b || b.tag\n          ? ((d = (d + 1) | 0),\n            setTimeout(function () {\n              0 !== d && ((d = (d - 1) | 0), c(b));\n            }, a))\n          : c(b);\n      });\n    };\n  };\n}\n\nfunction filter$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = m;\n      return b(function (b) {\n        'number' == typeof b ? c(b) : b.tag ? (a(b[0]) ? c(b) : d(0)) : ((d = b[0]), c(b));\n      });\n    };\n  };\n}\n\nfunction forEach$1(a) {\n  return function (b) {\n    N(a)(b);\n  };\n}\n\nfunction fromCallbag$2(a) {\n  return function (b) {\n    function c(a, c) {\n      switch (a) {\n        case 0:\n          b(\n            l(0, [\n              function (a) {\n                return a ? c(2) : c(1);\n              },\n            ])\n          );\n          break;\n\n        case 1:\n          b(l(1, [c]));\n          break;\n\n        case 2:\n          b(0);\n      }\n    }\n    return 2 === a.length ? a(0, c) : a.bind(null, 0, c);\n  };\n}\n\nfunction fromDomEvent$1(a, b) {\n  return (function (a, b) {\n    return function (c) {\n      function d(a) {\n        c(l(1, [a]));\n      }\n      c(\n        l(0, [\n          function (c) {\n            c && a.removeEventListener(b, d);\n          },\n        ])\n      );\n      a.addEventListener(b, d);\n    };\n  })(a, b);\n}\n\nfunction fromList$1(a) {\n  return function (b) {\n    let c = !1,\n      d = !1,\n      e = !1,\n      f = a;\n    b(\n      l(0, [\n        function (a) {\n          if (a) {\n            c = !0;\n          } else if (d) {\n            e = !0;\n          } else {\n            for (d = e = !0; e && !c; ) {\n              (a = f) ? ((f = a[1]), (e = !1), b(l(1, [a[0]]))) : ((c = !0), b(0));\n            }\n            d = !1;\n          }\n        },\n      ])\n    );\n  };\n}\n\nfunction fromObservable$2(a) {\n  var b = void 0 !== a[P] ? a[P]() : a;\n  return function (a) {\n    var c = b.subscribe({\n      next: function (c) {\n        a(l(1, [c]));\n      },\n      complete: function () {\n        a(0);\n      },\n      error: Q,\n    });\n    a(\n      l(0, [\n        function (a) {\n          if (a) {\n            return c.unsubscribe();\n          }\n        },\n      ])\n    );\n  };\n}\n\nfunction fromPromise$1(a) {\n  return function (b) {\n    let c = !1;\n    a.then(function (a) {\n      c || (b(l(1, [a])), b(0));\n      return Promise.resolve(void 0);\n    });\n    b(\n      l(0, [\n        function (a) {\n          a && (c = !0);\n        },\n      ])\n    );\n  };\n}\n\nfunction fromValue$1(a) {\n  return function (b) {\n    let c = !1;\n    b(\n      l(0, [\n        function (d) {\n          d ? (c = !0) : c || ((c = !0), b(l(1, [a])), b(0));\n        },\n      ])\n    );\n  };\n}\n\nfunction interval$1(a) {\n  return function (b) {\n    let c = 0;\n    var d = setInterval(function () {\n      var a = c;\n      c = (c + 1) | 0;\n      b(l(1, [a]));\n    }, a);\n    b(\n      l(0, [\n        function (a) {\n          a && clearInterval(d);\n        },\n      ])\n    );\n  };\n}\n\nfunction make$1(a) {\n  return function (b) {\n    let c = r,\n      d = !1;\n    c = a({\n      next: function (a) {\n        d || b(l(1, [a]));\n      },\n      complete: function () {\n        d || ((d = !0), b(0));\n      },\n    });\n    b(\n      l(0, [\n        function (a) {\n          if (a && !d) {\n            return (d = !0), c();\n          }\n        },\n      ])\n    );\n  };\n}\n\nfunction makeSubject$1() {\n  let a = [],\n    b = !1;\n  return {\n    source: function (c) {\n      function b(a) {\n        return a !== c;\n      }\n      a = a.concat(c);\n      c(\n        l(0, [\n          function (c) {\n            c && (a = a.filter(b));\n          },\n        ])\n      );\n    },\n    next: function (c) {\n      b ||\n        a.forEach(function (a) {\n          a(l(1, [c]));\n        });\n    },\n    complete: function () {\n      b || ((b = !0), a.forEach(t));\n    },\n  };\n}\n\nfunction map$1(a) {\n  return function (b) {\n    return function (c) {\n      return b(function (b) {\n        b = 'number' == typeof b ? 0 : b.tag ? l(1, [a(b[0])]) : l(0, [b[0]]);\n        c(b);\n      });\n    };\n  };\n}\n\nfunction merge$1(a) {\n  return D(E)(p(a));\n}\n\nfunction never$1(a) {\n  a(l(0, [m]));\n}\n\nfunction onEnd$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = !1;\n      return b(function (b) {\n        if ('number' == typeof b) {\n          if (d) {\n            return;\n          }\n          d = !0;\n          c(b);\n          return a();\n        }\n        if (b.tag) {\n          d || c(b);\n        } else {\n          var e = b[0];\n          c(\n            l(0, [\n              function (c) {\n                if (!d) {\n                  return c ? ((d = !0), e(c), a()) : e(c);\n                }\n              },\n            ])\n          );\n        }\n      });\n    };\n  };\n}\n\nfunction onStart$1(a) {\n  return function (b) {\n    return function (c) {\n      return b(function (b) {\n        'number' == typeof b ? c(b) : b.tag ? c(b) : (c(b), a());\n      });\n    };\n  };\n}\n\nfunction pipe() {\n  for (var a = arguments, b = arguments[0], c = 1, d = arguments.length; c < d; c++) {\n    b = a[c](b);\n  }\n  return b;\n}\n\nfunction publish$1(a) {\n  return N(O)(a);\n}\n\nfunction sample$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = m,\n        e = m,\n        f = void 0,\n        g = !1,\n        h = !1;\n      b(function (a) {\n        'number' == typeof a\n          ? h || ((h = !0), e(1), c(0))\n          : a.tag\n          ? ((f = w(a[0])), g ? (g = !1) : ((g = !0), e(0), d(0)))\n          : (d = a[0]);\n      });\n      a(function (a) {\n        var b = f;\n        'number' == typeof a\n          ? h || ((h = !0), d(1), c(0))\n          : a.tag\n          ? void 0 === b || h || ((f = void 0), c(l(1, [x(b)])))\n          : (e = a[0]);\n      });\n      c(\n        l(0, [\n          function (a) {\n            if (!h) {\n              if (a) {\n                return (h = !0), d(1), e(1);\n              }\n              if (!g) {\n                return (g = !0), d(0), e(0);\n              }\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction scan$1(a, b) {\n  return (function (a, b) {\n    return function (c) {\n      return function (d) {\n        let e = b;\n        return c(function (c) {\n          'number' == typeof c\n            ? (c = 0)\n            : c.tag\n            ? ((e = a(e, c[0])), (c = l(1, [e])))\n            : (c = l(0, [c[0]]));\n          d(c);\n        });\n      };\n    };\n  })(a, b);\n}\n\nfunction share$1(a) {\n  function b(a) {\n    'number' == typeof a\n      ? (c.forEach(J), (c = []))\n      : a.tag\n      ? ((e = !1),\n        c.forEach(function (b) {\n          b(a);\n        }))\n      : (d = a[0]);\n  }\n  let c = [],\n    d = m,\n    e = !1;\n  return function (f) {\n    function g(a) {\n      return a !== f;\n    }\n    c = c.concat(f);\n    1 === c.length && a(b);\n    f(\n      l(0, [\n        function (a) {\n          if (a) {\n            if (((c = c.filter(g)), 0 === c.length)) {\n              return d(1);\n            }\n          } else {\n            e || ((e = !0), d(a));\n          }\n        },\n      ])\n    );\n  };\n}\n\nfunction skip$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = m,\n        e = a;\n      return b(function (a) {\n        'number' == typeof a\n          ? c(a)\n          : a.tag\n          ? 0 < e\n            ? ((e = (e - 1) | 0), d(0))\n            : c(a)\n          : ((d = a[0]), c(a));\n      });\n    };\n  };\n}\n\nfunction skipUntil$1(a) {\n  return function (b) {\n    return function (c) {\n      function d(a) {\n        'number' == typeof a\n          ? g && ((k = !0), e(1))\n          : a.tag\n          ? ((g = !1), f(1))\n          : ((f = a = a[0]), a(0));\n      }\n      let e = m,\n        f = m,\n        g = !0,\n        h = !1,\n        k = !1;\n      b(function (b) {\n        'number' == typeof b\n          ? (g && f(1), (k = !0), c(0))\n          : b.tag\n          ? g || k\n            ? h\n              ? (h = !1)\n              : ((h = !0), e(0), f(0))\n            : ((h = !1), c(b))\n          : ((e = b[0]), a(d));\n      });\n      c(\n        l(0, [\n          function (a) {\n            if (!k) {\n              if (a) {\n                if (((k = !0), e(1), g)) {\n                  return f(1);\n                }\n              } else {\n                h || ((h = !0), g && f(0), e(0));\n              }\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction skipWhile$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = m,\n        e = !0;\n      return b(function (b) {\n        'number' == typeof b\n          ? c(b)\n          : b.tag\n          ? e\n            ? a(b[0])\n              ? d(0)\n              : ((e = !1), c(b))\n            : c(b)\n          : ((d = b[0]), c(b));\n      });\n    };\n  };\n}\n\nfunction switchAll$1(a) {\n  return K(L)(a);\n}\n\nfunction take$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = !1,\n        e = 0,\n        f = m;\n      b(function (b) {\n        'number' == typeof b\n          ? d || ((d = !0), c(0))\n          : b.tag\n          ? e < a && !d && ((e = (e + 1) | 0), c(b), !d && e >= a && ((d = !0), c(0), f(1)))\n          : ((b = b[0]), 0 >= a ? ((d = !0), c(0), b(1)) : (f = b));\n      });\n      c(\n        l(0, [\n          function (b) {\n            if (!d) {\n              if (b) {\n                return (d = !0), f(1);\n              }\n              if (e < a) {\n                return f(0);\n              }\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction takeUntil$1(a) {\n  return function (b) {\n    return function (c) {\n      function d(a) {\n        'number' != typeof a && (a.tag ? ((e = !0), f(1), c(0)) : ((g = a = a[0]), a(0)));\n      }\n      let e = !1,\n        f = m,\n        g = m;\n      b(function (b) {\n        'number' == typeof b ? e || ((e = !0), g(1), c(0)) : b.tag ? e || c(b) : ((f = b[0]), a(d));\n      });\n      c(\n        l(0, [\n          function (a) {\n            if (!e) {\n              return a ? ((e = !0), f(1), g(1)) : f(0);\n            }\n          },\n        ])\n      );\n    };\n  };\n}\n\nfunction takeWhile$1(a) {\n  return function (b) {\n    return function (c) {\n      let d = m,\n        e = !1;\n      return b(function (b) {\n        'number' == typeof b\n          ? e || ((e = !0), c(0))\n          : b.tag\n          ? e || (a(b[0]) ? c(b) : ((e = !0), c(0), d(1)))\n          : ((d = b[0]), c(b));\n      });\n    };\n  };\n}\n\nfunction throttle$1(a) {\n  return function (b) {\n    return function (c) {\n      function d() {\n        void 0 !== g && clearTimeout(x(g));\n      }\n      function e() {\n        g = void 0;\n        f = !1;\n      }\n      let f = !1,\n        g = void 0;\n      return b(function (b) {\n        if ('number' == typeof b) {\n          d(), c(0);\n        } else if (b.tag) {\n          f || ((f = !0), d(), (g = w(setTimeout(e, a(b[0])))), c(b));\n        } else {\n          var h = b[0];\n          c(\n            l(0, [\n              function (a) {\n                return a ? (d(), h(1)) : h(a);\n              },\n            ])\n          );\n        }\n      });\n    };\n  };\n}\n\nfunction toArray$1(a) {\n  let b = [],\n    c = m,\n    d = !1;\n  a(function (a) {\n    'number' == typeof a ? (d = !0) : a.tag ? (b.push(a[0]), c(0)) : ((c = a = a[0]), a(0));\n  });\n  d || c(1);\n  return b;\n}\n\nfunction toCallbag$2(a) {\n  return function (b, c) {\n    if (0 === b) {\n      return a(function (a) {\n        function b(a) {\n          switch (a) {\n            case 1:\n              d(0);\n              break;\n\n            case 2:\n              d(1);\n          }\n        }\n        if ('number' == typeof a) {\n          return 2 === c.length ? c(2, void 0) : c.bind(null, 2, void 0);\n        }\n        if (a.tag) {\n          return (a = a[0]), 2 === c.length ? c(1, a) : c.bind(null, 1, a);\n        }\n        var d = a[0];\n        return 2 === c.length ? c(0, b) : c.bind(null, 0, b);\n      });\n    }\n  };\n}\n\nfunction toObservable$2(a) {\n  var b = {\n    subscribe: function (b, d, e) {\n      var c = ('object' == typeof b ? b.next.bind(b) : b) || R,\n        g = ('object' == typeof b ? b.complete.bind(b) : e) || S;\n      let h = m,\n        k = !1;\n      a(function (a) {\n        if ('number' == typeof a) {\n          return (k = !0), g();\n        }\n        if (a.tag) {\n          if (k) {\n            return;\n          }\n          c(a[0]);\n          return h(0);\n        }\n        h = a = a[0];\n        a(0);\n      });\n      return {\n        unsubscribe: function () {\n          if (!k) {\n            return (this.closed = !1), (k = !0), h(1);\n          }\n        },\n        closed: !1,\n      };\n    },\n  };\n  b[P] = function () {\n    return b;\n  };\n  return b;\n}\n\nfunction toPromise$1(a) {\n  return new Promise(function (b) {\n    M(1)(a)(function (a) {\n      if ('number' != typeof a) {\n        if (a.tag) {\n          b(a[0]);\n        } else {\n          a[0](0);\n        }\n      }\n    });\n  });\n}\n\nvar v = [],\n  P =\n    'function' == typeof Symbol\n      ? Symbol.observable || (Symbol.observable = Symbol('observable'))\n      : '@@observable';\n\nexport {\n  buffer$1 as buffer,\n  combine$1 as combine,\n  concat$1 as concat,\n  concatAll$1 as concatAll,\n  z as concatMap,\n  debounce$1 as debounce,\n  delay$1 as delay,\n  u as empty,\n  filter$1 as filter,\n  G as flatten,\n  forEach$1 as forEach,\n  p as fromArray,\n  fromCallbag$2 as fromCallbag,\n  fromDomEvent$1 as fromDomEvent,\n  fromList$1 as fromList,\n  fromObservable$2 as fromObservable,\n  fromPromise$1 as fromPromise,\n  fromValue$1 as fromValue,\n  interval$1 as interval,\n  make$1 as make,\n  makeSubject$1 as makeSubject,\n  map$1 as map,\n  merge$1 as merge,\n  G as mergeAll,\n  D as mergeMap,\n  never$1 as never,\n  onEnd$1 as onEnd,\n  H as onPush,\n  onStart$1 as onStart,\n  pipe,\n  publish$1 as publish,\n  sample$1 as sample,\n  scan$1 as scan,\n  share$1 as share,\n  skip$1 as skip,\n  skipUntil$1 as skipUntil,\n  skipWhile$1 as skipWhile,\n  N as subscribe,\n  switchAll$1 as switchAll,\n  K as switchMap,\n  take$1 as take,\n  M as takeLast,\n  takeUntil$1 as takeUntil,\n  takeWhile$1 as takeWhile,\n  H as tap,\n  throttle$1 as throttle,\n  toArray$1 as toArray,\n  toCallbag$2 as toCallbag,\n  toObservable$2 as toObservable,\n  toPromise$1 as toPromise,\n};\n", "import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var _this$_options2;\n\n    if (!this.expectOptionalKeyword('implements')) {\n      return [];\n    }\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {\n      var types = []; // Optional leading ampersand\n\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));\n\n      return types;\n    }\n\n    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n  ;\n\n  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n", "function k(a) {\n  return \"string\" == typeof a ? new GraphQLError(a) : \"object\" == typeof a && a.message ? new GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;\n}\n\nfunction l() {\n  return this.message;\n}\n\nfunction n(a, b) {\n  a |= 0;\n  for (var c = 0, d = 0 | b.length; c < d; c++) {\n    a = (a << 5) + a + b.charCodeAt(c);\n  }\n  return a;\n}\n\nfunction t(a) {\n  var b, c, d, e, f, g;\n  if (null === a || q.has(a)) {\n    return \"null\";\n  }\n  if (\"object\" != typeof a) {\n    return JSON.stringify(a) || \"\";\n  }\n  if (a.toJSON) {\n    return t(a.toJSON());\n  }\n  if (Array.isArray(a)) {\n    for (b = \"[\", c = 0, d = a.length; c < d; c++) {\n      0 < c && (b += \",\");\n      b += 0 < (e = t(a[c])).length ? e : \"null\";\n    }\n    return b + \"]\";\n  }\n  if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {\n    return b = r.get(a) || Math.random().toString(36).slice(2), r.set(a, b), '{\"__key\":\"' + b + '\"}';\n  }\n  q.add(a);\n  c = \"{\";\n  d = 0;\n  for (e = b.length; d < e; d++) {\n    (g = t(a[f = b[d]])) && (1 < c.length && (c += \",\"), c += t(f) + \":\" + g);\n  }\n  q.delete(a);\n  return c + \"}\";\n}\n\nfunction u(a) {\n  q.clear();\n  return t(a);\n}\n\nfunction v(a) {\n  var b = (\"string\" != typeof a ? a.loc && a.loc.source.body || print(a) : a).replace(/([\\s,]|#[^\\n\\r]+)+/g, \" \").trim();\n  \"string\" != typeof a && (a.loc ? (a = \"definitions\" in a && w(a)) && (b = \"# \" + a + \"\\n\" + b) : a.loc = {\n    start: 0,\n    end: b.length,\n    source: {\n      body: b,\n      name: \"gql\",\n      locationOffset: {\n        line: 1,\n        column: 1\n      }\n    }\n  });\n  return b;\n}\n\nfunction y(a) {\n  if (\"string\" == typeof a) {\n    var b = n(5381, v(a)) >>> 0;\n    a = x.get(b) || parse(a, {\n      noLocation: !0\n    });\n  } else {\n    b = a.__key || n(5381, v(a)) >>> 0, a = x.get(b) || a;\n  }\n  a.loc || v(a);\n  a.__key = b;\n  x.set(b, a);\n  return a;\n}\n\nfunction w(a) {\n  var b, c, d;\n  for (b = 0, c = a.definitions.length; b < c; b++) {\n    if ((d = a.definitions[b]).kind === Kind.OPERATION_DEFINITION && d.name) {\n      return d.name.value;\n    }\n  }\n}\n\nfunction z(a, b, c) {\n  return {\n    operation: a,\n    data: b.data,\n    error: Array.isArray(b.errors) ? new m({\n      graphQLErrors: b.errors,\n      response: c\n    }) : void 0,\n    extensions: \"object\" == typeof b.extensions && b.extensions || void 0\n  };\n}\n\nfunction A(a, b, c) {\n  return {\n    operation: a,\n    data: void 0,\n    error: new m({\n      networkError: b,\n      response: c\n    }),\n    extensions: void 0\n  };\n}\n\nfunction B() {\n  return (B = Object.assign || function(a) {\n    var b, c, d;\n    for (b = 1; b < arguments.length; b++) {\n      c = arguments[b];\n      for (d in c) {\n        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);\n      }\n    }\n    return a;\n  }).apply(this, arguments);\n}\n\nfunction makeFetchBody(a) {\n  return {\n    query: print(a.query),\n    operationName: w(a.query),\n    variables: a.variables || void 0,\n    extensions: void 0\n  };\n}\n\nfunction makeFetchURL(a, b) {\n  var c = a.context.url;\n  if (\"query\" !== a.kind || !a.context.preferGetMethod || !b) {\n    return c;\n  }\n  a = [];\n  b.operationName && a.push(\"operationName=\" + encodeURIComponent(b.operationName));\n  b.query && a.push(\"query=\" + encodeURIComponent(b.query.replace(/([\\s,]|#[^\\n\\r]+)+/g, \" \").trim()));\n  b.variables && a.push(\"variables=\" + encodeURIComponent(u(b.variables)));\n  b.extensions && a.push(\"extensions=\" + encodeURIComponent(u(b.extensions)));\n  return c + \"?\" + a.join(\"&\");\n}\n\nfunction makeFetchOptions(a, b) {\n  var c = \"query\" === a.kind && !!a.context.preferGetMethod;\n  return B({}, a = \"function\" == typeof a.context.fetchOptions ? a.context.fetchOptions() : a.context.fetchOptions || {}, {\n    body: !c && b ? JSON.stringify(b) : void 0,\n    method: c ? \"GET\" : \"POST\",\n    headers: c ? a.headers : B({}, {\n      \"content-type\": \"application/json\"\n    }, a.headers)\n  });\n}\n\nfunction makeFetchSource(a, b, c) {\n  return make((function(d) {\n    var e = d.next, f = d.complete, g = \"undefined\" != typeof AbortController ? new AbortController : null, p = !1;\n    Promise.resolve().then((function() {\n      if (!p) {\n        return g && (c.signal = g.signal), function C(a, b, c) {\n          var e, d = !1;\n          return (a.context.fetch || fetch)(b, c).then((function(a) {\n            e = a;\n            d = 200 > a.status || a.status >= (\"manual\" === c.redirect ? 400 : 300);\n            return a.json();\n          })).then((function(b) {\n            if (!(\"data\" in b) && !(\"errors\" in b)) {\n              throw Error(\"No Content\");\n            }\n            return z(a, b, e);\n          })).catch((function(b) {\n            if (\"AbortError\" !== b.name) {\n              return A(a, d ? Error(e.statusText) : b, e);\n            }\n          }));\n        }(a, b, c);\n      }\n    })).then((function(a) {\n      p || (p = !0, a && e(a), f());\n    }));\n    return function() {\n      p = !0;\n      g && g.abort();\n    };\n  }));\n}\n\nfunction createRequest(a, b) {\n  a = y(a);\n  return {\n    key: b ? n(a.__key, u(b)) >>> 0 : a.__key,\n    query: a,\n    variables: b || {}\n  };\n}\n\nvar m, q, r, x;\n\nimport { make } from \"wonka\";\n\nimport { GraphQLError } from \"graphql/error/GraphQLError.mjs\";\n\nimport { Kind } from \"graphql/language/kinds.mjs\";\n\nimport { parse } from \"graphql/language/parser.mjs\";\n\nimport { print } from \"graphql/language/printer.mjs\";\n\nm = function(a) {\n  function b(b) {\n    var f, c = b.networkError, e = b.response;\n    f = function h(a, b) {\n      var d = \"\";\n      if (void 0 !== a) {\n        return d = \"[Network] \" + a.message;\n      }\n      void 0 !== b && b.forEach((function c(a) {\n        d += \"[GraphQL] \" + a.message + \"\\n\";\n      }));\n      return d.trim();\n    }(c, b = (b.graphQLErrors || []).map(k));\n    a.call(this, f);\n    this.name = \"CombinedError\";\n    this.message = f;\n    this.graphQLErrors = b;\n    this.networkError = c;\n    this.response = e;\n  }\n  a && (b.__proto__ = a);\n  (b.prototype = Object.create(a && a.prototype)).constructor = b;\n  b.prototype.toString = l;\n  return b;\n}(Error);\n\nq = new Set, r = new WeakMap;\n\nx = new Map;\n\nexport { m as C, B as _, A as a, makeFetchBody as b, makeFetchURL as c, makeFetchOptions as d, makeFetchSource as e, createRequest as f, u as g, w as h, y as k, z as m, v as s };\n//# sourceMappingURL=2c01d8b2.mjs.map\n", "import inspect from \"../jsutils/inspect.mjs\";\nimport { isNode } from \"./ast.mjs\";\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(\"Invalid AST Node: \".concat(inspect(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
