import {
  require_react_dom
} from "./chunk.NJLDE6UR.js";
import "./chunk.KM4KWRBF.js";
import {
  __toModule
} from "./chunk.5JD2HCIV.js";
import "./chunk.FNFVRXQK.js";
import {
  require_react
} from "./chunk.BD4KNU7W.js";
import "./chunk.MXG56MB2.js";
import "./chunk.5OSL2VXB.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/$$virtual/@headlessui-react-virtual-0503202dc0/0/cache/@headlessui-react-npm-0.3.1-d519f7d-a50abac465-3b3751e289.zip/node_modules/@headlessui/react/dist/headlessui.esm.js
var import_react = __toModule(require_react());
var import_react_dom = __toModule(require_react_dom());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
__name(_extends, "_extends");
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
__name(_objectWithoutPropertiesLoose, "_objectWithoutPropertiesLoose");
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
__name(_unsupportedIterableToArray, "_unsupportedIterableToArray");
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
__name(_arrayLikeToArray, "_arrayLikeToArray");
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  it = o[Symbol.iterator]();
  return it.next.bind(it);
}
__name(_createForOfIteratorHelperLoose, "_createForOfIteratorHelperLoose");
function match(value, lookup) {
  if (value in lookup) {
    var returnValue = lookup[value];
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    return typeof returnValue === "function" ? returnValue.apply(void 0, args) : returnValue;
  }
  var error = new Error('Tried to handle "' + value + '" but there is no handler defined. Only defined handlers are: ' + Object.keys(lookup).map(function(key) {
    return '"' + key + '"';
  }).join(", ") + ".");
  if (Error.captureStackTrace)
    Error.captureStackTrace(error, match);
  throw error;
}
__name(match, "match");
var Features;
(function(Features2) {
  Features2[Features2["None"] = 0] = "None";
  Features2[Features2["RenderStrategy"] = 1] = "RenderStrategy";
  Features2[Features2["Static"] = 2] = "Static";
})(Features || (Features = {}));
var RenderStrategy;
(function(RenderStrategy2) {
  RenderStrategy2[RenderStrategy2["Unmount"] = 0] = "Unmount";
  RenderStrategy2[RenderStrategy2["Hidden"] = 1] = "Hidden";
})(RenderStrategy || (RenderStrategy = {}));
function render(props, propsBag, defaultTag, features, visible) {
  if (visible === void 0) {
    visible = true;
  }
  if (visible)
    return _render(props, propsBag, defaultTag);
  var featureFlags = features != null ? features : Features.None;
  if (featureFlags & Features.Static) {
    var _props$static = props["static"], isStatic = _props$static === void 0 ? false : _props$static, rest = _objectWithoutPropertiesLoose(props, ["static"]);
    if (isStatic)
      return _render(rest, propsBag, defaultTag);
  }
  if (featureFlags & Features.RenderStrategy) {
    var _match;
    var _props$unmount = props.unmount, unmount = _props$unmount === void 0 ? true : _props$unmount, _rest = _objectWithoutPropertiesLoose(props, ["unmount"]);
    var strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;
    return match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function() {
      return null;
    }, _match[RenderStrategy.Hidden] = function() {
      return _render(_extends({}, _rest, {
        hidden: true,
        style: {
          display: "none"
        }
      }), propsBag, defaultTag);
    }, _match));
  }
  return _render(props, propsBag, defaultTag);
}
__name(render, "render");
function _render(props, bag, tag) {
  var _ref;
  var _omit = omit(props, ["unmount", "static"]), _omit$as = _omit.as, Component = _omit$as === void 0 ? tag : _omit$as, children = _omit.children, _omit$refName = _omit.refName, refName = _omit$refName === void 0 ? "ref" : _omit$refName, passThroughProps = _objectWithoutPropertiesLoose(_omit, ["as", "children", "refName"]);
  var refRelatedProps = props.ref !== void 0 ? (_ref = {}, _ref[refName] = props.ref, _ref) : {};
  var resolvedChildren = typeof children === "function" ? children(bag) : children;
  if (passThroughProps.className && typeof passThroughProps.className === "function") {
    passThroughProps.className = passThroughProps.className(bag);
  }
  if (Component === import_react.Fragment) {
    if (Object.keys(passThroughProps).length > 0) {
      if (Array.isArray(resolvedChildren) && resolvedChildren.length > 1) {
        var err = new Error("You should only render 1 child");
        if (Error.captureStackTrace)
          Error.captureStackTrace(err, _render);
        throw err;
      }
      if (!(0, import_react.isValidElement)(resolvedChildren)) {
        var _err = new Error('You should render an element as a child. Did you forget the as="..." prop?');
        if (Error.captureStackTrace)
          Error.captureStackTrace(_err, _render);
        throw _err;
      }
      return (0, import_react.cloneElement)(resolvedChildren, Object.assign({}, mergeEventFunctions(compact(omit(passThroughProps, ["ref"])), resolvedChildren.props, ["onClick"]), refRelatedProps));
    }
  }
  return (0, import_react.createElement)(Component, Object.assign({}, omit(passThroughProps, ["ref"]), Component !== import_react.Fragment && refRelatedProps), resolvedChildren);
}
__name(_render, "_render");
function mergeEventFunctions(passThroughProps, existingProps, functionsToMerge) {
  var clone = Object.assign({}, passThroughProps);
  var _loop = /* @__PURE__ */ __name(function _loop2() {
    var func = _step.value;
    if (passThroughProps[func] !== void 0 && existingProps[func] !== void 0) {
      var _Object$assign;
      Object.assign(clone, (_Object$assign = {}, _Object$assign[func] = function(event) {
        if (!event.defaultPrevented)
          passThroughProps[func](event);
        if (!event.defaultPrevented)
          existingProps[func](event);
      }, _Object$assign));
    }
  }, "_loop");
  for (var _iterator = _createForOfIteratorHelperLoose(functionsToMerge), _step; !(_step = _iterator()).done; ) {
    _loop();
  }
  return clone;
}
__name(mergeEventFunctions, "mergeEventFunctions");
function forwardRefWithAs(component) {
  var _component$displayNam;
  return Object.assign((0, import_react.forwardRef)(component), {
    displayName: (_component$displayNam = component.displayName) != null ? _component$displayNam : component.name
  });
}
__name(forwardRefWithAs, "forwardRefWithAs");
function compact(object) {
  var clone = Object.assign({}, object);
  for (var key in clone) {
    if (clone[key] === void 0)
      delete clone[key];
  }
  return clone;
}
__name(compact, "compact");
function omit(object, keysToOmit) {
  if (keysToOmit === void 0) {
    keysToOmit = [];
  }
  var clone = Object.assign({}, object);
  for (var _iterator2 = _createForOfIteratorHelperLoose(keysToOmit), _step2; !(_step2 = _iterator2()).done; ) {
    var key = _step2.value;
    if (key in clone)
      delete clone[key];
  }
  return clone;
}
__name(omit, "omit");
function useSyncRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  var cache = (0, import_react.useRef)(refs);
  (0, import_react.useEffect)(function() {
    cache.current = refs;
  }, [refs]);
  return (0, import_react.useCallback)(function(value) {
    for (var _iterator = _createForOfIteratorHelperLoose(cache.current), _step; !(_step = _iterator()).done; ) {
      var ref = _step.value;
      if (ref == null)
        continue;
      if (typeof ref === "function")
        ref(value);
      else
        ref.current = value;
    }
  }, [cache]);
}
__name(useSyncRefs, "useSyncRefs");
var Keys;
(function(Keys2) {
  Keys2["Space"] = " ";
  Keys2["Enter"] = "Enter";
  Keys2["Escape"] = "Escape";
  Keys2["Backspace"] = "Backspace";
  Keys2["ArrowUp"] = "ArrowUp";
  Keys2["ArrowDown"] = "ArrowDown";
  Keys2["Home"] = "Home";
  Keys2["End"] = "End";
  Keys2["PageUp"] = "PageUp";
  Keys2["PageDown"] = "PageDown";
  Keys2["Tab"] = "Tab";
})(Keys || (Keys = {}));
function isDisabledReactIssue7711(element) {
  var _ref, _parent;
  var parent = element.parentElement;
  var legend = null;
  while (parent && !(parent instanceof HTMLFieldSetElement)) {
    if (parent instanceof HTMLLegendElement)
      legend = parent;
    parent = parent.parentElement;
  }
  var isParentDisabled = (_ref = ((_parent = parent) == null ? void 0 : _parent.getAttribute("disabled")) === "") != null ? _ref : false;
  if (isParentDisabled && isFirstLegend(legend))
    return false;
  return isParentDisabled;
}
__name(isDisabledReactIssue7711, "isDisabledReactIssue7711");
function isFirstLegend(element) {
  if (!element)
    return false;
  var previous = element.previousElementSibling;
  while (previous !== null) {
    if (previous instanceof HTMLLegendElement)
      return false;
    previous = previous.previousElementSibling;
  }
  return true;
}
__name(isFirstLegend, "isFirstLegend");
var useIsoMorphicEffect = typeof window !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
var state = {
  serverHandoffComplete: false
};
var id = 0;
function generateId() {
  return ++id;
}
__name(generateId, "generateId");
function useId() {
  var _useState = (0, import_react.useState)(state.serverHandoffComplete ? generateId : null), id2 = _useState[0], setId = _useState[1];
  useIsoMorphicEffect(function() {
    if (id2 === null)
      setId(generateId());
  }, [id2]);
  (0, import_react.useEffect)(function() {
    if (state.serverHandoffComplete === false)
      state.serverHandoffComplete = true;
  }, []);
  return id2 != null ? "" + id2 : void 0;
}
__name(useId, "useId");
var focusableSelector = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map(false ? function(selector) {
  return selector + ":not([tabindex='-1']):not([style*='display: none'])";
} : function(selector) {
  return selector + ":not([tabindex='-1'])";
}).join(",");
var Focus;
(function(Focus2) {
  Focus2[Focus2["First"] = 1] = "First";
  Focus2[Focus2["Previous"] = 2] = "Previous";
  Focus2[Focus2["Next"] = 4] = "Next";
  Focus2[Focus2["Last"] = 8] = "Last";
  Focus2[Focus2["WrapAround"] = 16] = "WrapAround";
  Focus2[Focus2["NoScroll"] = 32] = "NoScroll";
})(Focus || (Focus = {}));
var FocusResult;
(function(FocusResult2) {
  FocusResult2[FocusResult2["Error"] = 0] = "Error";
  FocusResult2[FocusResult2["Overflow"] = 1] = "Overflow";
  FocusResult2[FocusResult2["Success"] = 2] = "Success";
  FocusResult2[FocusResult2["Underflow"] = 3] = "Underflow";
})(FocusResult || (FocusResult = {}));
var Direction;
(function(Direction2) {
  Direction2[Direction2["Previous"] = -1] = "Previous";
  Direction2[Direction2["Next"] = 1] = "Next";
})(Direction || (Direction = {}));
function getFocusableElements(container) {
  if (container === void 0) {
    container = document.body;
  }
  if (container == null)
    return [];
  return Array.from(container.querySelectorAll(focusableSelector));
}
__name(getFocusableElements, "getFocusableElements");
var FocusableMode;
(function(FocusableMode2) {
  FocusableMode2[FocusableMode2["Strict"] = 0] = "Strict";
  FocusableMode2[FocusableMode2["Loose"] = 1] = "Loose";
})(FocusableMode || (FocusableMode = {}));
function isFocusableElement(element, mode) {
  var _match;
  if (mode === void 0) {
    mode = FocusableMode.Strict;
  }
  if (element === document.body)
    return false;
  return match(mode, (_match = {}, _match[FocusableMode.Strict] = function() {
    return element.matches(focusableSelector);
  }, _match[FocusableMode.Loose] = function() {
    var next = element;
    while (next !== null) {
      if (next.matches(focusableSelector))
        return true;
      next = next.parentElement;
    }
    return false;
  }, _match));
}
__name(isFocusableElement, "isFocusableElement");
function focusElement(element) {
  element == null ? void 0 : element.focus({
    preventScroll: true
  });
}
__name(focusElement, "focusElement");
function focusIn(container, focus) {
  var elements = Array.isArray(container) ? container : getFocusableElements(container);
  var active = document.activeElement;
  var direction = function() {
    if (focus & (Focus.First | Focus.Next))
      return Direction.Next;
    if (focus & (Focus.Previous | Focus.Last))
      return Direction.Previous;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  }();
  var startIndex = function() {
    if (focus & Focus.First)
      return 0;
    if (focus & Focus.Previous)
      return Math.max(0, elements.indexOf(active)) - 1;
    if (focus & Focus.Next)
      return Math.max(0, elements.indexOf(active)) + 1;
    if (focus & Focus.Last)
      return elements.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  }();
  var focusOptions = focus & Focus.NoScroll ? {
    preventScroll: true
  } : {};
  var offset = 0;
  var total = elements.length;
  var next = void 0;
  do {
    var _next;
    if (offset >= total || offset + total <= 0)
      return FocusResult.Error;
    var nextIdx = startIndex + offset;
    if (focus & Focus.WrapAround) {
      nextIdx = (nextIdx + total) % total;
    } else {
      if (nextIdx < 0)
        return FocusResult.Underflow;
      if (nextIdx >= total)
        return FocusResult.Overflow;
    }
    next = elements[nextIdx];
    (_next = next) == null ? void 0 : _next.focus(focusOptions);
    offset += direction;
  } while (next !== document.activeElement);
  return FocusResult.Success;
}
__name(focusIn, "focusIn");
function contains(containers, element) {
  for (var _iterator = _createForOfIteratorHelperLoose(containers), _step; !(_step = _iterator()).done; ) {
    var container = _step.value;
    if (container.contains(element))
      return true;
  }
  return false;
}
__name(contains, "contains");
function useFocusTrap(containers, enabled, options) {
  if (enabled === void 0) {
    enabled = true;
  }
  if (options === void 0) {
    options = {};
  }
  var restoreElement = (0, import_react.useRef)(typeof window !== "undefined" ? document.activeElement : null);
  var previousActiveElement = (0, import_react.useRef)(null);
  var mounted = (0, import_react.useRef)(false);
  useIsoMorphicEffect(function() {
    var _options$initialFocus, _options$initialFocus3;
    if (!enabled)
      return;
    if (containers.current.size !== 1)
      return;
    mounted.current = true;
    var activeElement = document.activeElement;
    if ((_options$initialFocus = options.initialFocus) == null ? void 0 : _options$initialFocus.current) {
      var _options$initialFocus2;
      if (((_options$initialFocus2 = options.initialFocus) == null ? void 0 : _options$initialFocus2.current) === activeElement) {
        return;
      }
    } else if (contains(containers.current, activeElement)) {
      return;
    }
    restoreElement.current = activeElement;
    if ((_options$initialFocus3 = options.initialFocus) == null ? void 0 : _options$initialFocus3.current) {
      focusElement(options.initialFocus.current);
    } else {
      var couldFocus = false;
      for (var _iterator = _createForOfIteratorHelperLoose(containers.current), _step; !(_step = _iterator()).done; ) {
        var container = _step.value;
        var result = focusIn(container, Focus.First);
        if (result === FocusResult.Success) {
          couldFocus = true;
          break;
        }
      }
      if (!couldFocus)
        throw new Error("There are no focusable elements inside the <FocusTrap />");
    }
    previousActiveElement.current = document.activeElement;
    return function() {
      mounted.current = false;
      focusElement(restoreElement.current);
      restoreElement.current = null;
      previousActiveElement.current = null;
    };
  }, [enabled, containers, mounted, options.initialFocus]);
  useIsoMorphicEffect(function() {
    if (!enabled)
      return;
    function handler(event) {
      if (event.key !== Keys.Tab)
        return;
      if (!document.activeElement)
        return;
      if (containers.current.size !== 1)
        return;
      event.preventDefault();
      for (var _iterator2 = _createForOfIteratorHelperLoose(containers.current), _step2; !(_step2 = _iterator2()).done; ) {
        var element = _step2.value;
        var result = focusIn(element, (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround);
        if (result === FocusResult.Success) {
          previousActiveElement.current = document.activeElement;
          break;
        }
      }
    }
    __name(handler, "handler");
    window.addEventListener("keydown", handler);
    return function() {
      return window.removeEventListener("keydown", handler);
    };
  }, [enabled, containers]);
  useIsoMorphicEffect(function() {
    if (!enabled)
      return;
    if (containers.current.size !== 1)
      return;
    function handler(event) {
      var previous = previousActiveElement.current;
      if (!previous)
        return;
      if (!mounted.current)
        return;
      var toElement = event.target;
      if (toElement && toElement instanceof HTMLElement) {
        if (!contains(containers.current, toElement)) {
          event.preventDefault();
          event.stopPropagation();
          focusElement(previous);
        } else {
          previousActiveElement.current = toElement;
          focusElement(toElement);
        }
      } else {
        focusElement(previousActiveElement.current);
      }
    }
    __name(handler, "handler");
    window.addEventListener("focus", handler, true);
    return function() {
      return window.removeEventListener("focus", handler, true);
    };
  }, [enabled, mounted, containers]);
}
__name(useFocusTrap, "useFocusTrap");
var interactables = new Set();
var originals = new Map();
function inert(element) {
  element.setAttribute("aria-hidden", "true");
  element.inert = true;
}
__name(inert, "inert");
function restore(element) {
  var original = originals.get(element);
  if (!original)
    return;
  if (original["aria-hidden"] === null)
    element.removeAttribute("aria-hidden");
  else
    element.setAttribute("aria-hidden", original["aria-hidden"]);
  element.inert = original.inert;
}
__name(restore, "restore");
function useInertOthers(container, enabled) {
  if (enabled === void 0) {
    enabled = true;
  }
  useIsoMorphicEffect(function() {
    if (!enabled)
      return;
    if (!container.current)
      return;
    var element = container.current;
    interactables.add(element);
    for (var _iterator = _createForOfIteratorHelperLoose(originals.keys()), _step; !(_step = _iterator()).done; ) {
      var original = _step.value;
      if (original.contains(element)) {
        restore(original);
        originals["delete"](original);
      }
    }
    document.querySelectorAll("body > *").forEach(function(child) {
      if (!(child instanceof HTMLElement))
        return;
      for (var _iterator2 = _createForOfIteratorHelperLoose(interactables), _step2; !(_step2 = _iterator2()).done; ) {
        var interactable = _step2.value;
        if (child.contains(interactable))
          return;
      }
      if (interactables.size === 1) {
        originals.set(child, {
          "aria-hidden": child.getAttribute("aria-hidden"),
          inert: child.inert
        });
        inert(child);
      }
    });
    return function() {
      interactables["delete"](element);
      if (interactables.size > 0) {
        document.querySelectorAll("body > *").forEach(function(child) {
          if (!(child instanceof HTMLElement))
            return;
          if (originals.has(child))
            return;
          for (var _iterator3 = _createForOfIteratorHelperLoose(interactables), _step3; !(_step3 = _iterator3()).done; ) {
            var interactable = _step3.value;
            if (child.contains(interactable))
              return;
          }
          originals.set(child, {
            "aria-hidden": child.getAttribute("aria-hidden"),
            inert: child.inert
          });
          inert(child);
        });
      } else {
        for (var _iterator4 = _createForOfIteratorHelperLoose(originals.keys()), _step4; !(_step4 = _iterator4()).done; ) {
          var _element = _step4.value;
          restore(_element);
          originals["delete"](_element);
        }
      }
    };
  }, [enabled]);
}
__name(useInertOthers, "useInertOthers");
var StackContext = (0, import_react.createContext)(function() {
});
StackContext.displayName = "StackContext";
var StackMessage;
(function(StackMessage2) {
  StackMessage2[StackMessage2["AddElement"] = 0] = "AddElement";
  StackMessage2[StackMessage2["RemoveElement"] = 1] = "RemoveElement";
})(StackMessage || (StackMessage = {}));
function useStackContext() {
  return (0, import_react.useContext)(StackContext);
}
__name(useStackContext, "useStackContext");
function useElemenStack(element) {
  var notify = useStackContext();
  useIsoMorphicEffect(function() {
    if (!element)
      return;
    notify(StackMessage.AddElement, element);
    return function() {
      return notify(StackMessage.RemoveElement, element);
    };
  }, [element]);
}
__name(useElemenStack, "useElemenStack");
function StackProvider(_ref) {
  var children = _ref.children, onUpdate = _ref.onUpdate;
  var parentUpdate = useStackContext();
  var notify = (0, import_react.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    onUpdate == null ? void 0 : onUpdate.apply(void 0, args);
    parentUpdate.apply(void 0, args);
  }, [parentUpdate, onUpdate]);
  return import_react.default.createElement(StackContext.Provider, {
    value: notify
  }, children);
}
__name(StackProvider, "StackProvider");
var DEFAULT_PORTAL_TAG = import_react.Fragment;
function Portal(props) {
  var _useState = (0, import_react.useState)(function() {
    if (typeof window === "undefined")
      return null;
    var existingRoot = document.getElementById("headlessui-portal-root");
    if (existingRoot)
      return existingRoot;
    var root = document.createElement("div");
    root.setAttribute("id", "headlessui-portal-root");
    return document.body.appendChild(root);
  }), target = _useState[0];
  var _useState2 = (0, import_react.useState)(function() {
    return typeof window === "undefined" ? null : document.createElement("div");
  }), element = _useState2[0];
  useElemenStack(element);
  useIsoMorphicEffect(function() {
    if (!target)
      return;
    if (!element)
      return;
    target.appendChild(element);
    return function() {
      if (!target)
        return;
      if (!element)
        return;
      target.removeChild(element);
      if (target.childNodes.length <= 0)
        document.body.removeChild(target);
    };
  }, [target, element]);
  return import_react.default.createElement(StackProvider, null, !target || !element ? null : (0, import_react_dom.createPortal)(render(props, {}, DEFAULT_PORTAL_TAG), element));
}
__name(Portal, "Portal");
var _reducers;
var DialogStates;
(function(DialogStates2) {
  DialogStates2[DialogStates2["Open"] = 0] = "Open";
  DialogStates2[DialogStates2["Closed"] = 1] = "Closed";
})(DialogStates || (DialogStates = {}));
var ActionTypes;
(function(ActionTypes2) {
  ActionTypes2[ActionTypes2["SetTitleId"] = 0] = "SetTitleId";
  ActionTypes2[ActionTypes2["SetDescriptionId"] = 1] = "SetDescriptionId";
})(ActionTypes || (ActionTypes = {}));
var reducers = (_reducers = {}, _reducers[ActionTypes.SetTitleId] = function(state2, action) {
  if (state2.titleId === action.id)
    return state2;
  return _extends({}, state2, {
    titleId: action.id
  });
}, _reducers[ActionTypes.SetDescriptionId] = function(state2, action) {
  if (state2.descriptionId === action.id)
    return state2;
  return _extends({}, state2, {
    descriptionId: action.id
  });
}, _reducers);
var DialogContext = (0, import_react.createContext)(null);
DialogContext.displayName = "DialogContext";
function useDialogContext(component) {
  var context = (0, import_react.useContext)(DialogContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <" + Dialog2.displayName + " /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, useDialogContext);
    throw err;
  }
  return context;
}
__name(useDialogContext, "useDialogContext");
function stateReducer(state2, action) {
  return match(action.type, reducers, state2, action);
}
__name(stateReducer, "stateReducer");
var DEFAULT_DIALOG_TAG = "div";
var DialogRenderFeatures = Features.RenderStrategy | Features.Static;
var DialogRoot = forwardRefWithAs(/* @__PURE__ */ __name(function Dialog(props, ref) {
  var open = props.open, onClose = props.onClose, initialFocus = props.initialFocus, rest = _objectWithoutPropertiesLoose(props, ["open", "onClose", "initialFocus"]);
  var containers = (0, import_react.useRef)(new Set());
  var internalDialogRef = (0, import_react.useRef)(null);
  var dialogRef = useSyncRefs(internalDialogRef, ref);
  var hasOpen = props.hasOwnProperty("open");
  var hasOnClose = props.hasOwnProperty("onClose");
  if (!hasOpen && !hasOnClose) {
    throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");
  }
  if (!hasOpen) {
    throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");
  }
  if (!hasOnClose) {
    throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");
  }
  if (typeof open !== "boolean") {
    throw new Error("You provided an `open` prop to the `Dialog`, but the value is not a boolean. Received: " + open);
  }
  if (typeof onClose !== "function") {
    throw new Error("You provided an `onClose` prop to the `Dialog`, but the value is not a function. Received: " + onClose);
  }
  var dialogState = open ? DialogStates.Open : DialogStates.Closed;
  var _useReducer = (0, import_react.useReducer)(stateReducer, {
    titleId: null,
    descriptionId: null
  }), state2 = _useReducer[0], dispatch = _useReducer[1];
  var close = (0, import_react.useCallback)(function() {
    return onClose(false);
  }, [onClose]);
  var setTitleId = (0, import_react.useCallback)(function(id3) {
    return dispatch({
      type: ActionTypes.SetTitleId,
      id: id3
    });
  }, [dispatch]);
  var setDescriptionId = (0, import_react.useCallback)(function(id3) {
    return dispatch({
      type: ActionTypes.SetDescriptionId,
      id: id3
    });
  }, [dispatch]);
  (0, import_react.useEffect)(function() {
    function handler(event) {
      var target = event.target;
      if (dialogState !== DialogStates.Open)
        return;
      if (containers.current.size !== 1)
        return;
      if (contains(containers.current, target))
        return;
      close();
    }
    __name(handler, "handler");
    window.addEventListener("mousedown", handler);
    return function() {
      return window.removeEventListener("mousedown", handler);
    };
  }, [dialogState, containers, close]);
  (0, import_react.useEffect)(function() {
    function handler(event) {
      if (event.key !== Keys.Escape)
        return;
      if (dialogState !== DialogStates.Open)
        return;
      if (containers.current.size > 1)
        return;
      close();
    }
    __name(handler, "handler");
    window.addEventListener("keydown", handler);
    return function() {
      return window.removeEventListener("keydown", handler);
    };
  }, [close, dialogState]);
  (0, import_react.useEffect)(function() {
    if (dialogState !== DialogStates.Open)
      return;
    var overflow = document.documentElement.style.overflow;
    var paddingRight = document.documentElement.style.paddingRight;
    var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    document.documentElement.style.overflow = "hidden";
    document.documentElement.style.paddingRight = scrollbarWidth + "px";
    return function() {
      document.documentElement.style.overflow = overflow;
      document.documentElement.style.paddingRight = paddingRight;
    };
  }, [dialogState]);
  (0, import_react.useEffect)(function() {
    if (dialogState !== DialogStates.Open)
      return;
    if (!internalDialogRef.current)
      return;
    var observer = new IntersectionObserver(function(entries) {
      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done; ) {
        var entry = _step.value;
        if (entry.boundingClientRect.x === 0 && entry.boundingClientRect.y === 0 && entry.boundingClientRect.width === 0 && entry.boundingClientRect.height === 0) {
          close();
        }
      }
    });
    observer.observe(internalDialogRef.current);
    return function() {
      return observer.disconnect();
    };
  }, [dialogState, internalDialogRef, close]);
  var enabled = props["static"] ? true : dialogState === DialogStates.Open;
  useFocusTrap(containers, enabled, {
    initialFocus
  });
  useInertOthers(internalDialogRef, enabled);
  var id2 = "headlessui-dialog-" + useId();
  var contextBag = (0, import_react.useMemo)(function() {
    return [{
      dialogState,
      close,
      setTitleId,
      setDescriptionId
    }, state2];
  }, [dialogState, state2, close, setTitleId, setDescriptionId]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: dialogState === DialogStates.Open
    };
  }, [dialogState]);
  var propsWeControl = {
    ref: dialogRef,
    id: id2,
    role: "dialog",
    "aria-modal": dialogState === DialogStates.Open ? true : void 0,
    "aria-labelledby": state2.titleId,
    "aria-describedby": state2.descriptionId
  };
  var passthroughProps = rest;
  return import_react.default.createElement(StackProvider, {
    onUpdate: /* @__PURE__ */ __name(function onUpdate(message, element) {
      var _match;
      return match(message, (_match = {}, _match[StackMessage.AddElement] = function() {
        containers.current.add(element);
      }, _match[StackMessage.RemoveElement] = function() {
        containers.current["delete"](element);
      }, _match));
    }, "onUpdate")
  }, import_react.default.createElement(Portal, null, import_react.default.createElement(DialogContext.Provider, {
    value: contextBag
  }, render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_DIALOG_TAG, DialogRenderFeatures, dialogState === DialogStates.Open))));
}, "Dialog"));
var DEFAULT_OVERLAY_TAG = "div";
var Overlay = forwardRefWithAs(/* @__PURE__ */ __name(function Overlay2(props, ref) {
  var _useDialogContext = useDialogContext([Dialog2.displayName, Overlay2.name].join(".")), _useDialogContext$ = _useDialogContext[0], dialogState = _useDialogContext$.dialogState, close = _useDialogContext$.close;
  var overlayRef = useSyncRefs(ref);
  var id2 = "headlessui-dialog-overlay-" + useId();
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return event.preventDefault();
    close();
  }, [close]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: dialogState === DialogStates.Open
    };
  }, [dialogState]);
  var propsWeControl = {
    ref: overlayRef,
    id: id2,
    "aria-hidden": true,
    onClick: handleClick
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_OVERLAY_TAG);
}, "Overlay"));
var DEFAULT_TITLE_TAG = "h2";
function Title(props) {
  var _useDialogContext2 = useDialogContext([Dialog2.displayName, Title.name].join(".")), _useDialogContext2$ = _useDialogContext2[0], dialogState = _useDialogContext2$.dialogState, setTitleId = _useDialogContext2$.setTitleId;
  var id2 = "headlessui-dialog-title-" + useId();
  (0, import_react.useEffect)(function() {
    setTitleId(id2);
    return function() {
      return setTitleId(null);
    };
  }, [id2, setTitleId]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: dialogState === DialogStates.Open
    };
  }, [dialogState]);
  var propsWeControl = {
    id: id2
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_TITLE_TAG);
}
__name(Title, "Title");
var DEFAULT_DESCRIPTION_TAG = "p";
function Description(props) {
  var _useDialogContext3 = useDialogContext([Dialog2.displayName, Description.name].join(".")), _useDialogContext3$ = _useDialogContext3[0], dialogState = _useDialogContext3$.dialogState, setDescriptionId = _useDialogContext3$.setDescriptionId;
  var id2 = "headlessui-dialog-description-" + useId();
  (0, import_react.useEffect)(function() {
    setDescriptionId(id2);
    return function() {
      return setDescriptionId(null);
    };
  }, [id2, setDescriptionId]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: dialogState === DialogStates.Open
    };
  }, [dialogState]);
  var propsWeControl = {
    id: id2
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_DESCRIPTION_TAG);
}
__name(Description, "Description");
var Dialog2 = Object.assign(DialogRoot, {
  Overlay,
  Title,
  Description
});
var _reducers$1;
var DisclosureStates;
(function(DisclosureStates2) {
  DisclosureStates2[DisclosureStates2["Open"] = 0] = "Open";
  DisclosureStates2[DisclosureStates2["Closed"] = 1] = "Closed";
})(DisclosureStates || (DisclosureStates = {}));
var ActionTypes$1;
(function(ActionTypes2) {
  ActionTypes2[ActionTypes2["ToggleDisclosure"] = 0] = "ToggleDisclosure";
  ActionTypes2[ActionTypes2["SetButtonId"] = 1] = "SetButtonId";
  ActionTypes2[ActionTypes2["SetPanelId"] = 2] = "SetPanelId";
  ActionTypes2[ActionTypes2["LinkPanel"] = 3] = "LinkPanel";
  ActionTypes2[ActionTypes2["UnlinkPanel"] = 4] = "UnlinkPanel";
})(ActionTypes$1 || (ActionTypes$1 = {}));
var reducers$1 = (_reducers$1 = {}, _reducers$1[ActionTypes$1.ToggleDisclosure] = function(state2) {
  var _match;
  return _extends({}, state2, {
    disclosureState: match(state2.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))
  });
}, _reducers$1[ActionTypes$1.LinkPanel] = function(state2) {
  if (state2.linkedPanel === true)
    return state2;
  return _extends({}, state2, {
    linkedPanel: true
  });
}, _reducers$1[ActionTypes$1.UnlinkPanel] = function(state2) {
  if (state2.linkedPanel === false)
    return state2;
  return _extends({}, state2, {
    linkedPanel: false
  });
}, _reducers$1[ActionTypes$1.SetButtonId] = function(state2, action) {
  if (state2.buttonId === action.buttonId)
    return state2;
  return _extends({}, state2, {
    buttonId: action.buttonId
  });
}, _reducers$1[ActionTypes$1.SetPanelId] = function(state2, action) {
  if (state2.panelId === action.panelId)
    return state2;
  return _extends({}, state2, {
    panelId: action.panelId
  });
}, _reducers$1);
var DisclosureContext = (0, import_react.createContext)(null);
DisclosureContext.displayName = "DisclosureContext";
function useDisclosureContext(component) {
  var context = (0, import_react.useContext)(DisclosureContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <" + Disclosure.name + " /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, useDisclosureContext);
    throw err;
  }
  return context;
}
__name(useDisclosureContext, "useDisclosureContext");
function stateReducer$1(state2, action) {
  return match(action.type, reducers$1, state2, action);
}
__name(stateReducer$1, "stateReducer$1");
var DEFAULT_DISCLOSURE_TAG = import_react.Fragment;
function Disclosure(props) {
  var buttonId = "headlessui-disclosure-button-" + useId();
  var panelId = "headlessui-disclosure-panel-" + useId();
  var reducerBag = (0, import_react.useReducer)(stateReducer$1, {
    disclosureState: DisclosureStates.Closed,
    linkedPanel: false,
    buttonId,
    panelId
  });
  var disclosureState = reducerBag[0].disclosureState, dispatch = reducerBag[1];
  (0, import_react.useEffect)(function() {
    return dispatch({
      type: ActionTypes$1.SetButtonId,
      buttonId
    });
  }, [buttonId, dispatch]);
  (0, import_react.useEffect)(function() {
    return dispatch({
      type: ActionTypes$1.SetPanelId,
      panelId
    });
  }, [panelId, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: disclosureState === DisclosureStates.Open
    };
  }, [disclosureState]);
  return import_react.default.createElement(DisclosureContext.Provider, {
    value: reducerBag
  }, render(props, propsBag, DEFAULT_DISCLOSURE_TAG));
}
__name(Disclosure, "Disclosure");
var DEFAULT_BUTTON_TAG = "button";
var Button = forwardRefWithAs(/* @__PURE__ */ __name(function Button2(props, ref) {
  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button2.name].join(".")), state2 = _useDisclosureContext[0], dispatch = _useDisclosureContext[1];
  var buttonRef = useSyncRefs(ref);
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    switch (event.key) {
      case Keys.Space:
      case Keys.Enter:
        event.preventDefault();
        dispatch({
          type: ActionTypes$1.ToggleDisclosure
        });
        break;
    }
  }, [dispatch]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return;
    if (props.disabled)
      return;
    dispatch({
      type: ActionTypes$1.ToggleDisclosure
    });
  }, [dispatch, props.disabled]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.disclosureState === DisclosureStates.Open
    };
  }, [state2]);
  var passthroughProps = props;
  var propsWeControl = {
    ref: buttonRef,
    id: state2.buttonId,
    type: "button",
    "aria-expanded": state2.disclosureState === DisclosureStates.Open ? true : void 0,
    "aria-controls": state2.linkedPanel ? state2.panelId : void 0,
    onKeyDown: handleKeyDown,
    onClick: handleClick
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG);
}, "Button"));
var DEFAULT_PANEL_TAG = "div";
var PanelRenderFeatures = Features.RenderStrategy | Features.Static;
var Panel = forwardRefWithAs(/* @__PURE__ */ __name(function Panel2(props, ref) {
  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel2.name].join(".")), state2 = _useDisclosureContext2[0], dispatch = _useDisclosureContext2[1];
  var panelRef = useSyncRefs(ref, function() {
    if (state2.linkedPanel)
      return;
    dispatch({
      type: ActionTypes$1.LinkPanel
    });
  });
  (0, import_react.useEffect)(function() {
    return function() {
      return dispatch({
        type: ActionTypes$1.UnlinkPanel
      });
    };
  }, [dispatch]);
  (0, import_react.useEffect)(function() {
    var _props$unmount;
    if (state2.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {
      dispatch({
        type: ActionTypes$1.UnlinkPanel
      });
    }
  }, [state2.disclosureState, props.unmount, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.disclosureState === DisclosureStates.Open
    };
  }, [state2]);
  var propsWeControl = {
    ref: panelRef,
    id: state2.panelId
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_PANEL_TAG, PanelRenderFeatures, state2.disclosureState === DisclosureStates.Open);
}, "Panel"));
Disclosure.Button = Button;
Disclosure.Panel = Panel;
var DEFAULT_FOCUS_TRAP_TAG = "div";
function FocusTrap(props) {
  var containers = (0, import_react.useRef)(new Set());
  var initialFocus = props.initialFocus, passthroughProps = _objectWithoutPropertiesLoose(props, ["initialFocus"]);
  useFocusTrap(containers, true, {
    initialFocus
  });
  var propsWeControl = {
    ref: /* @__PURE__ */ __name(function ref(element) {
      if (!element)
        return;
      containers.current.add(element);
    }, "ref")
  };
  return render(_extends({}, passthroughProps, propsWeControl), {}, DEFAULT_FOCUS_TRAP_TAG);
}
__name(FocusTrap, "FocusTrap");
function disposables() {
  var disposables2 = [];
  var api = {
    requestAnimationFrame: function(_requestAnimationFrame) {
      function requestAnimationFrame2() {
        return _requestAnimationFrame.apply(this, arguments);
      }
      __name(requestAnimationFrame2, "requestAnimationFrame");
      requestAnimationFrame2.toString = function() {
        return _requestAnimationFrame.toString();
      };
      return requestAnimationFrame2;
    }(function() {
      var raf = requestAnimationFrame.apply(void 0, arguments);
      api.add(function() {
        return cancelAnimationFrame(raf);
      });
    }),
    nextFrame: /* @__PURE__ */ __name(function nextFrame() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      api.requestAnimationFrame(function() {
        api.requestAnimationFrame.apply(api, args);
      });
    }, "nextFrame"),
    setTimeout: function(_setTimeout) {
      function setTimeout2() {
        return _setTimeout.apply(this, arguments);
      }
      __name(setTimeout2, "setTimeout");
      setTimeout2.toString = function() {
        return _setTimeout.toString();
      };
      return setTimeout2;
    }(function() {
      var timer = setTimeout.apply(void 0, arguments);
      api.add(function() {
        return clearTimeout(timer);
      });
    }),
    add: /* @__PURE__ */ __name(function add(cb) {
      disposables2.push(cb);
    }, "add"),
    dispose: /* @__PURE__ */ __name(function dispose() {
      for (var _iterator = _createForOfIteratorHelperLoose(disposables2.splice(0)), _step; !(_step = _iterator()).done; ) {
        var dispose2 = _step.value;
        dispose2();
      }
    }, "dispose")
  };
  return api;
}
__name(disposables, "disposables");
function useDisposables() {
  var _useState = (0, import_react.useState)(disposables), d = _useState[0];
  (0, import_react.useEffect)(function() {
    return function() {
      return d.dispose();
    };
  }, [d]);
  return d;
}
__name(useDisposables, "useDisposables");
function useComputed(cb, dependencies) {
  var _useState = (0, import_react.useState)(cb), value = _useState[0], setValue = _useState[1];
  var cbRef = (0, import_react.useRef)(cb);
  useIsoMorphicEffect(function() {
    cbRef.current = cb;
  }, [cb]);
  useIsoMorphicEffect(function() {
    return setValue(cbRef.current);
  }, [cbRef, setValue].concat(dependencies));
  return value;
}
__name(useComputed, "useComputed");
function assertNever(x) {
  throw new Error("Unexpected object: " + x);
}
__name(assertNever, "assertNever");
var Focus$1;
(function(Focus2) {
  Focus2[Focus2["First"] = 0] = "First";
  Focus2[Focus2["Previous"] = 1] = "Previous";
  Focus2[Focus2["Next"] = 2] = "Next";
  Focus2[Focus2["Last"] = 3] = "Last";
  Focus2[Focus2["Specific"] = 4] = "Specific";
  Focus2[Focus2["Nothing"] = 5] = "Nothing";
})(Focus$1 || (Focus$1 = {}));
function calculateActiveIndex(action, resolvers) {
  var items = resolvers.resolveItems();
  if (items.length <= 0)
    return null;
  var currentActiveIndex = resolvers.resolveActiveIndex();
  var activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;
  var nextActiveIndex = function() {
    switch (action.focus) {
      case Focus$1.First:
        return items.findIndex(function(item) {
          return !resolvers.resolveDisabled(item);
        });
      case Focus$1.Previous: {
        var idx = items.slice().reverse().findIndex(function(item, idx2, all) {
          if (activeIndex !== -1 && all.length - idx2 - 1 >= activeIndex)
            return false;
          return !resolvers.resolveDisabled(item);
        });
        if (idx === -1)
          return idx;
        return items.length - 1 - idx;
      }
      case Focus$1.Next:
        return items.findIndex(function(item, idx2) {
          if (idx2 <= activeIndex)
            return false;
          return !resolvers.resolveDisabled(item);
        });
      case Focus$1.Last: {
        var _idx = items.slice().reverse().findIndex(function(item) {
          return !resolvers.resolveDisabled(item);
        });
        if (_idx === -1)
          return _idx;
        return items.length - 1 - _idx;
      }
      case Focus$1.Specific:
        return items.findIndex(function(item) {
          return resolvers.resolveId(item) === action.id;
        });
      case Focus$1.Nothing:
        return null;
      default:
        assertNever(action);
    }
  }();
  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;
}
__name(calculateActiveIndex, "calculateActiveIndex");
var _reducers$2;
var ListboxStates;
(function(ListboxStates2) {
  ListboxStates2[ListboxStates2["Open"] = 0] = "Open";
  ListboxStates2[ListboxStates2["Closed"] = 1] = "Closed";
})(ListboxStates || (ListboxStates = {}));
var ActionTypes$2;
(function(ActionTypes2) {
  ActionTypes2[ActionTypes2["OpenListbox"] = 0] = "OpenListbox";
  ActionTypes2[ActionTypes2["CloseListbox"] = 1] = "CloseListbox";
  ActionTypes2[ActionTypes2["SetDisabled"] = 2] = "SetDisabled";
  ActionTypes2[ActionTypes2["GoToOption"] = 3] = "GoToOption";
  ActionTypes2[ActionTypes2["Search"] = 4] = "Search";
  ActionTypes2[ActionTypes2["ClearSearch"] = 5] = "ClearSearch";
  ActionTypes2[ActionTypes2["RegisterOption"] = 6] = "RegisterOption";
  ActionTypes2[ActionTypes2["UnregisterOption"] = 7] = "UnregisterOption";
})(ActionTypes$2 || (ActionTypes$2 = {}));
var reducers$2 = (_reducers$2 = {}, _reducers$2[ActionTypes$2.CloseListbox] = function(state2) {
  if (state2.disabled)
    return state2;
  if (state2.listboxState === ListboxStates.Closed)
    return state2;
  return _extends({}, state2, {
    activeOptionIndex: null,
    listboxState: ListboxStates.Closed
  });
}, _reducers$2[ActionTypes$2.OpenListbox] = function(state2) {
  if (state2.disabled)
    return state2;
  if (state2.listboxState === ListboxStates.Open)
    return state2;
  return _extends({}, state2, {
    listboxState: ListboxStates.Open
  });
}, _reducers$2[ActionTypes$2.SetDisabled] = function(state2, action) {
  if (state2.disabled === action.disabled)
    return state2;
  return _extends({}, state2, {
    disabled: action.disabled
  });
}, _reducers$2[ActionTypes$2.GoToOption] = function(state2, action) {
  if (state2.disabled)
    return state2;
  if (state2.listboxState === ListboxStates.Closed)
    return state2;
  var activeOptionIndex = calculateActiveIndex(action, {
    resolveItems: /* @__PURE__ */ __name(function resolveItems() {
      return state2.options;
    }, "resolveItems"),
    resolveActiveIndex: /* @__PURE__ */ __name(function resolveActiveIndex() {
      return state2.activeOptionIndex;
    }, "resolveActiveIndex"),
    resolveId: /* @__PURE__ */ __name(function resolveId(item) {
      return item.id;
    }, "resolveId"),
    resolveDisabled: /* @__PURE__ */ __name(function resolveDisabled(item) {
      return item.dataRef.current.disabled;
    }, "resolveDisabled")
  });
  if (state2.searchQuery === "" && state2.activeOptionIndex === activeOptionIndex)
    return state2;
  return _extends({}, state2, {
    searchQuery: "",
    activeOptionIndex
  });
}, _reducers$2[ActionTypes$2.Search] = function(state2, action) {
  if (state2.disabled)
    return state2;
  if (state2.listboxState === ListboxStates.Closed)
    return state2;
  var searchQuery = state2.searchQuery + action.value;
  var match2 = state2.options.findIndex(function(option) {
    var _option$dataRef$curre;
    return !option.dataRef.current.disabled && ((_option$dataRef$curre = option.dataRef.current.textValue) == null ? void 0 : _option$dataRef$curre.startsWith(searchQuery));
  });
  if (match2 === -1 || match2 === state2.activeOptionIndex)
    return _extends({}, state2, {
      searchQuery
    });
  return _extends({}, state2, {
    searchQuery,
    activeOptionIndex: match2
  });
}, _reducers$2[ActionTypes$2.ClearSearch] = function(state2) {
  if (state2.disabled)
    return state2;
  if (state2.listboxState === ListboxStates.Closed)
    return state2;
  if (state2.searchQuery === "")
    return state2;
  return _extends({}, state2, {
    searchQuery: ""
  });
}, _reducers$2[ActionTypes$2.RegisterOption] = function(state2, action) {
  return _extends({}, state2, {
    options: [].concat(state2.options, [{
      id: action.id,
      dataRef: action.dataRef
    }])
  });
}, _reducers$2[ActionTypes$2.UnregisterOption] = function(state2, action) {
  var nextOptions = state2.options.slice();
  var currentActiveOption = state2.activeOptionIndex !== null ? nextOptions[state2.activeOptionIndex] : null;
  var idx = nextOptions.findIndex(function(a) {
    return a.id === action.id;
  });
  if (idx !== -1)
    nextOptions.splice(idx, 1);
  return _extends({}, state2, {
    options: nextOptions,
    activeOptionIndex: function() {
      if (idx === state2.activeOptionIndex)
        return null;
      if (currentActiveOption === null)
        return null;
      return nextOptions.indexOf(currentActiveOption);
    }()
  });
}, _reducers$2);
var ListboxContext = (0, import_react.createContext)(null);
ListboxContext.displayName = "ListboxContext";
function useListboxContext(component) {
  var context = (0, import_react.useContext)(ListboxContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <" + Listbox.name + " /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, useListboxContext);
    throw err;
  }
  return context;
}
__name(useListboxContext, "useListboxContext");
function stateReducer$2(state2, action) {
  return match(action.type, reducers$2, state2, action);
}
__name(stateReducer$2, "stateReducer$2");
var DEFAULT_LISTBOX_TAG = import_react.Fragment;
function Listbox(props) {
  var value = props.value, onChange = props.onChange, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, passThroughProps = _objectWithoutPropertiesLoose(props, ["value", "onChange", "disabled"]);
  var reducerBag = (0, import_react.useReducer)(stateReducer$2, {
    listboxState: ListboxStates.Closed,
    propsRef: {
      current: {
        value,
        onChange
      }
    },
    labelRef: (0, import_react.createRef)(),
    buttonRef: (0, import_react.createRef)(),
    optionsRef: (0, import_react.createRef)(),
    disabled,
    options: [],
    searchQuery: "",
    activeOptionIndex: null
  });
  var _reducerBag$ = reducerBag[0], listboxState = _reducerBag$.listboxState, propsRef = _reducerBag$.propsRef, optionsRef = _reducerBag$.optionsRef, buttonRef = _reducerBag$.buttonRef, dispatch = reducerBag[1];
  useIsoMorphicEffect(function() {
    propsRef.current.value = value;
  }, [value, propsRef]);
  useIsoMorphicEffect(function() {
    propsRef.current.onChange = onChange;
  }, [onChange, propsRef]);
  useIsoMorphicEffect(function() {
    return dispatch({
      type: ActionTypes$2.SetDisabled,
      disabled
    });
  }, [disabled]);
  (0, import_react.useEffect)(function() {
    function handler(event) {
      var _buttonRef$current, _optionsRef$current;
      var target = event.target;
      if (listboxState !== ListboxStates.Open)
        return;
      if ((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(target))
        return;
      if ((_optionsRef$current = optionsRef.current) == null ? void 0 : _optionsRef$current.contains(target))
        return;
      dispatch({
        type: ActionTypes$2.CloseListbox
      });
      if (!isFocusableElement(target, FocusableMode.Loose)) {
        var _buttonRef$current2;
        event.preventDefault();
        (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();
      }
    }
    __name(handler, "handler");
    window.addEventListener("mousedown", handler);
    return function() {
      return window.removeEventListener("mousedown", handler);
    };
  }, [listboxState, buttonRef, optionsRef, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: listboxState === ListboxStates.Open,
      disabled
    };
  }, [listboxState, disabled]);
  return import_react.default.createElement(ListboxContext.Provider, {
    value: reducerBag
  }, render(passThroughProps, propsBag, DEFAULT_LISTBOX_TAG));
}
__name(Listbox, "Listbox");
var DEFAULT_BUTTON_TAG$1 = "button";
var Button$1 = forwardRefWithAs(/* @__PURE__ */ __name(function Button3(props, ref) {
  var _state$optionsRef$cur;
  var _useListboxContext = useListboxContext([Listbox.name, Button3.name].join(".")), state2 = _useListboxContext[0], dispatch = _useListboxContext[1];
  var buttonRef = useSyncRefs(state2.buttonRef, ref);
  var id2 = "headlessui-listbox-button-" + useId();
  var d = useDisposables();
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    switch (event.key) {
      case Keys.Space:
      case Keys.Enter:
      case Keys.ArrowDown:
        event.preventDefault();
        dispatch({
          type: ActionTypes$2.OpenListbox
        });
        d.nextFrame(function() {
          if (!state2.propsRef.current.value)
            dispatch({
              type: ActionTypes$2.GoToOption,
              focus: Focus$1.First
            });
        });
        break;
      case Keys.ArrowUp:
        event.preventDefault();
        dispatch({
          type: ActionTypes$2.OpenListbox
        });
        d.nextFrame(function() {
          if (!state2.propsRef.current.value)
            dispatch({
              type: ActionTypes$2.GoToOption,
              focus: Focus$1.Last
            });
        });
        break;
    }
  }, [dispatch, state2, d]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return event.preventDefault();
    if (state2.listboxState === ListboxStates.Open) {
      dispatch({
        type: ActionTypes$2.CloseListbox
      });
      d.nextFrame(function() {
        var _state$buttonRef$curr;
        return (_state$buttonRef$curr = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr.focus({
          preventScroll: true
        });
      });
    } else {
      event.preventDefault();
      dispatch({
        type: ActionTypes$2.OpenListbox
      });
    }
  }, [dispatch, d, state2]);
  var labelledby = useComputed(function() {
    if (!state2.labelRef.current)
      return void 0;
    return [state2.labelRef.current.id, id2].join(" ");
  }, [state2.labelRef.current, id2]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.listboxState === ListboxStates.Open,
      disabled: state2.disabled
    };
  }, [state2]);
  var passthroughProps = props;
  var propsWeControl = {
    ref: buttonRef,
    id: id2,
    type: "button",
    "aria-haspopup": true,
    "aria-controls": (_state$optionsRef$cur = state2.optionsRef.current) == null ? void 0 : _state$optionsRef$cur.id,
    "aria-expanded": state2.listboxState === ListboxStates.Open ? true : void 0,
    "aria-labelledby": labelledby,
    disabled: state2.disabled,
    onKeyDown: handleKeyDown,
    onClick: handleClick
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG$1);
}, "Button"));
var DEFAULT_LABEL_TAG = "label";
function Label(props) {
  var _useListboxContext2 = useListboxContext([Listbox.name, Label.name].join(".")), state2 = _useListboxContext2[0];
  var id2 = "headlessui-listbox-label-" + useId();
  var handleClick = (0, import_react.useCallback)(function() {
    var _state$buttonRef$curr2;
    return (_state$buttonRef$curr2 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr2.focus({
      preventScroll: true
    });
  }, [state2.buttonRef]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.listboxState === ListboxStates.Open,
      disabled: state2.disabled
    };
  }, [state2]);
  var propsWeControl = {
    ref: state2.labelRef,
    id: id2,
    onClick: handleClick
  };
  return render(_extends({}, props, propsWeControl), propsBag, DEFAULT_LABEL_TAG);
}
__name(Label, "Label");
var DEFAULT_OPTIONS_TAG = "ul";
var OptionsRenderFeatures = Features.RenderStrategy | Features.Static;
var Options = forwardRefWithAs(/* @__PURE__ */ __name(function Options2(props, ref) {
  var _state$options$state$;
  var _useListboxContext3 = useListboxContext([Listbox.name, Options2.name].join(".")), state2 = _useListboxContext3[0], dispatch = _useListboxContext3[1];
  var optionsRef = useSyncRefs(state2.optionsRef, ref);
  var id2 = "headlessui-listbox-options-" + useId();
  var d = useDisposables();
  var searchDisposables = useDisposables();
  useIsoMorphicEffect(function() {
    var container = state2.optionsRef.current;
    if (!container)
      return;
    if (state2.listboxState !== ListboxStates.Open)
      return;
    if (container === document.activeElement)
      return;
    container.focus({
      preventScroll: true
    });
  }, [state2.listboxState, state2.optionsRef]);
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    searchDisposables.dispose();
    switch (event.key) {
      case Keys.Space:
        if (state2.searchQuery !== "") {
          event.preventDefault();
          event.stopPropagation();
          return dispatch({
            type: ActionTypes$2.Search,
            value: event.key
          });
        }
      case Keys.Enter:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$2.CloseListbox
        });
        if (state2.activeOptionIndex !== null) {
          var dataRef = state2.options[state2.activeOptionIndex].dataRef;
          state2.propsRef.current.onChange(dataRef.current.value);
        }
        disposables().nextFrame(function() {
          var _state$buttonRef$curr3;
          return (_state$buttonRef$curr3 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr3.focus({
            preventScroll: true
          });
        });
        break;
      case Keys.ArrowDown:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$2.GoToOption,
          focus: Focus$1.Next
        });
      case Keys.ArrowUp:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$2.GoToOption,
          focus: Focus$1.Previous
        });
      case Keys.Home:
      case Keys.PageUp:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$2.GoToOption,
          focus: Focus$1.First
        });
      case Keys.End:
      case Keys.PageDown:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$2.GoToOption,
          focus: Focus$1.Last
        });
      case Keys.Escape:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$2.CloseListbox
        });
        return d.nextFrame(function() {
          var _state$buttonRef$curr4;
          return (_state$buttonRef$curr4 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr4.focus({
            preventScroll: true
          });
        });
      case Keys.Tab:
        event.preventDefault();
        event.stopPropagation();
        break;
      default:
        if (event.key.length === 1) {
          dispatch({
            type: ActionTypes$2.Search,
            value: event.key
          });
          searchDisposables.setTimeout(function() {
            return dispatch({
              type: ActionTypes$2.ClearSearch
            });
          }, 350);
        }
        break;
    }
  }, [d, dispatch, searchDisposables, state2]);
  var labelledby = useComputed(function() {
    var _state$labelRef$curre, _state$labelRef$curre2, _state$buttonRef$curr5;
    return (_state$labelRef$curre = (_state$labelRef$curre2 = state2.labelRef.current) == null ? void 0 : _state$labelRef$curre2.id) != null ? _state$labelRef$curre : (_state$buttonRef$curr5 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr5.id;
  }, [state2.labelRef.current, state2.buttonRef.current]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.listboxState === ListboxStates.Open
    };
  }, [state2]);
  var propsWeControl = {
    "aria-activedescendant": state2.activeOptionIndex === null ? void 0 : (_state$options$state$ = state2.options[state2.activeOptionIndex]) == null ? void 0 : _state$options$state$.id,
    "aria-labelledby": labelledby,
    id: id2,
    onKeyDown: handleKeyDown,
    role: "listbox",
    tabIndex: 0,
    ref: optionsRef
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_OPTIONS_TAG, OptionsRenderFeatures, state2.listboxState === ListboxStates.Open);
}, "Options"));
var DEFAULT_OPTION_TAG = "li";
function Option(props) {
  var _props$disabled2 = props.disabled, disabled = _props$disabled2 === void 0 ? false : _props$disabled2, value = props.value, passthroughProps = _objectWithoutPropertiesLoose(props, ["disabled", "value"]);
  var _useListboxContext4 = useListboxContext([Listbox.name, Option.name].join(".")), state2 = _useListboxContext4[0], dispatch = _useListboxContext4[1];
  var id2 = "headlessui-listbox-option-" + useId();
  var active = state2.activeOptionIndex !== null ? state2.options[state2.activeOptionIndex].id === id2 : false;
  var selected = state2.propsRef.current.value === value;
  var bag = (0, import_react.useRef)({
    disabled,
    value
  });
  useIsoMorphicEffect(function() {
    bag.current.disabled = disabled;
  }, [bag, disabled]);
  useIsoMorphicEffect(function() {
    bag.current.value = value;
  }, [bag, value]);
  useIsoMorphicEffect(function() {
    var _document$getElementB, _document$getElementB2;
    bag.current.textValue = (_document$getElementB = document.getElementById(id2)) == null ? void 0 : (_document$getElementB2 = _document$getElementB.textContent) == null ? void 0 : _document$getElementB2.toLowerCase();
  }, [bag, id2]);
  var select = (0, import_react.useCallback)(function() {
    return state2.propsRef.current.onChange(value);
  }, [state2.propsRef, value]);
  useIsoMorphicEffect(function() {
    dispatch({
      type: ActionTypes$2.RegisterOption,
      id: id2,
      dataRef: bag
    });
    return function() {
      return dispatch({
        type: ActionTypes$2.UnregisterOption,
        id: id2
      });
    };
  }, [bag, id2]);
  useIsoMorphicEffect(function() {
    var _document$getElementB3;
    if (state2.listboxState !== ListboxStates.Open)
      return;
    if (!selected)
      return;
    dispatch({
      type: ActionTypes$2.GoToOption,
      focus: Focus$1.Specific,
      id: id2
    });
    (_document$getElementB3 = document.getElementById(id2)) == null ? void 0 : _document$getElementB3.focus == null ? void 0 : _document$getElementB3.focus();
  }, [state2.listboxState]);
  useIsoMorphicEffect(function() {
    if (state2.listboxState !== ListboxStates.Open)
      return;
    if (!active)
      return;
    var d = disposables();
    d.nextFrame(function() {
      var _document$getElementB4;
      return (_document$getElementB4 = document.getElementById(id2)) == null ? void 0 : _document$getElementB4.scrollIntoView == null ? void 0 : _document$getElementB4.scrollIntoView({
        block: "nearest"
      });
    });
    return d.dispose;
  }, [id2, active, state2.listboxState]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (disabled)
      return event.preventDefault();
    select();
    dispatch({
      type: ActionTypes$2.CloseListbox
    });
    disposables().nextFrame(function() {
      var _state$buttonRef$curr6;
      return (_state$buttonRef$curr6 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr6.focus({
        preventScroll: true
      });
    });
  }, [dispatch, state2.buttonRef, disabled, select]);
  var handleFocus = (0, import_react.useCallback)(function() {
    if (disabled)
      return dispatch({
        type: ActionTypes$2.GoToOption,
        focus: Focus$1.Nothing
      });
    dispatch({
      type: ActionTypes$2.GoToOption,
      focus: Focus$1.Specific,
      id: id2
    });
  }, [disabled, id2, dispatch]);
  var handleMove = (0, import_react.useCallback)(function() {
    if (disabled)
      return;
    if (active)
      return;
    dispatch({
      type: ActionTypes$2.GoToOption,
      focus: Focus$1.Specific,
      id: id2
    });
  }, [disabled, active, id2, dispatch]);
  var handleLeave = (0, import_react.useCallback)(function() {
    if (disabled)
      return;
    if (!active)
      return;
    dispatch({
      type: ActionTypes$2.GoToOption,
      focus: Focus$1.Nothing
    });
  }, [disabled, active, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      active,
      selected,
      disabled
    };
  }, [active, selected, disabled]);
  var propsWeControl = {
    id: id2,
    role: "option",
    tabIndex: -1,
    "aria-disabled": disabled === true ? true : void 0,
    "aria-selected": selected === true ? true : void 0,
    onClick: handleClick,
    onFocus: handleFocus,
    onPointerMove: handleMove,
    onMouseMove: handleMove,
    onPointerLeave: handleLeave,
    onMouseLeave: handleLeave
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_OPTION_TAG);
}
__name(Option, "Option");
Listbox.Button = Button$1;
Listbox.Label = Label;
Listbox.Options = Options;
Listbox.Option = Option;
var _reducers$3;
var MenuStates;
(function(MenuStates2) {
  MenuStates2[MenuStates2["Open"] = 0] = "Open";
  MenuStates2[MenuStates2["Closed"] = 1] = "Closed";
})(MenuStates || (MenuStates = {}));
var ActionTypes$3;
(function(ActionTypes2) {
  ActionTypes2[ActionTypes2["OpenMenu"] = 0] = "OpenMenu";
  ActionTypes2[ActionTypes2["CloseMenu"] = 1] = "CloseMenu";
  ActionTypes2[ActionTypes2["GoToItem"] = 2] = "GoToItem";
  ActionTypes2[ActionTypes2["Search"] = 3] = "Search";
  ActionTypes2[ActionTypes2["ClearSearch"] = 4] = "ClearSearch";
  ActionTypes2[ActionTypes2["RegisterItem"] = 5] = "RegisterItem";
  ActionTypes2[ActionTypes2["UnregisterItem"] = 6] = "UnregisterItem";
})(ActionTypes$3 || (ActionTypes$3 = {}));
var reducers$3 = (_reducers$3 = {}, _reducers$3[ActionTypes$3.CloseMenu] = function(state2) {
  if (state2.menuState === MenuStates.Closed)
    return state2;
  return _extends({}, state2, {
    activeItemIndex: null,
    menuState: MenuStates.Closed
  });
}, _reducers$3[ActionTypes$3.OpenMenu] = function(state2) {
  if (state2.menuState === MenuStates.Open)
    return state2;
  return _extends({}, state2, {
    menuState: MenuStates.Open
  });
}, _reducers$3[ActionTypes$3.GoToItem] = function(state2, action) {
  var activeItemIndex = calculateActiveIndex(action, {
    resolveItems: /* @__PURE__ */ __name(function resolveItems() {
      return state2.items;
    }, "resolveItems"),
    resolveActiveIndex: /* @__PURE__ */ __name(function resolveActiveIndex() {
      return state2.activeItemIndex;
    }, "resolveActiveIndex"),
    resolveId: /* @__PURE__ */ __name(function resolveId(item) {
      return item.id;
    }, "resolveId"),
    resolveDisabled: /* @__PURE__ */ __name(function resolveDisabled(item) {
      return item.dataRef.current.disabled;
    }, "resolveDisabled")
  });
  if (state2.searchQuery === "" && state2.activeItemIndex === activeItemIndex)
    return state2;
  return _extends({}, state2, {
    searchQuery: "",
    activeItemIndex
  });
}, _reducers$3[ActionTypes$3.Search] = function(state2, action) {
  var searchQuery = state2.searchQuery + action.value;
  var match2 = state2.items.findIndex(function(item) {
    var _item$dataRef$current;
    return ((_item$dataRef$current = item.dataRef.current.textValue) == null ? void 0 : _item$dataRef$current.startsWith(searchQuery)) && !item.dataRef.current.disabled;
  });
  if (match2 === -1 || match2 === state2.activeItemIndex)
    return _extends({}, state2, {
      searchQuery
    });
  return _extends({}, state2, {
    searchQuery,
    activeItemIndex: match2
  });
}, _reducers$3[ActionTypes$3.ClearSearch] = function(state2) {
  if (state2.searchQuery === "")
    return state2;
  return _extends({}, state2, {
    searchQuery: ""
  });
}, _reducers$3[ActionTypes$3.RegisterItem] = function(state2, action) {
  return _extends({}, state2, {
    items: [].concat(state2.items, [{
      id: action.id,
      dataRef: action.dataRef
    }])
  });
}, _reducers$3[ActionTypes$3.UnregisterItem] = function(state2, action) {
  var nextItems = state2.items.slice();
  var currentActiveItem = state2.activeItemIndex !== null ? nextItems[state2.activeItemIndex] : null;
  var idx = nextItems.findIndex(function(a) {
    return a.id === action.id;
  });
  if (idx !== -1)
    nextItems.splice(idx, 1);
  return _extends({}, state2, {
    items: nextItems,
    activeItemIndex: function() {
      if (idx === state2.activeItemIndex)
        return null;
      if (currentActiveItem === null)
        return null;
      return nextItems.indexOf(currentActiveItem);
    }()
  });
}, _reducers$3);
var MenuContext = (0, import_react.createContext)(null);
MenuContext.displayName = "MenuContext";
function useMenuContext(component) {
  var context = (0, import_react.useContext)(MenuContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <" + Menu.name + " /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, useMenuContext);
    throw err;
  }
  return context;
}
__name(useMenuContext, "useMenuContext");
function stateReducer$3(state2, action) {
  return match(action.type, reducers$3, state2, action);
}
__name(stateReducer$3, "stateReducer$3");
var DEFAULT_MENU_TAG = import_react.Fragment;
function Menu(props) {
  var reducerBag = (0, import_react.useReducer)(stateReducer$3, {
    menuState: MenuStates.Closed,
    buttonRef: (0, import_react.createRef)(),
    itemsRef: (0, import_react.createRef)(),
    items: [],
    searchQuery: "",
    activeItemIndex: null
  });
  var _reducerBag$ = reducerBag[0], menuState = _reducerBag$.menuState, itemsRef = _reducerBag$.itemsRef, buttonRef = _reducerBag$.buttonRef, dispatch = reducerBag[1];
  (0, import_react.useEffect)(function() {
    function handler(event) {
      var _buttonRef$current, _itemsRef$current;
      var target = event.target;
      if (menuState !== MenuStates.Open)
        return;
      if ((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(target))
        return;
      if ((_itemsRef$current = itemsRef.current) == null ? void 0 : _itemsRef$current.contains(target))
        return;
      dispatch({
        type: ActionTypes$3.CloseMenu
      });
      if (!isFocusableElement(target, FocusableMode.Loose)) {
        var _buttonRef$current2;
        event.preventDefault();
        (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();
      }
    }
    __name(handler, "handler");
    window.addEventListener("mousedown", handler);
    return function() {
      return window.removeEventListener("mousedown", handler);
    };
  }, [menuState, buttonRef, itemsRef, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: menuState === MenuStates.Open
    };
  }, [menuState]);
  return import_react.default.createElement(MenuContext.Provider, {
    value: reducerBag
  }, render(props, propsBag, DEFAULT_MENU_TAG));
}
__name(Menu, "Menu");
var DEFAULT_BUTTON_TAG$2 = "button";
var Button$2 = forwardRefWithAs(/* @__PURE__ */ __name(function Button4(props, ref) {
  var _state$itemsRef$curre;
  var _useMenuContext = useMenuContext([Menu.name, Button4.name].join(".")), state2 = _useMenuContext[0], dispatch = _useMenuContext[1];
  var buttonRef = useSyncRefs(state2.buttonRef, ref);
  var id2 = "headlessui-menu-button-" + useId();
  var d = useDisposables();
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    switch (event.key) {
      case Keys.Space:
      case Keys.Enter:
      case Keys.ArrowDown:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$3.OpenMenu
        });
        d.nextFrame(function() {
          return dispatch({
            type: ActionTypes$3.GoToItem,
            focus: Focus$1.First
          });
        });
        break;
      case Keys.ArrowUp:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$3.OpenMenu
        });
        d.nextFrame(function() {
          return dispatch({
            type: ActionTypes$3.GoToItem,
            focus: Focus$1.Last
          });
        });
        break;
    }
  }, [dispatch, d]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return event.preventDefault();
    if (props.disabled)
      return;
    if (state2.menuState === MenuStates.Open) {
      dispatch({
        type: ActionTypes$3.CloseMenu
      });
      d.nextFrame(function() {
        var _state$buttonRef$curr;
        return (_state$buttonRef$curr = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr.focus({
          preventScroll: true
        });
      });
    } else {
      event.preventDefault();
      event.stopPropagation();
      dispatch({
        type: ActionTypes$3.OpenMenu
      });
    }
  }, [dispatch, d, state2, props.disabled]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.menuState === MenuStates.Open
    };
  }, [state2]);
  var passthroughProps = props;
  var propsWeControl = {
    ref: buttonRef,
    id: id2,
    type: "button",
    "aria-haspopup": true,
    "aria-controls": (_state$itemsRef$curre = state2.itemsRef.current) == null ? void 0 : _state$itemsRef$curre.id,
    "aria-expanded": state2.menuState === MenuStates.Open ? true : void 0,
    onKeyDown: handleKeyDown,
    onClick: handleClick
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG$2);
}, "Button"));
var DEFAULT_ITEMS_TAG = "div";
var ItemsRenderFeatures = Features.RenderStrategy | Features.Static;
var Items = forwardRefWithAs(/* @__PURE__ */ __name(function Items2(props, ref) {
  var _state$items$state$ac, _state$buttonRef$curr4;
  var _useMenuContext2 = useMenuContext([Menu.name, Items2.name].join(".")), state2 = _useMenuContext2[0], dispatch = _useMenuContext2[1];
  var itemsRef = useSyncRefs(state2.itemsRef, ref);
  var id2 = "headlessui-menu-items-" + useId();
  var searchDisposables = useDisposables();
  (0, import_react.useEffect)(function() {
    var container = state2.itemsRef.current;
    if (!container)
      return;
    if (state2.menuState !== MenuStates.Open)
      return;
    if (container === document.activeElement)
      return;
    container.focus({
      preventScroll: true
    });
  }, [state2.menuState, state2.itemsRef]);
  useIsoMorphicEffect(function() {
    var container = state2.itemsRef.current;
    if (!container)
      return;
    if (state2.menuState !== MenuStates.Open)
      return;
    var walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: /* @__PURE__ */ __name(function acceptNode(node) {
        if (node.getAttribute("role") === "menuitem")
          return NodeFilter.FILTER_REJECT;
        if (node.hasAttribute("role"))
          return NodeFilter.FILTER_SKIP;
        return NodeFilter.FILTER_ACCEPT;
      }, "acceptNode")
    });
    while (walker.nextNode()) {
      walker.currentNode.setAttribute("role", "none");
    }
  }, [state2.menuState, state2.itemsRef]);
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    searchDisposables.dispose();
    switch (event.key) {
      case Keys.Space:
        if (state2.searchQuery !== "") {
          event.preventDefault();
          event.stopPropagation();
          return dispatch({
            type: ActionTypes$3.Search,
            value: event.key
          });
        }
      case Keys.Enter:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$3.CloseMenu
        });
        if (state2.activeItemIndex !== null) {
          var _document$getElementB;
          var _id = state2.items[state2.activeItemIndex].id;
          (_document$getElementB = document.getElementById(_id)) == null ? void 0 : _document$getElementB.click();
        }
        disposables().nextFrame(function() {
          var _state$buttonRef$curr2;
          return (_state$buttonRef$curr2 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr2.focus({
            preventScroll: true
          });
        });
        break;
      case Keys.ArrowDown:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$3.GoToItem,
          focus: Focus$1.Next
        });
      case Keys.ArrowUp:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$3.GoToItem,
          focus: Focus$1.Previous
        });
      case Keys.Home:
      case Keys.PageUp:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$3.GoToItem,
          focus: Focus$1.First
        });
      case Keys.End:
      case Keys.PageDown:
        event.preventDefault();
        event.stopPropagation();
        return dispatch({
          type: ActionTypes$3.GoToItem,
          focus: Focus$1.Last
        });
      case Keys.Escape:
        event.preventDefault();
        event.stopPropagation();
        dispatch({
          type: ActionTypes$3.CloseMenu
        });
        disposables().nextFrame(function() {
          var _state$buttonRef$curr3;
          return (_state$buttonRef$curr3 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr3.focus({
            preventScroll: true
          });
        });
        break;
      case Keys.Tab:
        event.preventDefault();
        event.stopPropagation();
        break;
      default:
        if (event.key.length === 1) {
          dispatch({
            type: ActionTypes$3.Search,
            value: event.key
          });
          searchDisposables.setTimeout(function() {
            return dispatch({
              type: ActionTypes$3.ClearSearch
            });
          }, 350);
        }
        break;
    }
  }, [dispatch, searchDisposables, state2]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.menuState === MenuStates.Open
    };
  }, [state2]);
  var propsWeControl = {
    "aria-activedescendant": state2.activeItemIndex === null ? void 0 : (_state$items$state$ac = state2.items[state2.activeItemIndex]) == null ? void 0 : _state$items$state$ac.id,
    "aria-labelledby": (_state$buttonRef$curr4 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr4.id,
    id: id2,
    onKeyDown: handleKeyDown,
    role: "menu",
    tabIndex: 0,
    ref: itemsRef
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_ITEMS_TAG, ItemsRenderFeatures, state2.menuState === MenuStates.Open);
}, "Items"));
var DEFAULT_ITEM_TAG = import_react.Fragment;
function Item(props) {
  var _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, onClick = props.onClick, passthroughProps = _objectWithoutPropertiesLoose(props, ["disabled", "onClick"]);
  var _useMenuContext3 = useMenuContext([Menu.name, Item.name].join(".")), state2 = _useMenuContext3[0], dispatch = _useMenuContext3[1];
  var id2 = "headlessui-menu-item-" + useId();
  var active = state2.activeItemIndex !== null ? state2.items[state2.activeItemIndex].id === id2 : false;
  useIsoMorphicEffect(function() {
    if (state2.menuState !== MenuStates.Open)
      return;
    if (!active)
      return;
    var d = disposables();
    d.nextFrame(function() {
      var _document$getElementB2;
      return (_document$getElementB2 = document.getElementById(id2)) == null ? void 0 : _document$getElementB2.scrollIntoView == null ? void 0 : _document$getElementB2.scrollIntoView({
        block: "nearest"
      });
    });
    return d.dispose;
  }, [id2, active, state2.menuState]);
  var bag = (0, import_react.useRef)({
    disabled
  });
  useIsoMorphicEffect(function() {
    bag.current.disabled = disabled;
  }, [bag, disabled]);
  useIsoMorphicEffect(function() {
    var _document$getElementB3, _document$getElementB4;
    bag.current.textValue = (_document$getElementB3 = document.getElementById(id2)) == null ? void 0 : (_document$getElementB4 = _document$getElementB3.textContent) == null ? void 0 : _document$getElementB4.toLowerCase();
  }, [bag, id2]);
  useIsoMorphicEffect(function() {
    dispatch({
      type: ActionTypes$3.RegisterItem,
      id: id2,
      dataRef: bag
    });
    return function() {
      return dispatch({
        type: ActionTypes$3.UnregisterItem,
        id: id2
      });
    };
  }, [bag, id2]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (disabled)
      return event.preventDefault();
    dispatch({
      type: ActionTypes$3.CloseMenu
    });
    disposables().nextFrame(function() {
      var _state$buttonRef$curr5;
      return (_state$buttonRef$curr5 = state2.buttonRef.current) == null ? void 0 : _state$buttonRef$curr5.focus({
        preventScroll: true
      });
    });
    if (onClick)
      return onClick(event);
  }, [dispatch, state2.buttonRef, disabled, onClick]);
  var handleFocus = (0, import_react.useCallback)(function() {
    if (disabled)
      return dispatch({
        type: ActionTypes$3.GoToItem,
        focus: Focus$1.Nothing
      });
    dispatch({
      type: ActionTypes$3.GoToItem,
      focus: Focus$1.Specific,
      id: id2
    });
  }, [disabled, id2, dispatch]);
  var handleMove = (0, import_react.useCallback)(function() {
    if (disabled)
      return;
    if (active)
      return;
    dispatch({
      type: ActionTypes$3.GoToItem,
      focus: Focus$1.Specific,
      id: id2
    });
  }, [disabled, active, id2, dispatch]);
  var handleLeave = (0, import_react.useCallback)(function() {
    if (disabled)
      return;
    if (!active)
      return;
    dispatch({
      type: ActionTypes$3.GoToItem,
      focus: Focus$1.Nothing
    });
  }, [disabled, active, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      active,
      disabled
    };
  }, [active, disabled]);
  var propsWeControl = {
    id: id2,
    role: "menuitem",
    tabIndex: -1,
    "aria-disabled": disabled === true ? true : void 0,
    onClick: handleClick,
    onFocus: handleFocus,
    onPointerMove: handleMove,
    onMouseMove: handleMove,
    onPointerLeave: handleLeave,
    onMouseLeave: handleLeave
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_ITEM_TAG);
}
__name(Item, "Item");
Menu.Button = Button$2;
Menu.Items = Items;
Menu.Item = Item;
var _reducers$4;
var PopoverStates;
(function(PopoverStates2) {
  PopoverStates2[PopoverStates2["Open"] = 0] = "Open";
  PopoverStates2[PopoverStates2["Closed"] = 1] = "Closed";
})(PopoverStates || (PopoverStates = {}));
var ActionTypes$4;
(function(ActionTypes2) {
  ActionTypes2[ActionTypes2["TogglePopover"] = 0] = "TogglePopover";
  ActionTypes2[ActionTypes2["ClosePopover"] = 1] = "ClosePopover";
  ActionTypes2[ActionTypes2["SetButton"] = 2] = "SetButton";
  ActionTypes2[ActionTypes2["SetButtonId"] = 3] = "SetButtonId";
  ActionTypes2[ActionTypes2["SetPanel"] = 4] = "SetPanel";
  ActionTypes2[ActionTypes2["SetPanelId"] = 5] = "SetPanelId";
})(ActionTypes$4 || (ActionTypes$4 = {}));
var reducers$4 = (_reducers$4 = {}, _reducers$4[ActionTypes$4.TogglePopover] = function(state2) {
  var _match;
  return _extends({}, state2, {
    popoverState: match(state2.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))
  });
}, _reducers$4[ActionTypes$4.ClosePopover] = function(state2) {
  if (state2.popoverState === PopoverStates.Closed)
    return state2;
  return _extends({}, state2, {
    popoverState: PopoverStates.Closed
  });
}, _reducers$4[ActionTypes$4.SetButton] = function(state2, action) {
  if (state2.button === action.button)
    return state2;
  return _extends({}, state2, {
    button: action.button
  });
}, _reducers$4[ActionTypes$4.SetButtonId] = function(state2, action) {
  if (state2.buttonId === action.buttonId)
    return state2;
  return _extends({}, state2, {
    buttonId: action.buttonId
  });
}, _reducers$4[ActionTypes$4.SetPanel] = function(state2, action) {
  if (state2.panel === action.panel)
    return state2;
  return _extends({}, state2, {
    panel: action.panel
  });
}, _reducers$4[ActionTypes$4.SetPanelId] = function(state2, action) {
  if (state2.panelId === action.panelId)
    return state2;
  return _extends({}, state2, {
    panelId: action.panelId
  });
}, _reducers$4);
var PopoverContext = (0, import_react.createContext)(null);
PopoverContext.displayName = "PopoverContext";
function usePopoverContext(component) {
  var context = (0, import_react.useContext)(PopoverContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <" + Popover.name + " /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, usePopoverContext);
    throw err;
  }
  return context;
}
__name(usePopoverContext, "usePopoverContext");
var PopoverGroupContext = (0, import_react.createContext)(null);
PopoverGroupContext.displayName = "PopoverGroupContext";
function usePopoverGroupContext() {
  return (0, import_react.useContext)(PopoverGroupContext);
}
__name(usePopoverGroupContext, "usePopoverGroupContext");
var PopoverPanelContext = (0, import_react.createContext)(null);
PopoverPanelContext.displayName = "PopoverPanelContext";
function usePopoverPanelContext() {
  return (0, import_react.useContext)(PopoverPanelContext);
}
__name(usePopoverPanelContext, "usePopoverPanelContext");
function stateReducer$4(state2, action) {
  return match(action.type, reducers$4, state2, action);
}
__name(stateReducer$4, "stateReducer$4");
var DEFAULT_FLYOUT_TAG = "div";
function Popover(props) {
  var buttonId = "headlessui-popover-button-" + useId();
  var panelId = "headlessui-popover-panel-" + useId();
  var reducerBag = (0, import_react.useReducer)(stateReducer$4, {
    popoverState: PopoverStates.Closed,
    linkedPanel: false,
    button: null,
    buttonId,
    panel: null,
    panelId
  });
  var _reducerBag$ = reducerBag[0], popoverState = _reducerBag$.popoverState, button = _reducerBag$.button, panel = _reducerBag$.panel, dispatch = reducerBag[1];
  (0, import_react.useEffect)(function() {
    return dispatch({
      type: ActionTypes$4.SetButtonId,
      buttonId
    });
  }, [buttonId, dispatch]);
  (0, import_react.useEffect)(function() {
    return dispatch({
      type: ActionTypes$4.SetPanelId,
      panelId
    });
  }, [panelId, dispatch]);
  var registerBag = (0, import_react.useMemo)(function() {
    return {
      buttonId,
      panelId,
      close: /* @__PURE__ */ __name(function close() {
        return dispatch({
          type: ActionTypes$4.ClosePopover
        });
      }, "close")
    };
  }, [buttonId, panelId, dispatch]);
  var groupContext = usePopoverGroupContext();
  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;
  var isFocusWithinPopoverGroup = (0, import_react.useCallback)(function() {
    var _groupContext$isFocus;
    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));
  }, [groupContext, button, panel]);
  (0, import_react.useEffect)(function() {
    return registerPopover == null ? void 0 : registerPopover(registerBag);
  }, [registerPopover, registerBag]);
  (0, import_react.useEffect)(function() {
    if (popoverState !== PopoverStates.Open)
      return;
    function handler() {
      if (isFocusWithinPopoverGroup())
        return;
      if (!button)
        return;
      if (!panel)
        return;
      dispatch({
        type: ActionTypes$4.ClosePopover
      });
    }
    __name(handler, "handler");
    window.addEventListener("focus", handler, true);
    return function() {
      return window.removeEventListener("focus", handler, true);
    };
  }, [popoverState, isFocusWithinPopoverGroup, groupContext, button, panel, dispatch]);
  (0, import_react.useEffect)(function() {
    function handler(event) {
      var target = event.target;
      if (popoverState !== PopoverStates.Open)
        return;
      if (button == null ? void 0 : button.contains(target))
        return;
      if (panel == null ? void 0 : panel.contains(target))
        return;
      dispatch({
        type: ActionTypes$4.ClosePopover
      });
      if (!isFocusableElement(target, FocusableMode.Loose)) {
        event.preventDefault();
        button == null ? void 0 : button.focus();
      }
    }
    __name(handler, "handler");
    window.addEventListener("mousedown", handler);
    return function() {
      return window.removeEventListener("mousedown", handler);
    };
  }, [popoverState, button, panel, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: popoverState === PopoverStates.Open
    };
  }, [popoverState]);
  return import_react.default.createElement(PopoverContext.Provider, {
    value: reducerBag
  }, render(props, propsBag, DEFAULT_FLYOUT_TAG));
}
__name(Popover, "Popover");
var DEFAULT_BUTTON_TAG$3 = "button";
var Button$3 = forwardRefWithAs(/* @__PURE__ */ __name(function Button5(props, ref) {
  var _usePopoverContext = usePopoverContext([Popover.name, Button5.name].join(".")), state2 = _usePopoverContext[0], dispatch = _usePopoverContext[1];
  var internalButtonRef = (0, import_react.useRef)(null);
  var groupContext = usePopoverGroupContext();
  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;
  var panelContext = usePopoverPanelContext();
  var isWithinPanel = panelContext === null ? false : panelContext === state2.panelId;
  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function(button) {
    return dispatch({
      type: ActionTypes$4.SetButton,
      button
    });
  });
  var activeElementRef = (0, import_react.useRef)(null);
  var previousActiveElementRef = (0, import_react.useRef)(typeof window === "undefined" ? null : document.activeElement);
  (0, import_react.useEffect)(function() {
    function handler() {
      previousActiveElementRef.current = activeElementRef.current;
      activeElementRef.current = document.activeElement;
    }
    __name(handler, "handler");
    window.addEventListener("focus", handler, true);
    return function() {
      return window.removeEventListener("focus", handler, true);
    };
  }, [previousActiveElementRef, activeElementRef]);
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    var _state$button;
    if (isWithinPanel) {
      if (state2.popoverState === PopoverStates.Closed)
        return;
      switch (event.key) {
        case Keys.Space:
        case Keys.Enter:
          event.preventDefault();
          event.stopPropagation();
          dispatch({
            type: ActionTypes$4.ClosePopover
          });
          (_state$button = state2.button) == null ? void 0 : _state$button.focus();
          break;
      }
    } else {
      switch (event.key) {
        case Keys.Space:
        case Keys.Enter:
          event.preventDefault();
          event.stopPropagation();
          if (state2.popoverState === PopoverStates.Closed)
            closeOthers == null ? void 0 : closeOthers(state2.buttonId);
          dispatch({
            type: ActionTypes$4.TogglePopover
          });
          break;
        case Keys.Escape:
          if (state2.popoverState !== PopoverStates.Open)
            return closeOthers == null ? void 0 : closeOthers(state2.buttonId);
          if (!internalButtonRef.current)
            return;
          if (!internalButtonRef.current.contains(document.activeElement))
            return;
          dispatch({
            type: ActionTypes$4.ClosePopover
          });
          break;
        case Keys.Tab:
          if (state2.popoverState !== PopoverStates.Open)
            return;
          if (!state2.panel)
            return;
          if (!state2.button)
            return;
          if (event.shiftKey) {
            var _state$button2;
            if (!previousActiveElementRef.current)
              return;
            if ((_state$button2 = state2.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current))
              return;
            if (state2.panel.contains(previousActiveElementRef.current))
              return;
            var focusableElements = getFocusableElements();
            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);
            var buttonIdx = focusableElements.indexOf(state2.button);
            if (buttonIdx > previousIdx)
              return;
            event.preventDefault();
            event.stopPropagation();
            focusIn(state2.panel, Focus.Last);
          } else {
            event.preventDefault();
            event.stopPropagation();
            focusIn(state2.panel, Focus.First);
          }
          break;
      }
    }
  }, [dispatch, state2.popoverState, state2.buttonId, state2.button, state2.panel, internalButtonRef, closeOthers, isWithinPanel]);
  var handleKeyUp = (0, import_react.useCallback)(function(event) {
    var _state$button3;
    if (isWithinPanel)
      return;
    if (state2.popoverState !== PopoverStates.Open)
      return;
    if (!state2.panel)
      return;
    if (!state2.button)
      return;
    switch (event.key) {
      case Keys.Tab:
        if (!previousActiveElementRef.current)
          return;
        if ((_state$button3 = state2.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current))
          return;
        if (state2.panel.contains(previousActiveElementRef.current))
          return;
        var focusableElements = getFocusableElements();
        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);
        var buttonIdx = focusableElements.indexOf(state2.button);
        if (buttonIdx > previousIdx)
          return;
        event.preventDefault();
        event.stopPropagation();
        focusIn(state2.panel, Focus.Last);
        break;
    }
  }, [state2.popoverState, state2.panel, state2.button, isWithinPanel]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return;
    if (props.disabled)
      return;
    if (isWithinPanel) {
      var _state$button4;
      dispatch({
        type: ActionTypes$4.ClosePopover
      });
      (_state$button4 = state2.button) == null ? void 0 : _state$button4.focus();
    } else {
      if (state2.popoverState === PopoverStates.Closed)
        closeOthers == null ? void 0 : closeOthers(state2.buttonId);
      dispatch({
        type: ActionTypes$4.TogglePopover
      });
    }
  }, [dispatch, state2.button, state2.popoverState, state2.buttonId, props.disabled, closeOthers, isWithinPanel]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.popoverState === PopoverStates.Open
    };
  }, [state2]);
  var passthroughProps = props;
  var propsWeControl = isWithinPanel ? {
    type: "button",
    onKeyDown: handleKeyDown,
    onClick: handleClick
  } : {
    ref: buttonRef,
    id: state2.buttonId,
    type: "button",
    "aria-expanded": state2.popoverState === PopoverStates.Open ? true : void 0,
    "aria-controls": state2.panel ? state2.panelId : void 0,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onClick: handleClick
  };
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_BUTTON_TAG$3);
}, "Button"));
var DEFAULT_OVERLAY_TAG$1 = "div";
var Overlay$1 = forwardRefWithAs(/* @__PURE__ */ __name(function Overlay3(props, ref) {
  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay3.name].join(".")), popoverState = _usePopoverContext2[0].popoverState, dispatch = _usePopoverContext2[1];
  var overlayRef = useSyncRefs(ref);
  var id2 = "headlessui-popover-overlay-" + useId();
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return event.preventDefault();
    dispatch({
      type: ActionTypes$4.ClosePopover
    });
  }, [dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: popoverState === PopoverStates.Open
    };
  }, [popoverState]);
  var propsWeControl = {
    ref: overlayRef,
    id: id2,
    "aria-hidden": true,
    onClick: handleClick
  };
  var passthroughProps = props;
  return render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_OVERLAY_TAG$1);
}, "Overlay"));
var DEFAULT_PANEL_TAG$1 = "div";
var PanelRenderFeatures$1 = Features.RenderStrategy | Features.Static;
var Panel$1 = forwardRefWithAs(/* @__PURE__ */ __name(function Panel3(props, ref) {
  var _props$focus = props.focus, focus = _props$focus === void 0 ? false : _props$focus, passthroughProps = _objectWithoutPropertiesLoose(props, ["focus"]);
  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel3.name].join(".")), state2 = _usePopoverContext3[0], dispatch = _usePopoverContext3[1];
  var internalPanelRef = (0, import_react.useRef)(null);
  var panelRef = useSyncRefs(internalPanelRef, ref, function(panel) {
    dispatch({
      type: ActionTypes$4.SetPanel,
      panel
    });
  });
  var handleKeyDown = (0, import_react.useCallback)(function(event) {
    var _state$button5;
    switch (event.key) {
      case Keys.Escape:
        if (state2.popoverState !== PopoverStates.Open)
          return;
        if (!internalPanelRef.current)
          return;
        if (!internalPanelRef.current.contains(document.activeElement))
          return;
        event.preventDefault();
        dispatch({
          type: ActionTypes$4.ClosePopover
        });
        (_state$button5 = state2.button) == null ? void 0 : _state$button5.focus();
        break;
    }
  }, [state2, internalPanelRef, dispatch]);
  (0, import_react.useEffect)(function() {
    return function() {
      return dispatch({
        type: ActionTypes$4.SetPanel,
        panel: null
      });
    };
  }, [dispatch]);
  (0, import_react.useEffect)(function() {
    var _props$unmount;
    if (state2.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {
      dispatch({
        type: ActionTypes$4.SetPanel,
        panel: null
      });
    }
  }, [state2.popoverState, props.unmount, dispatch]);
  (0, import_react.useEffect)(function() {
    if (!focus)
      return;
    if (state2.popoverState !== PopoverStates.Open)
      return;
    if (!internalPanelRef.current)
      return;
    var activeElement = document.activeElement;
    if (internalPanelRef.current.contains(activeElement))
      return;
    focusIn(internalPanelRef.current, Focus.First);
  }, [focus, internalPanelRef, state2.popoverState]);
  (0, import_react.useEffect)(function() {
    if (state2.popoverState !== PopoverStates.Open)
      return;
    if (!internalPanelRef.current)
      return;
    function handler(event) {
      if (event.key !== Keys.Tab)
        return;
      if (!document.activeElement)
        return;
      if (!internalPanelRef.current)
        return;
      if (!internalPanelRef.current.contains(document.activeElement))
        return;
      event.preventDefault();
      var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);
      if (result === FocusResult.Underflow) {
        var _state$button6;
        return (_state$button6 = state2.button) == null ? void 0 : _state$button6.focus();
      } else if (result === FocusResult.Overflow) {
        if (!state2.button)
          return;
        var elements = getFocusableElements();
        var buttonIdx = elements.indexOf(state2.button);
        var nextElements = elements.splice(buttonIdx + 1).filter(function(element) {
          var _internalPanelRef$cur;
          return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));
        });
        if (focusIn(nextElements, Focus.First) === FocusResult.Error) {
          focusIn(document.body, Focus.First);
        }
      }
    }
    __name(handler, "handler");
    window.addEventListener("keydown", handler);
    return function() {
      return window.removeEventListener("keydown", handler);
    };
  }, [focus, internalPanelRef, state2.popoverState, state2.button]);
  (0, import_react.useEffect)(function() {
    if (!focus)
      return;
    if (state2.popoverState !== PopoverStates.Open)
      return;
    if (!internalPanelRef.current)
      return;
    function handler() {
      var _internalPanelRef$cur2;
      if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement))
        return;
      dispatch({
        type: ActionTypes$4.ClosePopover
      });
    }
    __name(handler, "handler");
    window.addEventListener("focus", handler, true);
    return function() {
      return window.removeEventListener("focus", handler, true);
    };
  }, [focus, state2.popoverState, dispatch]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      open: state2.popoverState === PopoverStates.Open
    };
  }, [state2]);
  var propsWeControl = {
    ref: panelRef,
    id: state2.panelId,
    onKeyDown: handleKeyDown
  };
  return import_react.default.createElement(PopoverPanelContext.Provider, {
    value: state2.panelId
  }, render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_PANEL_TAG$1, PanelRenderFeatures$1, state2.popoverState === PopoverStates.Open));
}, "Panel"));
var DEFAULT_GROUP_TAG = "div";
function Group(props) {
  var groupRef = (0, import_react.useRef)(null);
  var _useState = (0, import_react.useState)([]), popovers = _useState[0], setPopovers = _useState[1];
  var unregisterPopover = (0, import_react.useCallback)(function(registerbag) {
    setPopovers(function(existing) {
      var idx = existing.indexOf(registerbag);
      if (idx !== -1) {
        var clone = existing.slice();
        clone.splice(idx, 1);
        return clone;
      }
      return existing;
    });
  }, [setPopovers]);
  var registerPopover = (0, import_react.useCallback)(function(registerbag) {
    setPopovers(function(existing) {
      return [].concat(existing, [registerbag]);
    });
    return function() {
      return unregisterPopover(registerbag);
    };
  }, [setPopovers, unregisterPopover]);
  var isFocusWithinPopoverGroup = (0, import_react.useCallback)(function() {
    var _groupRef$current;
    var element = document.activeElement;
    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element))
      return true;
    return popovers.some(function(bag) {
      var _document$getElementB, _document$getElementB2;
      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));
    });
  }, [groupRef, popovers]);
  var closeOthers = (0, import_react.useCallback)(function(buttonId) {
    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done; ) {
      var popover = _step.value;
      if (popover.buttonId !== buttonId)
        popover.close();
    }
  }, [popovers]);
  var contextBag = (0, import_react.useMemo)(function() {
    return {
      registerPopover,
      unregisterPopover,
      isFocusWithinPopoverGroup,
      closeOthers
    };
  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);
  var propsBag = (0, import_react.useMemo)(function() {
    return {};
  }, []);
  var propsWeControl = {
    ref: groupRef
  };
  var passthroughProps = props;
  return import_react.default.createElement(PopoverGroupContext.Provider, {
    value: contextBag
  }, render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_GROUP_TAG));
}
__name(Group, "Group");
Popover.Button = Button$3;
Popover.Overlay = Overlay$1;
Popover.Panel = Panel$1;
Popover.Group = Group;
var GroupContext = (0, import_react.createContext)(null);
GroupContext.displayName = "GroupContext";
function useGroupContext(component) {
  var context = (0, import_react.useContext)(GroupContext);
  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <Switch.Group /> component.");
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, useGroupContext);
    throw err;
  }
  return context;
}
__name(useGroupContext, "useGroupContext");
var DEFAULT_GROUP_TAG$1 = import_react.Fragment;
function Group$1(props) {
  var _useState = (0, import_react.useState)(null), switchElement = _useState[0], setSwitchElement = _useState[1];
  var _useState2 = (0, import_react.useState)(null), labelElement = _useState2[0], setLabelElement = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), descriptionElement = _useState3[0], setDescriptionElement = _useState3[1];
  var context = (0, import_react.useMemo)(function() {
    return {
      switch: switchElement,
      setSwitch: setSwitchElement,
      label: labelElement,
      setLabel: setLabelElement,
      description: descriptionElement,
      setDescription: setDescriptionElement
    };
  }, [switchElement, setSwitchElement, labelElement, setLabelElement, descriptionElement, setDescriptionElement]);
  return import_react.default.createElement(GroupContext.Provider, {
    value: context
  }, render(props, {}, DEFAULT_GROUP_TAG$1));
}
__name(Group$1, "Group$1");
var DEFAULT_SWITCH_TAG = "button";
function Switch(props) {
  var _groupContext$label, _groupContext$descrip;
  var checked = props.checked, onChange = props.onChange, passThroughProps = _objectWithoutPropertiesLoose(props, ["checked", "onChange"]);
  var id2 = "headlessui-switch-" + useId();
  var groupContext = (0, import_react.useContext)(GroupContext);
  var toggle = (0, import_react.useCallback)(function() {
    return onChange(!checked);
  }, [onChange, checked]);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isDisabledReactIssue7711(event.currentTarget))
      return event.preventDefault();
    event.preventDefault();
    toggle();
  }, [toggle]);
  var handleKeyUp = (0, import_react.useCallback)(function(event) {
    if (event.key !== Keys.Tab)
      event.preventDefault();
    if (event.key === Keys.Space)
      toggle();
  }, [toggle]);
  var handleKeyPress = (0, import_react.useCallback)(function(event) {
    return event.preventDefault();
  }, []);
  var propsBag = (0, import_react.useMemo)(function() {
    return {
      checked
    };
  }, [checked]);
  var propsWeControl = {
    id: id2,
    ref: groupContext === null ? void 0 : groupContext.setSwitch,
    role: "switch",
    tabIndex: 0,
    "aria-checked": checked,
    "aria-labelledby": groupContext == null ? void 0 : (_groupContext$label = groupContext.label) == null ? void 0 : _groupContext$label.id,
    "aria-describedby": groupContext == null ? void 0 : (_groupContext$descrip = groupContext.description) == null ? void 0 : _groupContext$descrip.id,
    onClick: handleClick,
    onKeyUp: handleKeyUp,
    onKeyPress: handleKeyPress
  };
  if (passThroughProps.as === "button") {
    Object.assign(propsWeControl, {
      type: "button"
    });
  }
  return render(_extends({}, passThroughProps, propsWeControl), propsBag, DEFAULT_SWITCH_TAG);
}
__name(Switch, "Switch");
var DEFAULT_LABEL_TAG$1 = "label";
function Label$1(props) {
  var state2 = useGroupContext([Switch.name, Label$1.name].join("."));
  var id2 = "headlessui-switch-label-" + useId();
  var handleClick = (0, import_react.useCallback)(function() {
    if (!state2["switch"])
      return;
    state2["switch"].click();
    state2["switch"].focus({
      preventScroll: true
    });
  }, [state2["switch"]]);
  var propsWeControl = {
    ref: state2.setLabel,
    id: id2,
    onClick: handleClick
  };
  return render(_extends({}, props, propsWeControl), {}, DEFAULT_LABEL_TAG$1);
}
__name(Label$1, "Label$1");
var DEFAULT_DESCRIPTIONL_TAG = "p";
function Description$1(props) {
  var state2 = useGroupContext([Switch.name, Description$1.name].join("."));
  var id2 = "headlessui-switch-description-" + useId();
  var propsWeControl = {
    ref: state2.setDescription,
    id: id2
  };
  return render(_extends({}, props, propsWeControl), {}, DEFAULT_DESCRIPTIONL_TAG);
}
__name(Description$1, "Description$1");
Switch.Group = Group$1;
Switch.Label = Label$1;
Switch.Description = Description$1;
function useIsInitialRender() {
  var initial = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(function() {
    initial.current = false;
  }, []);
  return initial.current;
}
__name(useIsInitialRender, "useIsInitialRender");
function useIsMounted() {
  var mounted = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(function() {
    return function() {
      mounted.current = false;
    };
  }, []);
  return mounted;
}
__name(useIsMounted, "useIsMounted");
function once(cb) {
  var state2 = {
    called: false
  };
  return function() {
    if (state2.called)
      return;
    state2.called = true;
    return cb.apply(void 0, arguments);
  };
}
__name(once, "once");
function addClasses(node) {
  var _node$classList;
  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    classes[_key - 1] = arguments[_key];
  }
  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);
}
__name(addClasses, "addClasses");
function removeClasses(node) {
  var _node$classList2;
  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }
  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);
}
__name(removeClasses, "removeClasses");
var Reason;
(function(Reason2) {
  Reason2["Finished"] = "finished";
  Reason2["Cancelled"] = "cancelled";
})(Reason || (Reason = {}));
function waitForTransition(node, done) {
  var d = disposables();
  if (!node)
    return d.dispose;
  var _getComputedStyle = getComputedStyle(node), transitionDuration = _getComputedStyle.transitionDuration, transitionDelay = _getComputedStyle.transitionDelay;
  var _map = [transitionDuration, transitionDelay].map(function(value) {
    var _value$split$filter$m = value.split(",").filter(Boolean).map(function(v) {
      return v.includes("ms") ? parseFloat(v) : parseFloat(v) * 1e3;
    }).sort(function(a, z) {
      return z - a;
    }), _value$split$filter$m2 = _value$split$filter$m[0], resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;
    return resolvedValue;
  }), durationMs = _map[0], delaysMs = _map[1];
  if (durationMs !== 0) {
    d.setTimeout(function() {
      done(Reason.Finished);
    }, durationMs + delaysMs);
  } else {
    done(Reason.Finished);
  }
  d.add(function() {
    return done(Reason.Cancelled);
  });
  return d.dispose;
}
__name(waitForTransition, "waitForTransition");
function transition(node, base, from, to, done) {
  var d = disposables();
  var _done = done !== void 0 ? once(done) : function() {
  };
  addClasses.apply(void 0, [node].concat(base, from));
  d.nextFrame(function() {
    removeClasses.apply(void 0, [node].concat(from));
    addClasses.apply(void 0, [node].concat(to));
    d.add(waitForTransition(node, function(reason) {
      removeClasses.apply(void 0, [node].concat(to, base));
      return _done(reason);
    }));
  });
  d.add(function() {
    return removeClasses.apply(void 0, [node].concat(base, from, to));
  });
  d.add(function() {
    return _done(Reason.Cancelled);
  });
  return d.dispose;
}
__name(transition, "transition");
function useSplitClasses(classes) {
  if (classes === void 0) {
    classes = "";
  }
  return (0, import_react.useMemo)(function() {
    return classes.split(" ").filter(function(className) {
      return className.trim().length > 1;
    });
  }, [classes]);
}
__name(useSplitClasses, "useSplitClasses");
var TransitionContext = (0, import_react.createContext)(null);
TransitionContext.displayName = "TransitionContext";
var TreeStates;
(function(TreeStates2) {
  TreeStates2["Visible"] = "visible";
  TreeStates2["Hidden"] = "hidden";
})(TreeStates || (TreeStates = {}));
function useTransitionContext() {
  var context = (0, import_react.useContext)(TransitionContext);
  if (context === null) {
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition />.");
  }
  return context;
}
__name(useTransitionContext, "useTransitionContext");
function useParentNesting() {
  var context = (0, import_react.useContext)(NestingContext);
  if (context === null) {
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition />.");
  }
  return context;
}
__name(useParentNesting, "useParentNesting");
var NestingContext = (0, import_react.createContext)(null);
NestingContext.displayName = "NestingContext";
function hasChildren(bag) {
  if ("children" in bag)
    return hasChildren(bag.children);
  return bag.current.filter(function(_ref) {
    var state2 = _ref.state;
    return state2 === TreeStates.Visible;
  }).length > 0;
}
__name(hasChildren, "hasChildren");
function useNesting(done) {
  var doneRef = (0, import_react.useRef)(done);
  var transitionableChildren = (0, import_react.useRef)([]);
  var mounted = useIsMounted();
  (0, import_react.useEffect)(function() {
    doneRef.current = done;
  }, [done]);
  var unregister = (0, import_react.useCallback)(function(childId, strategy) {
    var _match;
    if (strategy === void 0) {
      strategy = RenderStrategy.Hidden;
    }
    var idx = transitionableChildren.current.findIndex(function(_ref2) {
      var id2 = _ref2.id;
      return id2 === childId;
    });
    if (idx === -1)
      return;
    match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function() {
      transitionableChildren.current.splice(idx, 1);
    }, _match[RenderStrategy.Hidden] = function() {
      transitionableChildren.current[idx].state = TreeStates.Hidden;
    }, _match));
    if (!hasChildren(transitionableChildren) && mounted.current) {
      doneRef.current == null ? void 0 : doneRef.current();
    }
  }, [doneRef, mounted, transitionableChildren]);
  var register = (0, import_react.useCallback)(function(childId) {
    var child = transitionableChildren.current.find(function(_ref3) {
      var id2 = _ref3.id;
      return id2 === childId;
    });
    if (!child) {
      transitionableChildren.current.push({
        id: childId,
        state: TreeStates.Visible
      });
    } else if (child.state !== TreeStates.Visible) {
      child.state = TreeStates.Visible;
    }
    return function() {
      return unregister(childId, RenderStrategy.Unmount);
    };
  }, [transitionableChildren, unregister]);
  return (0, import_react.useMemo)(function() {
    return {
      children: transitionableChildren,
      register,
      unregister
    };
  }, [register, unregister, transitionableChildren]);
}
__name(useNesting, "useNesting");
function noop() {
}
__name(noop, "noop");
var eventNames = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
function ensureEventHooksExist(events) {
  var result = {};
  for (var _iterator = _createForOfIteratorHelperLoose(eventNames), _step; !(_step = _iterator()).done; ) {
    var _events$name;
    var name = _step.value;
    result[name] = (_events$name = events[name]) != null ? _events$name : noop;
  }
  return result;
}
__name(ensureEventHooksExist, "ensureEventHooksExist");
function useEvents(events) {
  var eventsRef = (0, import_react.useRef)(ensureEventHooksExist(events));
  (0, import_react.useEffect)(function() {
    eventsRef.current = ensureEventHooksExist(events);
  }, [events]);
  return eventsRef;
}
__name(useEvents, "useEvents");
var DEFAULT_TRANSITION_CHILD_TAG = "div";
var TransitionChildRenderFeatures = Features.RenderStrategy;
function TransitionChild(props) {
  var beforeEnter = props.beforeEnter, afterEnter = props.afterEnter, beforeLeave = props.beforeLeave, afterLeave = props.afterLeave, enter = props.enter, enterFrom = props.enterFrom, enterTo = props.enterTo, leave = props.leave, leaveFrom = props.leaveFrom, leaveTo = props.leaveTo, rest = _objectWithoutPropertiesLoose(props, ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave", "enter", "enterFrom", "enterTo", "leave", "leaveFrom", "leaveTo"]);
  var container = (0, import_react.useRef)(null);
  var _useState = (0, import_react.useState)(TreeStates.Visible), state2 = _useState[0], setState = _useState[1];
  var strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;
  var _useTransitionContext = useTransitionContext(), show = _useTransitionContext.show, appear = _useTransitionContext.appear;
  var _useParentNesting = useParentNesting(), register = _useParentNesting.register, unregister = _useParentNesting.unregister;
  var initial = useIsInitialRender();
  var id2 = useId();
  var isTransitioning = (0, import_react.useRef)(false);
  var nesting = useNesting(function() {
    if (!isTransitioning.current) {
      setState(TreeStates.Hidden);
      unregister(id2);
      events.current.afterLeave();
    }
  });
  useIsoMorphicEffect(function() {
    if (!id2)
      return;
    return register(id2);
  }, [register, id2]);
  useIsoMorphicEffect(function() {
    var _match2;
    if (strategy !== RenderStrategy.Hidden)
      return;
    if (!id2)
      return;
    if (show && state2 !== TreeStates.Visible) {
      setState(TreeStates.Visible);
      return;
    }
    match(state2, (_match2 = {}, _match2[TreeStates.Hidden] = function() {
      return unregister(id2);
    }, _match2[TreeStates.Visible] = function() {
      return register(id2);
    }, _match2));
  }, [state2, id2, register, unregister, show, strategy]);
  var enterClasses = useSplitClasses(enter);
  var enterFromClasses = useSplitClasses(enterFrom);
  var enterToClasses = useSplitClasses(enterTo);
  var leaveClasses = useSplitClasses(leave);
  var leaveFromClasses = useSplitClasses(leaveFrom);
  var leaveToClasses = useSplitClasses(leaveTo);
  var events = useEvents({
    beforeEnter,
    afterEnter,
    beforeLeave,
    afterLeave
  });
  (0, import_react.useEffect)(function() {
    if (state2 === TreeStates.Visible && container.current === null) {
      throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
    }
  }, [container, state2]);
  var skip = initial && !appear;
  useIsoMorphicEffect(function() {
    var node = container.current;
    if (!node)
      return;
    if (skip)
      return;
    isTransitioning.current = true;
    if (show)
      events.current.beforeEnter();
    if (!show)
      events.current.beforeLeave();
    return show ? transition(node, enterClasses, enterFromClasses, enterToClasses, function(reason) {
      isTransitioning.current = false;
      if (reason === Reason.Finished)
        events.current.afterEnter();
    }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, function(reason) {
      isTransitioning.current = false;
      if (reason !== Reason.Finished)
        return;
      if (!hasChildren(nesting)) {
        setState(TreeStates.Hidden);
        unregister(id2);
        events.current.afterLeave();
      }
    });
  }, [events, id2, isTransitioning, unregister, nesting, container, skip, show, enterClasses, enterFromClasses, enterToClasses, leaveClasses, leaveFromClasses, leaveToClasses]);
  var propsBag = {};
  var propsWeControl = {
    ref: container
  };
  var passthroughProps = rest;
  return import_react.default.createElement(NestingContext.Provider, {
    value: nesting
  }, render(_extends({}, passthroughProps, propsWeControl), propsBag, DEFAULT_TRANSITION_CHILD_TAG, TransitionChildRenderFeatures, state2 === TreeStates.Visible));
}
__name(TransitionChild, "TransitionChild");
function Transition(props) {
  var show = props.show, _props$appear = props.appear, appear = _props$appear === void 0 ? false : _props$appear, unmount = props.unmount, passthroughProps = _objectWithoutPropertiesLoose(props, ["show", "appear", "unmount"]);
  if (![true, false].includes(show)) {
    throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");
  }
  var _useState2 = (0, import_react.useState)(show ? TreeStates.Visible : TreeStates.Hidden), state2 = _useState2[0], setState = _useState2[1];
  var nestingBag = useNesting(function() {
    setState(TreeStates.Hidden);
  });
  var initial = useIsInitialRender();
  var transitionBag = (0, import_react.useMemo)(function() {
    return {
      show,
      appear: appear || !initial
    };
  }, [show, appear, initial]);
  (0, import_react.useEffect)(function() {
    if (show) {
      setState(TreeStates.Visible);
    } else if (!hasChildren(nestingBag)) {
      setState(TreeStates.Hidden);
    }
  }, [show, nestingBag]);
  var sharedProps = {
    unmount
  };
  var propsBag = {};
  return import_react.default.createElement(NestingContext.Provider, {
    value: nestingBag
  }, import_react.default.createElement(TransitionContext.Provider, {
    value: transitionBag
  }, render(_extends({}, sharedProps, {
    as: import_react.Fragment,
    children: import_react.default.createElement(TransitionChild, Object.assign({}, sharedProps, passthroughProps))
  }), propsBag, import_react.Fragment, TransitionChildRenderFeatures, state2 === TreeStates.Visible)));
}
__name(Transition, "Transition");
Transition.Child = TransitionChild;
export {
  Dialog2 as Dialog,
  Disclosure,
  FocusTrap,
  Listbox,
  Menu,
  Popover,
  Portal,
  Switch,
  Transition
};
//# sourceMappingURL=@headlessui_react.js.map
