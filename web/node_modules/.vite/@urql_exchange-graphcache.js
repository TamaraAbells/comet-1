import {
  b
} from "./chunk.PZI7Q53A.js";
import {
  keyValMap
} from "./chunk.Y542XZO5.js";
import {
  fromPromise$1
} from "./chunk.L3G5PU7U.js";
import {
  u,
  x
} from "./chunk.I2JUFTQN.js";
import {
  createRequest,
  makeSubject$1,
  map$1
} from "./chunk.QDKH3HXJ.js";
import {
  take$1,
  u as u3
} from "./chunk.U6CQNBPC.js";
import {
  D,
  Kind as Kind2,
  filter$1,
  merge$1,
  share$1,
  u as u2
} from "./chunk.2QC3HF4U.js";
import {
  l,
  m,
  p
} from "./chunk.ZKDFWQVH.js";
import {
  require_printer
} from "./chunk.WZSZG6XK.js";
import {
  Kind,
  inspect,
  invariant
} from "./chunk.K5PCYWJY.js";
import "./chunk.BROQQF2P.js";
import "./chunk.FNFVRXQK.js";
import "./chunk.5OSL2VXB.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/utilities/valueFromASTUntyped.mjs
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case Kind.NULL:
      return null;
    case Kind.INT:
      return parseInt(valueNode.value, 10);
    case Kind.FLOAT:
      return parseFloat(valueNode.value);
    case Kind.STRING:
    case Kind.ENUM:
    case Kind.BOOLEAN:
      return valueNode.value;
    case Kind.LIST:
      return valueNode.values.map(function(node) {
        return valueFromASTUntyped(node, variables);
      });
    case Kind.OBJECT:
      return keyValMap(valueNode.fields, function(field) {
        return field.name.value;
      }, function(field) {
        return valueFromASTUntyped(field.value, variables);
      });
    case Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  }
  invariant(0, "Unexpected value node: " + inspect(valueNode));
}
__name(valueFromASTUntyped, "valueFromASTUntyped");

// ../.yarn/$$virtual/@urql-exchange-graphcache-virtual-a4882eba46/0/cache/@urql-exchange-graphcache-npm-4.0.0-e567eac736-21175dba85.zip/node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs
var import_printer = require_printer();

// ../.yarn/cache/wonka-npm-4.0.15-716683372a-df4fd51c15.zip/node_modules/wonka/dist/wonka.mjs
function w(a) {
  if (a === void 0) {
    return (a = [v, 0]).tag = 256, a;
  }
  if (a === null || a[0] !== v) {
    return a;
  }
  (a = [v, a[1] + 1 | 0]).tag = 256;
  return a;
}
__name(w, "w");
function x2(a) {
  if (a === null || a[0] !== v) {
    return a;
  }
  if ((a = a[1]) !== 0) {
    return [v, a - 1 | 0];
  }
}
__name(x2, "x");
function z(a) {
  return function(b2) {
    return function(c) {
      function d(b3) {
        typeof b3 == "number" ? k && (k = false, (b3 = e.shift()) !== void 0 ? (b3 = a(x2(b3)), k = true, b3(d)) : q ? c(0) : g || (g = true, f(0))) : b3.tag ? k && (c(b3), n2 ? n2 = false : h(0)) : (h = b3 = b3[0], n2 = false, b3(0));
      }
      __name(d, "d");
      let e = [], f = m, g = false, h = m, k = false, n2 = false, q = false;
      b2(function(b3) {
        typeof b3 == "number" ? q || (q = true, k || e.length !== 0 || c(0)) : b3.tag ? q || (b3 = b3[0], g = false, k ? e.push(b3) : (b3 = a(b3), k = true, b3(d))) : f = b3[0];
      });
      c(l(0, [
        function(c2) {
          if (c2) {
            if (q || (q = true, f(1)), k) {
              return k = false, h(1);
            }
          } else {
            q || g || (g = true, f(0)), k && !n2 && (n2 = true, h(0));
          }
        }
      ]));
    };
  };
}
__name(z, "z");
function B(a) {
  return a;
}
__name(B, "B");
function combine$1(a, b2) {
  return function(a2, b3) {
    return function(c) {
      let d = m, e = m, f = void 0, g = void 0, h = false, k = 0, n2 = false;
      a2(function(a3) {
        var b4 = g;
        typeof a3 == "number" ? 1 > k ? k = k + 1 | 0 : n2 || (n2 = true, c(0)) : a3.tag ? (a3 = a3[0], b4 !== void 0 ? n2 || (f = w(a3), h = false, c(l(1, [[a3, x2(b4)]]))) : (f = w(a3), h ? h = false : e(0))) : d = a3[0];
      });
      b3(function(a3) {
        var b4 = f;
        typeof a3 == "number" ? 1 > k ? k = k + 1 | 0 : n2 || (n2 = true, c(0)) : a3.tag ? (a3 = a3[0], b4 !== void 0 ? n2 || (g = w(a3), h = false, c(l(1, [[x2(b4), a3]]))) : (g = w(a3), h ? h = false : d(0))) : e = a3[0];
      });
      c(l(0, [
        function(c2) {
          if (!n2) {
            if (c2) {
              return n2 = true, d(1), e(1);
            }
            if (!h) {
              return h = true, d(c2), e(c2);
            }
          }
        }
      ]));
    };
  }(a, b2);
}
__name(combine$1, "combine$1");
function concat$1(a) {
  return z(B)(p(a));
}
__name(concat$1, "concat$1");
function scan$1(a, b2) {
  return function(a2, b3) {
    return function(c) {
      return function(d) {
        let e = b3;
        return c(function(c2) {
          typeof c2 == "number" ? c2 = 0 : c2.tag ? (e = a2(e, c2[0]), c2 = l(1, [e])) : c2 = l(0, [c2[0]]);
          d(c2);
        });
      };
    };
  }(a, b2);
}
__name(scan$1, "scan$1");
var v = [];

// ../.yarn/$$virtual/@urql-exchange-graphcache-virtual-a4882eba46/0/cache/@urql-exchange-graphcache-npm-4.0.0-e567eac736-21175dba85.zip/node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs
function n(a) {
  return a.name.value;
}
__name(n, "n");
function t(a) {
  return a.selectionSet ? a.selectionSet.selections : [];
}
__name(t, "t");
function aa(a, b2) {
  var e, f, g, h, c = {}, d = 0;
  if (a.arguments && a.arguments.length) {
    for (e = 0, f = a.arguments.length; e < f; e++) {
      (h = valueFromASTUntyped((g = a.arguments[e]).value, b2)) != null && (c[n(g)] = h, d++);
    }
  }
  return 0 < d ? c : null;
}
__name(aa, "aa");
function ba(a, b2) {
  var d, e, f, g, h, c = {};
  if (!b2) {
    return c;
  }
  if (a.variableDefinitions) {
    for (d = 0, e = a.variableDefinitions.length; d < e; d++) {
      c[g = n((f = a.variableDefinitions[d]).variable)] = b2[g] === void 0 && f.defaultValue ? valueFromASTUntyped(f.defaultValue, b2) : b2[g];
    }
  }
  for (h in b2) {
    h in c || (c[h] = b2[h]);
  }
  return c;
}
__name(ba, "ba");
function x3(a, b2) {
  var c = "";
  b2.kind === Kind2.INLINE_FRAGMENT ? c = a ? 'Inline Fragment on "' + a + '"' : "Inline Fragment" : b2.kind === Kind2.OPERATION_DEFINITION ? c = (b2.name ? '"' + b2.name.value + '"' : "Unnamed") + " " + b2.operation : b2.kind === Kind2.FRAGMENT_DEFINITION && (c = '"' + b2.name.value + '" Fragment');
  c && u4.push(c);
}
__name(x3, "x");
function da() {
  return u4.length ? "\n(Caused At: " + u4.join(", ") + ")" : "";
}
__name(da, "da");
function y(a, b2, c) {
  if (!a) {
    throw a = b2 || "Minfied Error #" + c + "\n", a += da(), (c = Error(a + "\nhttps://bit.ly/2XbVrpR#" + c)).name = "Graphcache Error", c;
  }
}
__name(y, "y");
function A(a, b2) {
  ca.has(a) || (console.warn(a + da() + "\nhttps://bit.ly/2XbVrpR#" + b2), ca.add(a));
}
__name(A, "A");
function C(a) {
  for (var b2 = 0; b2 < a.definitions.length; b2++) {
    if (a.definitions[b2].kind === Kind2.OPERATION_DEFINITION) {
      return a.definitions[b2];
    }
  }
  y(false, true ? "Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation." : "", 1);
}
__name(C, "C");
function D2(a) {
  var b2, c, d;
  for (b2 = {}, c = 0; c < a.definitions.length; c++) {
    (d = a.definitions[c]).kind === Kind2.FRAGMENT_DEFINITION && (b2[n(d)] = d);
  }
  return b2;
}
__name(D2, "D");
function ea(a, b2) {
  var d, e, f, c = a.directives;
  if (!c) {
    return true;
  }
  for (d = 0, e = c.length; d < e; d++) {
    if (((a = n(f = c[d])) === "include" || a === "skip") && f.arguments && f.arguments[0] && n(f.arguments[0]) === "if") {
      return b2 = valueFromASTUntyped(f.arguments[0].value, b2), a === "include" ? !!b2 : !b2;
    }
  }
  return true;
}
__name(ea, "ea");
function fa(a) {
  for (var b2 = {}, c = 0; c < a.length; c++) {
    b2[a[c].name] = a[c];
  }
  return b2;
}
__name(fa, "fa");
function na(a, b2, c) {
  if (ia.test(c)) {
    return true;
  }
  return !!(a = F(a, b2, c)) && a.type.kind !== "NON_NULL";
}
__name(na, "na");
function oa(a, b2, c) {
  if (!(a = F(a, b2, c))) {
    return false;
  }
  return (a = a.type.kind === "NON_NULL" ? a.type.ofType : a.type).kind === "LIST" && a.ofType.kind !== "NON_NULL";
}
__name(oa, "oa");
function F(a, b2, c) {
  pa(a, b2);
  a = a.types[b2].fields[c];
  a || A("Invalid field: The field `" + c + "` does not exist on `" + b2 + "`, but the GraphQL document expects it to exist.\nTraversal will continue, however this may lead to undefined behavior!", 4);
  return a;
}
__name(F, "F");
function pa(a, b2) {
  y(a.types[b2] && a.types[b2].kind === "OBJECT", true ? "Invalid Object type: The type `" + b2 + "` is not an object in the defined schema, but the GraphQL document is traversing it." : "", 3);
}
__name(pa, "pa");
function qa(a) {
  A("Invalid resolver: `" + a + "` is not in the defined schema, but the `resolvers` option is referencing it.", 23);
}
__name(qa, "qa");
function I(a, b2) {
  return b2 ? a + "(" + u2(b2) + ")" : a;
}
__name(I, "I");
function ra(a) {
  var b2 = a.indexOf("(");
  return -1 < b2 ? {
    fieldKey: a,
    fieldName: a.slice(0, b2),
    arguments: JSON.parse(a.slice(b2 + 1, -1))
  } : {
    fieldKey: a,
    fieldName: a,
    arguments: null
  };
}
__name(ra, "ra");
function sa(a, b2) {
  return a.replace(/\./g, "%2e") + "." + b2;
}
__name(sa, "sa");
function ta(a) {
  var b2 = a.indexOf(".");
  return {
    entityKey: a.slice(0, b2).replace(/%2e/g, "."),
    fieldKey: a = a.slice(b2 + 1)
  };
}
__name(ta, "ta");
function J() {
  return Object.create(null);
}
__name(J, "J");
function S(a, b2, c, d) {
  K = a;
  L = b2;
  M = J();
  Q = !!d;
  u4.length = 0;
  c ? d || 0 < b2.optimisticOrder.length ? (d || b2.commutativeKeys.has(c) ? d && b2.commutativeKeys.delete(c) : ua(b2, c), P = c, b2.optimisticOrder.indexOf(c) === -1 && b2.optimisticOrder.unshift(c), b2.refLock[c] || (b2.refLock[c] = J(), b2.links.optimistic[c] = new Map(), b2.records.optimistic[c] = new Map())) : (P = null, va(b2, c)) : P = null;
}
__name(S, "S");
function T() {
  ya();
  var b2 = L, c = P;
  Q = false;
  P = null;
  if (c && -1 < b2.optimisticOrder.indexOf(c)) {
    for (c = b2.optimisticOrder.length; 0 <= --c && b2.refLock[b2.optimisticOrder[c]] && b2.commutativeKeys.has(b2.optimisticOrder[c]); ) {
      Aa(b2.optimisticOrder[c]);
    }
  }
  M = L = K = null;
  u4.length = 0;
  b2.defer || (b2.defer = true, Promise.resolve().then(/* @__PURE__ */ __name(function a() {
    S("read", b2, null);
    L.gc.forEach(wa);
    !(/* @__PURE__ */ __name(function xa() {
      function a2(a3) {
        var f, c2 = ta(a3), e = c2.entityKey;
        (f = W(e, c2 = c2.fieldKey)) !== void 0 ? b3[a3] = ":" + u2(f) : (f = V(e, c2)) !== void 0 ? b3[a3] = u2(f) : b3[a3] = void 0;
      }
      __name(a2, "a");
      if (L.storage) {
        Q = true;
        K = "read";
        var b3 = J();
        L.persist.forEach(a2);
        Q = false;
        L.storage.writeData(b3);
        L.persist.clear();
      }
    }, "xa"))();
    T();
    b2.defer = false;
  }, "a")));
}
__name(T, "T");
function ya() {
  y(M !== null, true ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2);
  return M;
}
__name(ya, "ya");
function Ba(a, b2, c, d) {
  var e = (a = P ? a.optimistic[P] : a.base).get(b2);
  e === void 0 && a.set(b2, e = J());
  d !== void 0 || P ? e[c] = d : delete e[c];
}
__name(Ba, "Ba");
function Ca(a, b2, c) {
  var d, e, f, g, h, k;
  for (e = !Q && K === "read" && P && L.commutativeKeys.has(P), f = 0, g = L.optimisticOrder.length; f < g; f++) {
    h = L.optimisticOrder[f];
    e = e && h !== P;
    if (!(!(k = a.optimistic[h]) || e && L.commutativeKeys.has(h) || Q && K !== "write" && !L.commutativeKeys.has(h)) && (d = k.get(b2)) !== void 0 && c in d) {
      return d[c];
    }
  }
  return (d = a.base.get(b2)) !== void 0 ? d[c] : void 0;
}
__name(Ca, "Ca");
function Da(a, b2, c, d) {
  var e = b2[c] !== void 0 ? b2[c] : 0;
  b2 = b2[c] = e + d | 0;
  a !== void 0 && (0 >= b2 ? a.add(c) : 0 >= e && 0 < b2 && a.delete(c));
}
__name(Da, "Da");
function Ea(a, b2, c, d) {
  var e, f, g;
  if (typeof c == "string") {
    Da(a, b2, c, d);
  } else if (Array.isArray(c)) {
    for (e = 0, f = c.length; e < f; e++) {
      (g = c[e]) && Da(a, b2, g, d);
    }
  }
}
__name(Ea, "Ea");
function Fa(a, b2, c) {
  if (c !== void 0) {
    for (var d in c) {
      b2.has(d) || (a.push(ra(d)), b2.add(d));
    }
  }
}
__name(Fa, "Fa");
function Ga(a, b2, c, d) {
  var e, f, g;
  Fa(a, b2, d.base.get(c));
  for (e = 0, f = L.optimisticOrder.length; e < f; e++) {
    (g = d.optimistic[L.optimisticOrder[e]]) !== void 0 && Fa(a, b2, g.get(c));
  }
}
__name(Ga, "Ga");
function wa(a, b2, c) {
  var d, e;
  if (0 < (L.refCount[a] || 0)) {
    c.delete(a);
  } else {
    for (d in L.refLock) {
      if (0 < ((b2 = L.refLock[d])[a] || 0)) {
        return;
      }
      delete b2[a];
    }
    delete L.refCount[a];
    c.delete(a);
    L.records.base.delete(a);
    if (d = L.links.base.get(a)) {
      L.links.base.delete(a);
      for (e in d) {
        Ea(c, L.refCount, d[e], -1);
      }
    }
  }
}
__name(wa, "wa");
function U(a, b2) {
  b2 !== "__typename" && (a !== L.queryRootKey ? M[a] = true : b2 !== void 0 && (M[a + "." + b2] = true));
}
__name(U, "U");
function V(a, b2) {
  U(a, b2);
  return Ca(L.records, a, b2);
}
__name(V, "V");
function W(a, b2) {
  U(a, b2);
  return Ca(L.links, a, b2);
}
__name(W, "W");
function X(a, b2, c) {
  U(a, b2);
  !Q && L.storage && L.persist.add(sa(a, b2));
  Ba(L.records, a, b2, c);
}
__name(X, "X");
function Ha(a, b2, c) {
  var e, f, g, d = L;
  if (P) {
    e = d.refLock[P] || (d.refLock[P] = J());
    f = d.links.optimistic[P];
  } else {
    e = d.refCount;
    f = d.links.base;
    g = d.gc;
  }
  f = (f = f && f.get(a)) && f[b2];
  U(a, b2);
  !Q && L.storage && L.persist.add(sa(a, b2));
  Ba(d.links, a, b2, c);
  Ea(g, e, f, -1);
  Ea(g, e, c, 1);
}
__name(Ha, "Ha");
function ua(a, b2) {
  var c = a.optimisticOrder.indexOf(b2);
  c === -1 ? a.optimisticOrder.unshift(b2) : a.commutativeKeys.has(b2) || (Ia(a, b2), a.optimisticOrder.splice(c, 1), a.optimisticOrder.unshift(b2));
  a.commutativeKeys.add(b2);
}
__name(ua, "ua");
function Ia(a, b2) {
  a.refLock[b2] && (delete a.refLock[b2], delete a.records.optimistic[b2], delete a.links.optimistic[b2]);
}
__name(Ia, "Ia");
function va(a, b2) {
  var c = a.optimisticOrder.indexOf(b2);
  -1 < c && (a.optimisticOrder.splice(c, 1), a.commutativeKeys.delete(b2));
  Ia(a, b2);
}
__name(va, "va");
function Ja(a, b2) {
  for (var c in a) {
    Ha(b2, c, a[c]);
  }
}
__name(Ja, "Ja");
function Ka(a, b2) {
  for (var c in a) {
    X(b2, c, a[c]);
  }
}
__name(Ka, "Ka");
function Aa(a) {
  var c, b2 = M;
  M = J();
  (c = L.links.optimistic[a]) && c.forEach(Ja);
  (c = L.records.optimistic[a]) && c.forEach(Ka);
  M = b2;
  va(L, a);
}
__name(Aa, "Aa");
function La(a) {
  var b2 = L.links, c = L.records, d = [], e = new Set();
  U(a);
  Ga(d, e, a, b2);
  Ga(d, e, a, c);
  return d;
}
__name(La, "La");
function Na(a) {
  return 0 < a.__internal.path.length && a.__internal.errorMap ? a.__internal.errorMap[a.__internal.path.join(".")] : void 0;
}
__name(Na, "Na");
function Oa(a, b2, c, d, e, f, g) {
  a = {
    store: a,
    variables: b2,
    fragments: c,
    parent: {
      __typename: d
    },
    parentTypeName: d,
    parentKey: e,
    parentFieldKey: "",
    fieldName: "",
    error: void 0,
    partial: false,
    optimistic: !!f,
    __internal: {
      path: [],
      errorMap: void 0
    }
  };
  if (g && g.graphQLErrors) {
    for (b2 = 0; b2 < g.graphQLErrors.length; b2++) {
      (c = g.graphQLErrors[b2]).path && c.path.length && (a.__internal.errorMap || (a.__internal.errorMap = Object.create(null)), a.__internal.errorMap[c.path.join(".")] = c);
    }
  }
  return a;
}
__name(Oa, "Oa");
function Pa(a, b2, c, d, e, f) {
  Ma.current = a;
  a.parent = b2;
  a.parentTypeName = c;
  a.parentKey = d;
  a.parentFieldKey = e;
  a.fieldName = f;
  a.error = Na(a);
}
__name(Pa, "Pa");
function Qa(a, b2, c, d) {
  if (!b2) {
    return false;
  }
  var e = a.typeCondition ? n(a.typeCondition) : null;
  if (!e || b2 === e) {
    return true;
  }
  A("Heuristic Fragment Matching: A fragment is trying to match against the `" + b2 + "` type, but the type condition is `" + e + "`. Since GraphQL allows for interfaces `" + e + "` may be aninterface.\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!", 16);
  return !t(a).some(function(a2) {
    if (a2.kind !== Kind2.FIELD) {
      return false;
    }
    a2 = I(n(a2), aa(a2, d));
    return !(V(c, a2) !== void 0 || W(c, a2) !== void 0);
  });
}
__name(Qa, "Qa");
function Ra(a, b2, c, d) {
  var e, f = 0;
  return function() {
    var g, h, k, l2;
    if (e !== void 0) {
      if ((g = e()) !== void 0) {
        return g;
      }
      e = void 0;
      u4.pop();
    }
    for (; f < c.length; ) {
      if (ea(g = c[f++], d.variables)) {
        if (g.kind === Kind2.FIELD) {
          return g;
        }
        if ((g = g.kind === Kind2.INLINE_FRAGMENT ? g : d.fragments[n(g)]) !== void 0) {
          if (d.store.schema) {
            h = d.store.schema;
            if (k = a) {
              (l2 = g.typeCondition ? n(g.typeCondition) : null) && k !== l2 ? h.types[l2] && h.types[l2].kind === "OBJECT" ? h = l2 === k : (y(h.types[l2] && (h.types[l2].kind === "INTERFACE" || h.types[l2].kind === "UNION"), true ? "Invalid Abstract type: The type `" + l2 + "` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition." : "", 5), pa(h, k), h = h.isSubType(l2, k)) : h = true;
            } else {
              h = false;
            }
          } else {
            h = Qa(g, a, b2, d.variables);
          }
          if (h) {
            return x3(a, g), (e = Ra(a, b2, t(g), d))();
          }
        }
      }
    }
  };
}
__name(Ra, "Ra");
function Sa(a) {
  return a === void 0 ? null : a;
}
__name(Sa, "Sa");
function Ta(a, b2, c, d, e) {
  S("write", a.data, e || null);
  a = Ua(a, b2, c, d);
  T();
  return a;
}
__name(Ta, "Ta");
function Ua(a, b2, c, d, e) {
  var f = C(b2.query), g = {
    data: c,
    dependencies: ya()
  }, h = a.rootFields[f.operation];
  a = Oa(a, ba(f, b2.variables), D2(b2.query), h, h, !!e, d);
  x3(h, f);
  Va(a, h, t(f), c);
  u4.pop();
  return g;
}
__name(Ua, "Ua");
function Va(a, b2, c, d) {
  var h, k, l2, p2, m2, w2, v2, B2, e = b2 === a.store.rootFields.query, f = !e && !!a.store.rootNames[b2], g = f || e ? b2 : d.__typename;
  if (g) {
    f || e || !b2 || X(b2, "__typename", g);
    c = Ra(g, b2 || g, c, a);
    for (; h = c(); ) {
      e = I(k = n(h), l2 = aa(h, a.variables));
      m2 = d[p2 = h.alias ? h.alias.value : n(h)];
      if (true) {
        if (f || m2 !== void 0) {
          if (a.store.schema && g && k !== "__typename") {
            w2 = a.store.schema, v2 = g;
            ia.test(B2 = k) || F(w2, v2, B2);
          }
        } else {
          k = a.optimistic ? "\nYour optimistic result may be missing a field!" : "";
          l2 = h.selectionSet === void 0 ? "scalar (number, boolean, etc)" : "selection set";
          A("Invalid undefined: The field at `" + e + "` is `undefined`, but the GraphQL query expects a " + l2 + " for this field." + k, 13);
          continue;
        }
      }
      if (k !== "__typename") {
        a.__internal.path.push(p2);
        if (a.optimistic && f) {
          if (!(m2 = a.store.optimisticMutations[k])) {
            continue;
          }
          Pa(a, d, g, g, e, k);
          m2 = d[p2] = Sa(m2(l2 || {}, a.store, a));
        }
        h.selectionSet ? b2 && !f ? (p2 = b2 + "." + e, Ha(b2 || g, e, h = Wa(a, t(h), Sa(m2), p2))) : Wa(a, t(h), Sa(m2)) : b2 && !f && X(b2 || g, e, m2 === null && Na(a) ? void 0 : m2);
        f && (h = a.store.updates[g][k]) && (Pa(a, d, g, g, g + "." + e, k), d[k] = m2, h(d, l2 || {}, a.store, a));
        a.__internal.path.pop();
      }
    }
  } else {
    A("Couldn't find __typename when writing.\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.", 14);
  }
}
__name(Va, "Va");
function Wa(a, b2, c, d) {
  var e, f, g, h;
  if (Array.isArray(c)) {
    for (e = Array(c.length), f = 0, g = c.length; f < g; f++) {
      a.__internal.path.push(f);
      h = Wa(a, b2, c[f], d ? d + "." + f : void 0);
      e[f] = h;
      a.__internal.path.pop();
    }
    return e;
  }
  if (c === null) {
    return Na(a) ? void 0 : null;
  }
  e = a.store.keyOfEntity(c);
  f = c.__typename;
  !d || a.store.keys[c.__typename] || e !== null || typeof f != "string" || Xa.test(f) || A("Invalid key: The GraphQL query at the field at `" + d + "` has a selection set, but no key could be generated for the data at this field.\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `" + f + "`.\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `" + f + "` that always returns null.", 15);
  Va(a, d = e || d, b2, c);
  return d || null;
}
__name(Wa, "Wa");
function Y(a) {
  var b2, c, d, e, f, g, h, k, l2, p2, m2, w2, v2;
  this.keyOfField = I;
  this.resolveFieldByKey = this.resolve;
  a || (a = {});
  this.resolvers = a.resolvers || {};
  this.optimisticMutations = a.optimistic || {};
  this.keys = a.keys || {};
  d = "Query", e = "Mutation", f = "Subscription";
  if (a.schema) {
    g = (/* @__PURE__ */ __name(function ha(a2) {
      function b3(a3) {
        switch (a3.kind) {
          case "OBJECT":
          case "INTERFACE":
            return {
              name: a3.name,
              kind: a3.kind,
              interfaces: e2(a3.interfaces || []),
              fields: e2(a3.fields.map(c2))
            };
          case "UNION":
            return {
              name: a3.name,
              kind: a3.kind,
              types: e2(a3.possibleTypes || [])
            };
        }
      }
      __name(b3, "b");
      function c2(a3) {
        return {
          name: a3.name,
          type: a3.type,
          args: e2(a3.args)
        };
      }
      __name(c2, "c");
      var d2, e2, f2, g2, h2, k2;
      d2 = {}, e2 = fa, f2 = {
        query: (a2 = a2.__schema).queryType ? a2.queryType.name : null,
        mutation: a2.mutationType ? a2.mutationType.name : null,
        subscription: a2.subscriptionType ? a2.subscriptionType.name : null,
        types: void 0,
        isSubType: function(a3, b4) {
          var c3 = d2[a3], e3 = d2[b4];
          return c3 && e3 ? c3.kind === "UNION" ? !!c3.types[b4] : c3.kind !== "OBJECT" && e3.kind === "OBJECT" ? !!e3.interfaces[a3] : a3 === b4 : false;
        }
      };
      if (a2.types) {
        f2.types = d2;
        for (g2 = 0; g2 < a2.types.length; g2++) {
          if ((h2 = a2.types[g2]) && h2.name) {
            (k2 = b3(h2)) && (d2[h2.name] = k2);
          }
        }
      }
      return f2;
    }, "ha"))(a.schema);
    d = g.query || d;
    e = g.mutation || e;
    f = g.subscription || f;
    g.types && (this.schema = g);
  }
  this.updates = ((b2 = {})[e] = a.updates && a.updates.Mutation || {}, b2[f] = a.updates && a.updates.Subscription || {}, b2);
  this.rootFields = {
    query: d,
    mutation: e,
    subscription: f
  };
  this.rootNames = ((c = {})[d] = "query", c[e] = "mutation", c[f] = "subscription", c);
  a = d;
  this.data = {
    defer: false,
    gc: new Set(),
    persist: new Set(),
    queryRootKey: a,
    refCount: J(),
    refLock: J(),
    links: {
      optimistic: J(),
      base: new Map()
    },
    records: {
      optimistic: J(),
      base: new Map()
    },
    commutativeKeys: new Set(),
    optimisticOrder: [],
    storage: null
  };
  if (this.schema && true) {
    a = this.schema;
    b2 = this.keys;
    if (true) {
      for (h in b2) {
        a.types[h] || A("Invalid Object type: The type `" + h + "` is not an object in the defined schema, but the `keys` option is referencing it.", 20);
      }
    }
    h = this.schema;
    a = this.updates;
    if (true) {
      if (h.mutation) {
        b2 = h.types[h.mutation].fields;
        c = a[h.mutation] || {};
        for (k in c) {
          b2[k] === void 0 && A("Invalid mutation field: `" + k + "` is not in the defined schema, but the `updates.Mutation` option is referencing it.", 21);
        }
      }
      if (h.subscription) {
        k = h.types[h.subscription].fields;
        h = a[h.subscription] || {};
        for (l2 in h) {
          k[l2] === void 0 && A("Invalid subscription field: `" + l2 + "` is not in the defined schema, but the `updates.Subscription` option is referencing it.", 22);
        }
      }
    }
    l2 = this.schema;
    k = this.resolvers;
    if (true) {
      for (p2 in k) {
        if (p2 === "Query") {
          if (l2.query) {
            h = l2.types[l2.query].fields;
            for (m2 in k.Query) {
              h[m2] || qa("Query." + m2);
            }
          } else {
            qa("Query");
          }
        } else if (l2.types[p2]) {
          if (l2.types[p2].kind === "INTERFACE" || l2.types[p2].kind === "UNION") {
            A("Invalid resolver: `" + p2 + "` does not match to a concrete type in the schema, but the `resolvers` option is referencing it. Implement the resolver for the types that " + (l2.types[p2].kind === "UNION" ? "make up the union" : "implement the interface") + " instead.", 26);
          } else {
            h = l2.types[p2].fields;
            for (w2 in k[p2]) {
              h[w2] || qa(p2 + "." + w2);
            }
          }
        } else {
          qa(p2);
        }
      }
    }
    m2 = this.schema;
    p2 = this.optimisticMutations;
    if (m2.mutation) {
      m2 = m2.types[m2.mutation].fields;
      for (v2 in p2) {
        m2[v2] || A("Invalid optimistic mutation field: `" + v2 + "` is not a mutation field in the defined schema, but the `optimistic` option is referencing it.", 24);
      }
    }
  }
}
__name(Y, "Y");
function Za(a, b2, c, d, e) {
  S("read", a.data, c && e || null);
  a = Ya(a, b2, c, d);
  T();
  return a;
}
__name(Za, "Za");
function Ya(a, b2, c, d) {
  var e = C(b2.query), f = a.rootFields[e.operation], g = t(e);
  a = Oa(a, ba(e, b2.variables), D2(b2.query), f, f, false, d);
  x3(f, e);
  c = f !== a.store.rootFields.query ? $a(a, f, g, c || {}) : Z(a, f, g, {});
  u4.pop();
  return {
    dependencies: ya(),
    partial: a.partial || !c,
    data: c || null
  };
}
__name(Ya, "Ya");
function $a(a, b2, c, d) {
  var f, g, e = a.store.rootNames[b2] ? b2 : d.__typename;
  if (typeof e != "string") {
    return d;
  }
  b2 = Ra(b2, b2, c, a);
  for (e = {
    __typename: e
  }; c = b2(); ) {
    g = d[f = c.alias ? c.alias.value : n(c)];
    a.__internal.path.push(f);
    c.selectionSet && g !== null ? (g = Sa(g), e[f] = ab(a, t(c), g)) : e[f] = g;
    a.__internal.path.pop();
  }
  return e;
}
__name($a, "$a");
function ab(a, b2, c) {
  if (Array.isArray(c)) {
    for (var d = Array(c.length), e = 0, f = c.length; e < f; e++) {
      a.__internal.path.push(e), d[e] = ab(a, b2, c[e]), a.__internal.path.pop();
    }
    return d;
  }
  if (c === null) {
    return null;
  }
  return (d = a.store.keyOfEntity(c)) !== null ? (a = Z(a, d, b2, {})) === void 0 ? null : a : $a(a, c.__typename, b2, c);
}
__name(ab, "ab");
function Z(a, b2, c, d, e) {
  var k, l2, p2, m2, w2, v2, B2, N, r, G, E, q, z2, H, f = a.store, g = b2 === f.rootFields.query, h = e && f.keyOfEntity(e) || b2;
  !g && a.store.rootNames[h] && A("Invalid root traversal: A selection was being read on `" + h + "` which is an uncached root type.\nThe `" + a.store.rootFields.mutation + "` and `" + a.store.rootFields.subscription + "` types are special Operation Root Types and cannot be read back from the cache.", 25);
  if (typeof (b2 = g ? b2 : V(h, "__typename") || e && e.__typename) == "string") {
    if (e && b2 !== e.__typename) {
      A("Invalid resolver data: The resolver at `" + h + "` returned an invalid typename that could not be reconciled with the cache.", 8);
    } else {
      c = Ra(b2, h, c, a);
      for (l2 = false, p2 = false; (k = c()) !== void 0; ) {
        m2 = n(k), w2 = aa(k, a.variables), v2 = k.alias ? k.alias.value : n(k), N = h + "." + (B2 = I(m2, w2)), r = V(h, B2), G = e ? e[m2] : void 0, E = f.resolvers[b2];
        if (f.schema && b2) {
          q = f.schema, z2 = b2;
          ia.test(H = m2) || F(q, z2, H);
        }
        if (m2 === "__typename") {
          d[v2] = b2;
        } else {
          q = void 0;
          a.__internal.path.push(v2);
          if (G !== void 0 && k.selectionSet === void 0) {
            q = G;
          } else if (y(K !== null, true ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2), K === "read" && E && typeof E[m2] == "function") {
            if (Pa(a, d, b2, h, N, m2), r !== void 0 && (d[v2] = r), q = E[m2](d, w2 || {}, f, a), k.selectionSet && (q = bb(a, b2, m2, N, t(k), d[v2], q)), f.schema && q === null && !na(f.schema, b2, m2)) {
              return;
            }
          } else {
            k.selectionSet ? G !== void 0 ? q = bb(a, b2, m2, N, t(k), d[v2], G) : (w2 = W(h, B2)) !== void 0 ? q = cb(a, w2, b2, m2, t(k), d[v2]) : typeof r == "object" && r !== null && (q = r) : q = r;
          }
          q === void 0 && Na(a) && (p2 = true, q = null);
          a.__internal.path.pop();
          if (q === void 0 && f.schema && na(f.schema, b2, m2)) {
            p2 = true, d[v2] = null;
          } else {
            if (q === void 0) {
              return;
            }
            l2 = true;
            d[v2] = q;
          }
        }
      }
      p2 && (a.partial = true);
      return g && p2 && !l2 ? void 0 : d;
    }
  }
}
__name(Z, "Z");
function bb(a, b2, c, d, e, f, g) {
  var h, k, l2, p2, m2;
  if (Array.isArray(g)) {
    h = !(h = a.store).schema || oa(h.schema, b2, c);
    for (k = Array(g.length), l2 = 0, p2 = g.length; l2 < p2; l2++) {
      a.__internal.path.push(l2);
      m2 = bb(a, b2, c, d + "." + l2, e, f != null ? f[l2] : void 0, g[l2]);
      a.__internal.path.pop();
      if (m2 !== void 0 || h) {
        k[l2] = m2 !== void 0 ? m2 : null;
      } else {
        return;
      }
    }
    return k;
  }
  if (g == null) {
    return g;
  }
  if (f === null) {
    return null;
  }
  if (typeof g == "string" || typeof g == "object" && typeof g.__typename == "string") {
    return b2 = f || {}, typeof g == "string" ? Z(a, g, e, b2) : Z(a, d, e, b2, g);
  }
  A("Invalid resolver value: The field at `" + d + "` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.", 9);
}
__name(bb, "bb");
function cb(a, b2, c, d, e, f) {
  var g, h, k, l2, p2;
  if (Array.isArray(b2)) {
    g = (g = a.store).schema && oa(g.schema, c, d);
    for (h = Array(b2.length), k = 0, l2 = b2.length; k < l2; k++) {
      a.__internal.path.push(k);
      p2 = cb(a, b2[k], c, d, e, f != null ? f[k] : void 0);
      a.__internal.path.pop();
      if (p2 !== void 0 || g) {
        h[k] = p2 !== void 0 ? p2 : null;
      } else {
        return;
      }
    }
    return h;
  }
  return b2 === null || f === null ? null : Z(a, b2, e, f || {});
}
__name(cb, "cb");
function db(a, b2) {
  return x(a.kind, a, b({}, a.context, {
    meta: b({}, a.context.meta, {
      cacheOutcome: b2
    })
  }));
}
__name(db, "db");
function eb(a, b2) {
  return x(a.kind, a, b({}, a.context, {
    requestPolicy: b2
  }));
}
__name(eb, "eb");
function fb(a) {
  return p(a[0]);
}
__name(fb, "fb");
function gb(a, b2) {
  return a.push(b2), a;
}
__name(gb, "gb");
function hb(a) {
  return a.kind === "query" && a.context.requestPolicy !== "network-only";
}
__name(hb, "hb");
function ib(a) {
  return a.kind !== "query" || a.context.requestPolicy === "network-only";
}
__name(ib, "ib");
function jb(a) {
  return a.outcome !== "miss" || a.operation.context.requestPolicy === "cache-only";
}
__name(jb, "jb");
function kb(a) {
  return function(b2) {
    function c(a2, b3) {
      var k2, c2 = a2.operation, d2 = a2.error, f2 = a2.extensions, g2 = c2.key;
      if (c2.kind === "mutation") {
        h(b3, R.get(g2));
        R.delete(g2);
      } else {
        ua(z2.data, c2.key);
      }
      if (a2.data) {
        if (h(b3, Ta(z2, c2, a2.data, a2.error, g2).dependencies), g2 = Za(z2, c2, a2.data, a2.error, g2), a2.data = g2.data, c2.kind === "query") {
          h(b3, k2 = g2.dependencies);
        }
      } else {
        S("read", z2.data, c2.key, void 0), T();
      }
      k2 && e(a2.operation, k2);
      return {
        data: a2.data,
        error: d2,
        extensions: f2,
        operation: c2
      };
    }
    __name(c, "c");
    function d(a2) {
      var b3 = Za(z2, a2), c2 = b3.data ? b3.partial ? "partial" : "hit" : "miss";
      e(a2, b3.dependencies);
      return {
        outcome: c2,
        operation: a2,
        data: b3.data,
        dependencies: b3.dependencies
      };
    }
    __name(d, "d");
    function e(a2, b3) {
      for (var c2 in b3) {
        (ja[c2] || (ja[c2] = [])).push(a2.key), ka.set(a2.key, a2);
      }
    }
    __name(e, "e");
    function f(a2) {
      var b3, c2, d2, e2, f2, k2, l2, O, m3, H2;
      if (a2.kind === "query") {
        ua(z2.data, a2.key);
      } else if (a2.kind === "teardown") {
        ka.delete(a2.key), S("read", z2.data, a2.key, void 0), T();
      } else if (a2.kind === "mutation" && a2.context.requestPolicy !== "network-only") {
        b3 = z2, c2 = a2.key;
        y(C(a2.query).operation === "mutation", true ? "writeOptimistic(...) was called with an operation that is not a mutation.\nThis case is unsupported and should never occur." : "", 10);
        S("write", b3.data, c2, true);
        b3 = Ua(b3, a2, {}, void 0, true);
        T();
        b3 = b3.dependencies;
        a: {
          for (d2 in b3) {
            d2 = false;
            break a;
          }
          d2 = true;
        }
        if (!d2) {
          for (e2 in b3) {
            la[e2] = true;
          }
          R.set(a2.key, b3);
          h(e2 = new Set(), b3);
          g(a2, e2);
        }
      }
      e2 = x;
      d2 = a2.kind;
      b3 = a2.key;
      c2 = u(a2.query);
      if (a2.variables) {
        f2 = C(a2.query);
        if ((k2 = a2.variables) && f2.variableDefinitions) {
          for (l2 = {}, O = 0, m3 = f2.variableDefinitions.length; O < m3; O++) {
            l2[H2 = n(f2.variableDefinitions[O].variable)] = k2[H2];
          }
          f2 = l2;
        } else {
          f2 = void 0;
        }
      } else {
        f2 = a2.variables;
      }
      return e2(d2, {
        key: b3,
        query: c2,
        variables: f2
      }, a2.context);
    }
    __name(f, "f");
    function g(a2, b3) {
      b3.forEach(function(b4) {
        var c2, d2;
        if (b4 !== a2.key) {
          if (c2 = ka.get(b4)) {
            ka.delete(b4);
            d2 = "cache-first";
            za.has(b4) && (za.delete(b4), d2 = "cache-and-network");
            E.reexecuteOperation(eb(c2, d2));
          }
        }
      });
    }
    __name(g, "g");
    function h(a2, b3) {
      var c2, d2, e2;
      if (b3) {
        for (c2 in b3) {
          if (b3 = ja[c2]) {
            ja[c2] = [];
            for (d2 = 0, e2 = b3.length; d2 < e2; d2++) {
              a2.add(b3[d2]);
            }
          }
        }
      }
    }
    __name(h, "h");
    function k(a2) {
      for (var b3 in a2) {
        if (la[b3]) {
          return true;
        }
      }
      return false;
    }
    __name(k, "k");
    function p2(a2) {
      q({
        type: "cacheMiss",
        message: "The result could not be retrieved from the cache",
        operation: a2.operation,
        source: "cacheExchange"
      });
      return db(a2.operation, "miss");
    }
    __name(p2, "p");
    function m2(a2) {
      return a2.outcome === "miss" && a2.operation.context.requestPolicy !== "cache-only" && !k(a2.dependencies);
    }
    __name(m2, "m");
    function w2(a2) {
      var b3 = a2.operation, c2 = a2.outcome, d2 = a2.dependencies, e2 = {
        operation: db(b3, c2),
        data: a2.data,
        error: a2.error,
        extensions: a2.extensions
      };
      if (b3.context.requestPolicy === "cache-and-network" || b3.context.requestPolicy === "cache-first" && c2 === "partial") {
        e2.stale = true, k(d2) ? b3.context.requestPolicy === "cache-and-network" && za.add(b3.key) : E.reexecuteOperation(eb(b3, "network-only"));
      }
      q({
        type: "cacheHit",
        message: "A requested operation was found and returned from the cache.",
        operation: a2.operation,
        data: {
          value: e2
        },
        source: "cacheExchange"
      });
      return e2;
    }
    __name(w2, "w");
    function v2(a2) {
      var b3 = new Set(), d2 = c(a2, b3);
      g(a2.operation, b3);
      return d2;
    }
    __name(v2, "v");
    function B2(a2) {
      return !R.has(a2.operation.key);
    }
    __name(B2, "B");
    function N(a2) {
      var b3, d2, e2;
      if (ma.push(a2) < R.size) {
        return u3;
      }
      for (b3 = 0; b3 < ma.length; b3++) {
        ua(z2.data, ma[b3].operation.key);
      }
      for (d2 in la) {
        delete la[d2];
      }
      b3 = [];
      d2 = new Set();
      for (; e2 = ma.shift(); ) {
        b3.push(c(e2, d2));
      }
      g(a2.operation, d2);
      return p(b3);
    }
    __name(N, "N");
    function r(a2) {
      return R.has(a2.operation.key);
    }
    __name(r, "r");
    var H, R, ma, ka, la, za, ja, G = b2.forward, E = b2.client, q = b2.dispatchDebug, z2 = new Y(a);
    a && a.storage && (H = a.storage.readData().then(/* @__PURE__ */ __name(function l2(b3) {
      var e2, f2, g2, h2, c2 = z2.data, d2 = a.storage;
      S("write", c2, null);
      for (e2 in b3) {
        if ((f2 = b3[e2]) !== void 0) {
          h2 = (g2 = ta(e2)).entityKey;
          g2 = g2.fieldKey;
          f2[0] === ":" ? Ha(h2, g2, JSON.parse(f2.slice(1))) : X(h2, g2, JSON.parse(f2));
        }
      }
      T();
      c2.storage = d2;
    }, "l")));
    R = new Map(), ma = [], ka = new Map(), la = J(), za = new Set(), ja = J();
    return function(a2) {
      var b3, c2;
      a2 = share$1(a2);
      b3 = H ? D(fb)(take$1(1)(combine$1(scan$1(gb, [])(a2), fromPromise$1(H)))) : u3;
      b3 = share$1(concat$1([b3, a2]));
      a2 = share$1(map$1(d)(filter$1(hb)(b3)));
      b3 = filter$1(ib)(b3);
      c2 = map$1(p2)(filter$1(m2)(a2));
      a2 = map$1(w2)(filter$1(jb)(a2));
      c2 = share$1(G(map$1(f)(merge$1([b3, c2]))));
      b3 = map$1(v2)(filter$1(B2)(c2));
      c2 = D(N)(filter$1(r)(c2));
      return merge$1([b3, c2, a2]);
    };
  };
}
__name(kb, "kb");
function lb(a) {
  return a && a.networkError && !a.response && (typeof navigator != "undefined" && navigator.onLine === false || /request failed|failed to fetch|network\s?error/i.test(a.networkError.message));
}
__name(lb, "lb");
function offlineExchange(a) {
  return function(b2) {
    function e(a2) {
      var b3, c, d, e2, f;
      if (b3 = a2.operation.kind === "mutation" && lb(a2.error)) {
        a: {
          b3 = N;
          d = (c = a2.operation).variables || J(), e2 = D2(c.query);
          c = [].concat(t(C(c.query)));
          for (; f = c.pop(); ) {
            if (ea(f, d)) {
              if (f.kind !== Kind2.FIELD) {
                (f = f.kind === Kind2.INLINE_FRAGMENT ? f : e2[n(f)]) && c.push.apply(c, t(f));
              } else if (b3[n(f)]) {
                b3 = true;
                break a;
              }
            }
          }
          b3 = false;
        }
      }
      return b3 ? (r.push(a2.operation), G(), false) : true;
    }
    __name(e, "e");
    function h(a2) {
      return a2.operation.kind === "query" && lb(a2.error) ? (B2(eb(a2.operation, "cache-only")), r.push(a2.operation), false) : true;
    }
    __name(h, "h");
    var p2, m2, w2, v2, B2, N, r, G, E, q, z2, l2 = a.storage;
    if (l2 && l2.onOnline && l2.readMetadata && l2.writeMetadata) {
      p2 = b2.forward, m2 = b2.client;
      b2 = b2.dispatchDebug;
      w2 = makeSubject$1(), v2 = w2.source, B2 = w2.next, N = a.optimistic || {}, r = [], G = /* @__PURE__ */ __name(function c() {
        var a2, b3, c2;
        for (a2 = [], b3 = 0; b3 < r.length; b3++) {
          (c2 = r[b3]).kind === "mutation" && a2.push({
            query: (0, import_printer.print)(c2.query),
            variables: c2.variables
          });
        }
        l2.writeMetadata(a2);
      }, "c"), E = false;
      l2.onOnline(q = /* @__PURE__ */ __name(function d() {
        var a2, b3;
        if (!E) {
          E = true;
          for (a2 = 0; a2 < r.length; a2++) {
            (b3 = r[a2]).kind === "mutation" && B2(x("teardown", b3));
          }
          for (a2 = 0; a2 < r.length; a2++) {
            m2.reexecuteOperation(r[a2]);
          }
          r.length = 0;
          E = false;
          G();
        }
      }, "d"));
      l2.readMetadata().then(/* @__PURE__ */ __name(function g(a2) {
        if (a2) {
          for (var b3 = 0; b3 < a2.length; b3++) {
            r.push(m2.createRequestOperation("mutation", createRequest(a2[b3].query, a2[b3].variables)));
          }
          q();
        }
      }, "g"));
      z2 = kb(a)({
        client: m2,
        dispatchDebug: b2,
        forward: /* @__PURE__ */ __name(function f(a2) {
          return filter$1(e)(p2(a2));
        }, "f")
      });
      return /* @__PURE__ */ __name(function k(a2) {
        a2 = share$1(a2);
        a2 = merge$1([v2, a2]);
        return filter$1(h)(z2(a2));
      }, "k");
    }
    return kb(a)(b2);
  };
}
__name(offlineExchange, "offlineExchange");
var ca;
var u4;
var ia;
var K;
var L;
var M;
var P;
var Q;
var Ma;
var Xa;
ca = new Set(), u4 = [];
ia = /^__/;
K = null, L = null, M = null, P = null, Q = false;
Ma = {
  current: null
};
Xa = /^__|PageInfo|(Connection|Edge)$/;
Y.prototype.keyOfEntity = function(a) {
  if (Ma.current && a === Ma.current.parent) {
    return Ma.current.parentKey;
  }
  if (a == null || typeof a == "string") {
    return a || null;
  }
  if (!a.__typename) {
    return null;
  }
  if (this.rootNames[a.__typename]) {
    return a.__typename;
  }
  var b2;
  this.keys[a.__typename] ? b2 = this.keys[a.__typename](a) : a.id != null ? b2 = "" + a.id : a._id != null && (b2 = "" + a._id);
  return b2 ? a.__typename + ":" + b2 : null;
};
Y.prototype.resolve = function(a, b2, c) {
  b2 = I(b2, c);
  if (!(a = this.keyOfEntity(a))) {
    return null;
  }
  return (c = V(a, b2)) !== void 0 ? c : W(a, b2) || null;
};
Y.prototype.invalidate = function(a, b2, c) {
  var e, d = this.keyOfEntity(a);
  y(d, true ? "Can't generate a key for invalidate(...).\nYou have to pass an id or _id field or create a custom `keys` field for `" + typeof a == "object" ? a.__typename : a + "`." : "", 19);
  a = b2 ? [{
    fieldKey: I(b2, c)
  }] : La(d);
  b2 = 0;
  for (c = a.length; b2 < c; b2++) {
    W(d, e = a[b2].fieldKey) !== void 0 ? Ha(d, e, void 0) : X(d, e, void 0);
  }
};
Y.prototype.inspectFields = function(a) {
  return (a = this.keyOfEntity(a)) ? La(a) : [];
};
Y.prototype.updateQuery = function(a, b2) {
  (a = createRequest(a.query, a.variables)).query = u(a.query);
  (b2 = b2(this.readQuery(a))) !== null && Ua(this, a, b2);
};
Y.prototype.readQuery = function(a) {
  (a = createRequest(a.query, a.variables)).query = u(a.query);
  return Ya(this, a).data;
};
Y.prototype.readFragment = function(a, b2, c) {
  var d, e;
  if (d = (a = D2(a = u(a)))[(d = Object.keys(a))[0]]) {
    e = d.typeCondition.name.value;
    typeof b2 == "string" || b2.__typename || (b2.__typename = e);
    (b2 = this.keyOfEntity(b2)) ? (x3(e, d), c = Z(c = Oa(this, c || {}, a, e, b2), b2, t(d), {}) || null, u4.pop()) : (A("Can't generate a key for readFragment(...).\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 7), c = null);
  } else {
    A("readFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 6), c = null;
  }
  return c;
};
Y.prototype.writeFragment = function(a, b2, c) {
  var d, e, f;
  if (d = (a = D2(a = u(a)))[(d = Object.keys(a))[0]]) {
    b2 = b({}, {
      __typename: e = d.typeCondition.name.value
    }, b2);
    (f = this.keyOfEntity(b2)) ? (x3(e, d), Va(c = Oa(this, c || {}, a, e, f, void 0), f, t(d), b2), u4.pop()) : A("Can't generate a key for writeFragment(...) data.\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 12);
  } else {
    A("writeFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 11);
  }
};
export {
  Y as Store,
  kb as cacheExchange,
  offlineExchange,
  Za as query,
  Ta as write
};
//# sourceMappingURL=@urql_exchange-graphcache.js.map
