import {
  K,
  N,
  createRequest,
  fromValue$1,
  makeSubject$1,
  map$1,
  onEnd$1,
  onStart$1,
  publish$1,
  visit,
  y
} from "./chunk.QDKH3HXJ.js";
import {
  take$1,
  toPromise$1
} from "./chunk.U6CQNBPC.js";
import {
  B,
  D,
  Kind,
  filter$1,
  makeFetchBody,
  makeFetchOptions,
  makeFetchSource,
  makeFetchURL,
  merge$1,
  share$1,
  takeUntil$1
} from "./chunk.2QC3HF4U.js";
import {
  H
} from "./chunk.ZKDFWQVH.js";
import {
  require_printer
} from "./chunk.WZSZG6XK.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/$$virtual/@urql-core-virtual-9f6d4998ab/0/cache/@urql-core-npm-2.0.0-7689f44c21-43890e0dc9.zip/node_modules/@urql/core/dist/urql-core.mjs
var import_printer = require_printer();
function n(a, b) {
  if (Array.isArray(a)) {
    for (var c = 0; c < a.length; c++) {
      n(a[c], b);
    }
  } else if (typeof a == "object" && a !== null) {
    for (c in a) {
      c === "__typename" && typeof a[c] == "string" ? b[a[c]] = 0 : n(a[c], b);
    }
  }
  return b;
}
__name(n, "n");
function p(a) {
  return a.kind === Kind.FIELD && a.name.value === "__typename" && !a.alias;
}
__name(p, "p");
function r(a) {
  if (a.selectionSet && !a.selectionSet.selections.some(p)) {
    return B({}, a, {
      selectionSet: B({}, a.selectionSet, {
        selections: a.selectionSet.selections.concat([{
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        }])
      })
    });
  }
}
__name(r, "r");
function u2(a) {
  a = y(a);
  var b = t.get(a.__key);
  b || ((b = visit(a, {
    Field: r,
    InlineFragment: r
  })).__key = a.__key, t.set(a.__key, b));
  return b;
}
__name(u2, "u");
function v2(a) {
  return a && typeof a == "object" ? Object.keys(a).reduce(function(b, c) {
    var d = a[c];
    c === "__typename" ? Object.defineProperty(b, "__typename", {
      enumerable: false,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(v2) : b[c] = d && typeof d == "object" && "__typename" in d ? v2(d) : d;
    return b;
  }, {}) : a;
}
__name(v2, "v");
function w2(a) {
  a.toPromise = function() {
    return toPromise$1(take$1(1)(a));
  };
  return a;
}
__name(w2, "w");
function x(a, b, c) {
  c || (c = b.context);
  return {
    key: b.key,
    query: b.query,
    variables: b.variables,
    kind: a,
    context: c
  };
}
__name(x, "x");
function y2(a, b) {
  return x(a.kind, a, B({}, a.context, {
    meta: B({}, a.context.meta, b)
  }));
}
__name(y2, "y");
function z2() {
}
__name(z2, "z");
function D2(a) {
  return (a = a.kind) !== "mutation" && a !== "query";
}
__name(D2, "D");
function E(a) {
  var b = x(a.kind, a);
  b.query = u2(a.query);
  return b;
}
__name(E, "E");
function F(a) {
  return a.kind !== "query" || a.context.requestPolicy !== "cache-only";
}
__name(F, "F");
function G(a) {
  return y2(a, {
    cacheOutcome: "miss"
  });
}
__name(G, "G");
function H2(a) {
  return D2(a);
}
__name(H2, "H");
function I(a) {
  function b(a2) {
    var b2 = a2.context.requestPolicy;
    return a2.kind === "query" && b2 !== "network-only" && (b2 === "cache-only" || k.has(a2.key));
  }
  __name(b, "b");
  function c(a2) {
    var c2 = k.get(a2.key);
    q(B({}, {
      operation: a2
    }, c2 ? {
      type: "cacheHit",
      message: "The result was successfully retried from the cache"
    } : {
      type: "cacheMiss",
      message: "The result could not be retrieved from the cache"
    }));
    c2 = B({}, c2, {
      operation: y2(a2, {
        cacheOutcome: c2 ? "hit" : "miss"
      })
    });
    a2.context.requestPolicy === "cache-and-network" && (c2.stale = true, J(m2, a2));
    return c2;
  }
  __name(c, "c");
  function d(a2) {
    return !D2(a2) && b(a2);
  }
  __name(d, "d");
  function e(a2) {
    function c2(a3) {
      g2.add(a3);
    }
    __name(c2, "c");
    var e2, g2, l, d2 = a2.operation;
    if (d2) {
      e2 = Object.keys(n(a2.data, {})).concat(d2.context.additionalTypenames || []);
      if (a2.operation.kind === "mutation") {
        g2 = new Set();
        q({
          type: "cacheInvalidation",
          message: "The following typenames have been invalidated: " + e2,
          operation: d2,
          data: {
            typenames: e2,
            response: a2
          },
          source: "cacheExchange"
        });
        for (a2 = 0; a2 < e2.length; a2++) {
          (l = h[l = e2[a2]] || (h[l] = new Set())).forEach(c2);
          l.clear();
        }
        g2.forEach(/* @__PURE__ */ __name(function b2(a3) {
          k.has(a3) && (d2 = k.get(a3).operation, k.delete(a3), J(m2, d2));
        }, "b"));
      } else if (d2.kind === "query" && a2.data) {
        for (k.set(d2.key, a2), a2 = 0; a2 < e2.length; a2++) {
          (h[l = e2[a2]] || (h[l] = new Set())).add(d2.key);
        }
      }
    }
  }
  __name(e, "e");
  function f(a2) {
    return !D2(a2) && !b(a2);
  }
  __name(f, "f");
  var g = a.forward, m2 = a.client, q = a.dispatchDebug, k = new Map(), h = Object.create(null);
  return function(a2) {
    var b2 = share$1(a2);
    a2 = map$1(c)(filter$1(d)(b2));
    b2 = H(e)(g(filter$1(F)(map$1(G)(merge$1([map$1(E)(filter$1(f)(b2)), filter$1(H2)(b2)])))));
    return merge$1([a2, b2]);
  };
}
__name(I, "I");
function J(a, b) {
  return a.reexecuteOperation(x(b.kind, b, B({}, b.context, {
    requestPolicy: "network-only"
  })));
}
__name(J, "J");
function M(a) {
  function b(a2) {
    f.delete(a2.operation.key);
  }
  __name(b, "b");
  function c(a2) {
    var c2 = a2.key, b2 = a2.kind;
    if (b2 === "teardown") {
      return f.delete(c2), true;
    }
    if (b2 !== "query" && b2 !== "subscription") {
      return true;
    }
    b2 = f.has(c2);
    f.add(c2);
    b2 && true && e({
      type: "dedup",
      message: "An operation has been deduped.",
      operation: a2,
      source: "dedupExchange"
    });
    return !b2;
  }
  __name(c, "c");
  var d = a.forward, e = a.dispatchDebug, f = new Set();
  return function(a2) {
    a2 = filter$1(c)(a2);
    return H(b)(d(a2));
  };
}
__name(M, "M");
function N2(a) {
  return a.kind === "query" || a.kind === "mutation";
}
__name(N2, "N");
function O(a) {
  return a.kind !== "query" && a.kind !== "mutation";
}
__name(O, "O");
function P(a) {
  var b = a.forward, c = a.dispatchDebug;
  return function(a2) {
    var f, d = share$1(a2);
    a2 = D(function(a3) {
      var b2 = a3.key, e = filter$1(function(a4) {
        return a4.kind === "teardown" && a4.key === b2;
      })(d), g = makeFetchBody(a3), h = makeFetchURL(a3, g), l = makeFetchOptions(a3, g);
      c({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: a3,
        data: {
          url: h,
          fetchOptions: l
        },
        source: "fetchExchange"
      });
      return H(function(b3) {
        var d2 = b3.data ? void 0 : b3.error;
        c({
          type: d2 ? "fetchError" : "fetchSuccess",
          message: "A " + (d2 ? "failed" : "successful") + " fetch response has been returned.",
          operation: a3,
          data: {
            url: h,
            fetchOptions: l,
            value: d2 || b3
          },
          source: "fetchExchange"
        });
      })(takeUntil$1(e)(makeFetchSource(a3, h, l)));
    })(filter$1(N2)(d));
    f = b(filter$1(O)(d));
    return merge$1([a2, f]);
  };
}
__name(P, "P");
function Q() {
  return false;
}
__name(Q, "Q");
function R(a) {
  function b(a2) {
    if (a2.kind !== "teardown" && true) {
      var b2 = 'No exchange has handled operations of kind "' + a2.kind + `". Check whether you've added an exchange responsible for these operations.`;
      c({
        type: "fallbackCatch",
        message: b2,
        operation: a2,
        source: "fallbackExchange"
      });
      console.warn(b2);
    }
  }
  __name(b, "b");
  var c = a.dispatchDebug;
  return function(a2) {
    return filter$1(Q)(H(b)(a2));
  };
}
__name(R, "R");
function T(a) {
  return function(b) {
    var c = b.client, d = b.dispatchDebug;
    return a.reduceRight(function(a2, b2) {
      return b2({
        client: c,
        forward: a2,
        dispatchDebug: function(a3) {
          d(B({}, {
            timestamp: Date.now(),
            source: b2.name
          }, a3));
        }
      });
    }, b.forward);
  };
}
__name(T, "T");
function V(a) {
  var d, e, f, g, m2, c = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function(a2) {
    a2 || (a2 = {});
    return B({}, {
      url: c.url,
      fetchOptions: c.fetchOptions,
      fetch: c.fetch,
      preferGetMethod: c.preferGetMethod
    }, a2, {
      suspense: a2.suspense || a2.suspense !== false && c.suspense,
      requestPolicy: a2.requestPolicy || c.requestPolicy
    });
  };
  this.createRequestOperation = function(a2, b, d2) {
    return x(a2, b, c.createOperationContext(d2));
  };
  this.executeQuery = function(a2, b) {
    a2 = c.createRequestOperation("query", a2, b);
    return c.executeRequestOperation(a2);
  };
  this.executeSubscription = function(a2, b) {
    a2 = c.createRequestOperation("subscription", a2, b);
    return c.executeRequestOperation(a2);
  };
  this.executeMutation = function(a2, b) {
    a2 = c.createRequestOperation("mutation", a2, b);
    return c.executeRequestOperation(a2);
  };
  if (!a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  d = z2;
  if (true) {
    e = (d = makeSubject$1()).next, f = d.source;
    this.subscribeToDebugTarget = /* @__PURE__ */ __name(function b(a2) {
      return N(a2)(f);
    }, "b");
    d = e;
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  e = makeSubject$1();
  g = e.next;
  this.operations$ = e.source;
  m2 = false;
  this.dispatchOperation = function(a2) {
    m2 = true;
    for (a2 && g(a2); a2 = c.queue.shift(); ) {
      g(a2);
    }
    m2 = false;
  };
  this.reexecuteOperation = function(a2) {
    if (a2.kind === "mutation" || 0 < (c.activeOperations[a2.key] || 0)) {
      c.queue.push(a2), m2 || Promise.resolve().then(c.dispatchOperation);
    }
  };
  a = T(a.exchanges !== void 0 ? a.exchanges : U);
  this.results$ = share$1(a({
    client: this,
    dispatchDebug: d,
    forward: R({
      dispatchDebug: d
    })
  })(this.operations$));
  publish$1(this.results$);
}
__name(V, "V");
function W(a) {
  a.data = v2(a.data);
  return a;
}
__name(W, "W");
var t;
var S;
var U;
t = new Map();
S = R({
  dispatchDebug: z2
});
U = [M, I, P];
V.prototype.onOperationStart = function(a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};
V.prototype.onOperationEnd = function(a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  if (0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1)) {
    for (b = this.queue.length - 1; 0 <= b; b--) {
      this.queue[b].key === a.key && this.queue.splice(b, 1);
    }
    this.dispatchOperation(x("teardown", a, a.context));
  }
};
V.prototype.executeRequestOperation = function(a) {
  var e, f, c = this, d = filter$1(function(b) {
    return b.operation.key === a.key;
  })(this.results$);
  this.maskTypename && (d = map$1(W)(d));
  if (a.kind === "mutation") {
    return take$1(1)(onStart$1(/* @__PURE__ */ __name(function b() {
      return c.dispatchOperation(a);
    }, "b"))(d));
  }
  e = filter$1(function(b) {
    return b.kind === "teardown" && b.key === a.key;
  })(this.operations$), f = filter$1(function(b) {
    return b.kind === a.kind && b.key === a.key && b.context.requestPolicy !== "cache-only";
  })(this.operations$);
  return onEnd$1(function() {
    c.onOperationEnd(a);
  })(onStart$1(function() {
    c.onOperationStart(a);
  })(K(function(a2) {
    return a2.stale ? fromValue$1(a2) : merge$1([fromValue$1(a2), map$1(function() {
      return B({}, a2, {
        stale: true
      });
    })(take$1(1)(f))]);
  })(takeUntil$1(e)(d))));
};
V.prototype.query = function(a, b, c) {
  c && typeof c.suspense == "boolean" || (c = B({}, c, {
    suspense: false
  }));
  return w2(this.executeQuery(createRequest(a, b), c));
};
V.prototype.readQuery = function(a, b, c) {
  var d = null;
  N(function(a2) {
    d = a2;
  })(this.executeQuery(createRequest(a, b), c)).unsubscribe();
  return d;
};
V.prototype.subscription = function(a, b, c) {
  return this.executeSubscription(createRequest(a, b), c);
};
V.prototype.mutation = function(a, b, c) {
  return w2(this.executeMutation(createRequest(a, b), c));
};

export {
  u2 as u,
  v2 as v,
  x,
  I,
  M,
  P,
  T,
  V,
  S,
  U,
  import_printer
};
//# sourceMappingURL=chunk.2KQ5LLYG.js.map
