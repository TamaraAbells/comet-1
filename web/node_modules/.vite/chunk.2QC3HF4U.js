import {
  DirectiveLocation,
  Lexer,
  SYMBOL_TO_STRING_TAG,
  Source,
  TokenKind,
  getLocation,
  isObjectLike,
  isPunctuatorTokenKind,
  isSource,
  l,
  m,
  p,
  printLocation,
  printSourceLocation,
  syntaxError
} from "./chunk.ZKDFWQVH.js";
import {
  require_printer
} from "./chunk.WZSZG6XK.js";
import {
  Kind,
  Location
} from "./chunk.K5PCYWJY.js";
import {
  __name
} from "./chunk.C4F35LU4.js";

// ../.yarn/cache/wonka-npm-4.0.15-716683372a-df4fd51c15.zip/node_modules/wonka/dist/wonka.mjs
function r() {
}
__name(r, "r");
function C(a) {
  return a(0);
}
__name(C, "C");
function D(a) {
  return function(b) {
    return function(c) {
      let e = m, f = false, g = [], h = false;
      b(function(b2) {
        typeof b2 == "number" ? h || (h = true, g.length === 0 && c(0)) : b2.tag ? h || (f = false, function(a2) {
          function b3(a3) {
            typeof a3 == "number" ? g.length !== 0 && (g = g.filter(d), a3 = g.length === 0, h && a3 ? c(0) : !f && a3 && (f = true, e(0))) : a3.tag ? g.length !== 0 && (c(l(1, [a3[0]])), k2(0)) : (k2 = a3 = a3[0], g = g.concat(a3), a3(0));
          }
          __name(b3, "b");
          function d(a3) {
            return a3 !== k2;
          }
          __name(d, "d");
          let k2 = m;
          a2.length === 1 ? a2(b3) : a2.bind(null, b3);
        }(a(b2[0])), f || (f = true, e(0))) : e = b2[0];
      });
      c(l(0, [
        function(a2) {
          a2 ? (h || (h = true, e(a2)), g.forEach(function(c2) {
            return c2(a2);
          }), g = []) : (f || h ? f = false : (f = true, e(0)), g.forEach(C));
        }
      ]));
    };
  };
}
__name(D, "D");
function E(a) {
  return a;
}
__name(E, "E");
function J(a) {
  a(0);
}
__name(J, "J");
function filter$1(a) {
  return function(b) {
    return function(c) {
      let d = m;
      return b(function(b2) {
        typeof b2 == "number" ? c(b2) : b2.tag ? a(b2[0]) ? c(b2) : d(0) : (d = b2[0], c(b2));
      });
    };
  };
}
__name(filter$1, "filter$1");
function make$1(a) {
  return function(b) {
    let c = r, d = false;
    c = a({
      next: function(a2) {
        d || b(l(1, [a2]));
      },
      complete: function() {
        d || (d = true, b(0));
      }
    });
    b(l(0, [
      function(a2) {
        if (a2 && !d) {
          return d = true, c();
        }
      }
    ]));
  };
}
__name(make$1, "make$1");
function merge$1(a) {
  return D(E)(p(a));
}
__name(merge$1, "merge$1");
function share$1(a) {
  function b(a2) {
    typeof a2 == "number" ? (c.forEach(J), c = []) : a2.tag ? (e = false, c.forEach(function(b2) {
      b2(a2);
    })) : d = a2[0];
  }
  __name(b, "b");
  let c = [], d = m, e = false;
  return function(f) {
    function g(a2) {
      return a2 !== f;
    }
    __name(g, "g");
    c = c.concat(f);
    c.length === 1 && a(b);
    f(l(0, [
      function(a2) {
        if (a2) {
          if (c = c.filter(g), c.length === 0) {
            return d(1);
          }
        } else {
          e || (e = true, d(a2));
        }
      }
    ]));
  };
}
__name(share$1, "share$1");
function takeUntil$1(a) {
  return function(b) {
    return function(c) {
      function d(a2) {
        typeof a2 != "number" && (a2.tag ? (e = true, f(1), c(0)) : (g = a2 = a2[0], a2(0)));
      }
      __name(d, "d");
      let e = false, f = m, g = m;
      b(function(b2) {
        typeof b2 == "number" ? e || (e = true, g(1), c(0)) : b2.tag ? e || c(b2) : (f = b2[0], a(d));
      });
      c(l(0, [
        function(a2) {
          if (!e) {
            return a2 ? (e = true, f(1), g(1)) : f(0);
          }
        }
      ]));
    };
  };
}
__name(takeUntil$1, "takeUntil$1");

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/error/GraphQLError.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
      return typeof obj2;
    }, "_typeof");
  } else {
    _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, "_typeof");
  }
  return _typeof(obj);
}
__name(_typeof, "_typeof");
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
__name(_classCallCheck, "_classCallCheck");
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
__name(_defineProperties, "_defineProperties");
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
__name(_createClass, "_createClass");
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
__name(_inherits, "_inherits");
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return /* @__PURE__ */ __name(function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  }, "_createSuperInternal");
}
__name(_createSuper, "_createSuper");
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
__name(_possibleConstructorReturn, "_possibleConstructorReturn");
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
__name(_assertThisInitialized, "_assertThisInitialized");
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper = /* @__PURE__ */ __name(function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    __name(Wrapper, "Wrapper");
    Wrapper.prototype = Object.create(Class2.prototype, {constructor: {value: Wrapper, enumerable: false, writable: true, configurable: true}});
    return _setPrototypeOf(Wrapper, Class2);
  }, "_wrapNativeSuper");
  return _wrapNativeSuper(Class);
}
__name(_wrapNativeSuper, "_wrapNativeSuper");
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = /* @__PURE__ */ __name(function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    }, "_construct");
  }
  return _construct.apply(null, arguments);
}
__name(_construct, "_construct");
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
__name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
__name(_isNativeFunction, "_isNativeFunction");
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf2(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  }, "_setPrototypeOf");
  return _setPrototypeOf(o, p2);
}
__name(_setPrototypeOf, "_setPrototypeOf");
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  }, "_getPrototypeOf");
  return _getPrototypeOf(o);
}
__name(_getPrototypeOf, "_getPrototypeOf");
var GraphQLError = function(_Error) {
  _inherits(GraphQLError2, _Error);
  var _super = _createSuper(GraphQLError2);
  function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
    var _locations2, _source2, _positions2, _extensions2;
    var _this;
    _classCallCheck(this, GraphQLError2);
    _this = _super.call(this, message);
    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : void 0 : nodes ? [nodes] : void 0;
    var _source = source;
    if (!_source && _nodes) {
      var _nodes$0$loc;
      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
    }
    var _positions = positions;
    if (!_positions && _nodes) {
      _positions = _nodes.reduce(function(list, node) {
        if (node.loc) {
          list.push(node.loc.start);
        }
        return list;
      }, []);
    }
    if (_positions && _positions.length === 0) {
      _positions = void 0;
    }
    var _locations;
    if (positions && source) {
      _locations = positions.map(function(pos) {
        return getLocation(source, pos);
      });
    } else if (_nodes) {
      _locations = _nodes.reduce(function(list, node) {
        if (node.loc) {
          list.push(getLocation(node.loc.source, node.loc.start));
        }
        return list;
      }, []);
    }
    var _extensions = extensions;
    if (_extensions == null && originalError != null) {
      var originalExtensions = originalError.extensions;
      if (isObjectLike(originalExtensions)) {
        _extensions = originalExtensions;
      }
    }
    Object.defineProperties(_assertThisInitialized(_this), {
      name: {
        value: "GraphQLError"
      },
      message: {
        value: message,
        enumerable: true,
        writable: true
      },
      locations: {
        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : void 0,
        enumerable: _locations != null
      },
      path: {
        value: path !== null && path !== void 0 ? path : void 0,
        enumerable: path != null
      },
      nodes: {
        value: _nodes !== null && _nodes !== void 0 ? _nodes : void 0
      },
      source: {
        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : void 0
      },
      positions: {
        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : void 0
      },
      originalError: {
        value: originalError
      },
      extensions: {
        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : void 0,
        enumerable: _extensions != null
      }
    });
    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(_assertThisInitialized(_this), "stack", {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
      return _possibleConstructorReturn(_this);
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError2);
    } else {
      Object.defineProperty(_assertThisInitialized(_this), "stack", {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }
    return _this;
  }
  __name(GraphQLError2, "GraphQLError");
  _createClass(GraphQLError2, [{
    key: "toString",
    value: /* @__PURE__ */ __name(function toString() {
      return printError(this);
    }, "toString")
  }, {
    key: SYMBOL_TO_STRING_TAG,
    get: /* @__PURE__ */ __name(function get() {
      return "Object";
    }, "get")
  }]);
  return GraphQLError2;
}(_wrapNativeSuper(Error));
function printError(error) {
  var output = error.message;
  if (error.nodes) {
    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
      var node = _error$nodes2[_i2];
      if (node.loc) {
        output += "\n\n" + printLocation(node.loc);
      }
    }
  } else if (error.source && error.locations) {
    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
      var location = _error$locations2[_i4];
      output += "\n\n" + printSourceLocation(error.source, location);
    }
  }
  return output;
}
__name(printError, "printError");

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/kinds.mjs
var Kind2 = Object.freeze({
  NAME: "Name",
  DOCUMENT: "Document",
  OPERATION_DEFINITION: "OperationDefinition",
  VARIABLE_DEFINITION: "VariableDefinition",
  SELECTION_SET: "SelectionSet",
  FIELD: "Field",
  ARGUMENT: "Argument",
  FRAGMENT_SPREAD: "FragmentSpread",
  INLINE_FRAGMENT: "InlineFragment",
  FRAGMENT_DEFINITION: "FragmentDefinition",
  VARIABLE: "Variable",
  INT: "IntValue",
  FLOAT: "FloatValue",
  STRING: "StringValue",
  BOOLEAN: "BooleanValue",
  NULL: "NullValue",
  ENUM: "EnumValue",
  LIST: "ListValue",
  OBJECT: "ObjectValue",
  OBJECT_FIELD: "ObjectField",
  DIRECTIVE: "Directive",
  NAMED_TYPE: "NamedType",
  LIST_TYPE: "ListType",
  NON_NULL_TYPE: "NonNullType",
  SCHEMA_DEFINITION: "SchemaDefinition",
  OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
  SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
  OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
  FIELD_DEFINITION: "FieldDefinition",
  INPUT_VALUE_DEFINITION: "InputValueDefinition",
  INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
  UNION_TYPE_DEFINITION: "UnionTypeDefinition",
  ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
  ENUM_VALUE_DEFINITION: "EnumValueDefinition",
  INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
  DIRECTIVE_DEFINITION: "DirectiveDefinition",
  SCHEMA_EXTENSION: "SchemaExtension",
  SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
  OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
  INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
  UNION_TYPE_EXTENSION: "UnionTypeExtension",
  ENUM_TYPE_EXTENSION: "EnumTypeExtension",
  INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
});

// ../.yarn/cache/graphql-npm-15.5.0-65986c56be-789cdcb069.zip/node_modules/graphql/language/parser.mjs
var Parser = function() {
  function Parser2(source, options) {
    var sourceObj = isSource(source) ? source : new Source(source);
    this._lexer = new Lexer(sourceObj);
    this._options = options;
  }
  __name(Parser2, "Parser");
  var _proto = Parser2.prototype;
  _proto.parseName = /* @__PURE__ */ __name(function parseName() {
    var token = this.expectToken(TokenKind.NAME);
    return {
      kind: Kind.NAME,
      value: token.value,
      loc: this.loc(token)
    };
  }, "parseName");
  _proto.parseDocument = /* @__PURE__ */ __name(function parseDocument() {
    var start = this._lexer.token;
    return {
      kind: Kind.DOCUMENT,
      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),
      loc: this.loc(start)
    };
  }, "parseDocument");
  _proto.parseDefinition = /* @__PURE__ */ __name(function parseDefinition() {
    if (this.peek(TokenKind.NAME)) {
      switch (this._lexer.token.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "schema":
        case "scalar":
        case "type":
        case "interface":
        case "union":
        case "enum":
        case "input":
        case "directive":
          return this.parseTypeSystemDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    } else if (this.peek(TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    } else if (this.peekDescription()) {
      return this.parseTypeSystemDefinition();
    }
    throw this.unexpected();
  }, "parseDefinition");
  _proto.parseOperationDefinition = /* @__PURE__ */ __name(function parseOperationDefinition() {
    var start = this._lexer.token;
    if (this.peek(TokenKind.BRACE_L)) {
      return {
        kind: Kind.OPERATION_DEFINITION,
        operation: "query",
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    var operation = this.parseOperationType();
    var name;
    if (this.peek(TokenKind.NAME)) {
      name = this.parseName();
    }
    return {
      kind: Kind.OPERATION_DEFINITION,
      operation,
      name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }, "parseOperationDefinition");
  _proto.parseOperationType = /* @__PURE__ */ __name(function parseOperationType() {
    var operationToken = this.expectToken(TokenKind.NAME);
    switch (operationToken.value) {
      case "query":
        return "query";
      case "mutation":
        return "mutation";
      case "subscription":
        return "subscription";
    }
    throw this.unexpected(operationToken);
  }, "parseOperationType");
  _proto.parseVariableDefinitions = /* @__PURE__ */ __name(function parseVariableDefinitions() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
  }, "parseVariableDefinitions");
  _proto.parseVariableDefinition = /* @__PURE__ */ __name(function parseVariableDefinition() {
    var start = this._lexer.token;
    return {
      kind: Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
      directives: this.parseDirectives(true),
      loc: this.loc(start)
    };
  }, "parseVariableDefinition");
  _proto.parseVariable = /* @__PURE__ */ __name(function parseVariable() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.DOLLAR);
    return {
      kind: Kind.VARIABLE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  }, "parseVariable");
  _proto.parseSelectionSet = /* @__PURE__ */ __name(function parseSelectionSet() {
    var start = this._lexer.token;
    return {
      kind: Kind.SELECTION_SET,
      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }, "parseSelectionSet");
  _proto.parseSelection = /* @__PURE__ */ __name(function parseSelection() {
    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  }, "parseSelection");
  _proto.parseField = /* @__PURE__ */ __name(function parseField() {
    var start = this._lexer.token;
    var nameOrAlias = this.parseName();
    var alias;
    var name;
    if (this.expectOptionalToken(TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }
    return {
      kind: Kind.FIELD,
      alias,
      name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
      loc: this.loc(start)
    };
  }, "parseField");
  _proto.parseArguments = /* @__PURE__ */ __name(function parseArguments(isConst) {
    var item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
  }, "parseArguments");
  _proto.parseArgument = /* @__PURE__ */ __name(function parseArgument() {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.ARGUMENT,
      name,
      value: this.parseValueLiteral(false),
      loc: this.loc(start)
    };
  }, "parseArgument");
  _proto.parseConstArgument = /* @__PURE__ */ __name(function parseConstArgument() {
    var start = this._lexer.token;
    return {
      kind: Kind.ARGUMENT,
      name: this.parseName(),
      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),
      loc: this.loc(start)
    };
  }, "parseConstArgument");
  _proto.parseFragment = /* @__PURE__ */ __name(function parseFragment() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.SPREAD);
    var hasTypeCondition = this.expectOptionalKeyword("on");
    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
      return {
        kind: Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false),
        loc: this.loc(start)
      };
    }
    return {
      kind: Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }, "parseFragment");
  _proto.parseFragmentDefinition = /* @__PURE__ */ __name(function parseFragmentDefinition() {
    var _this$_options;
    var start = this._lexer.token;
    this.expectKeyword("fragment");
    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
      return {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    return {
      kind: Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }, "parseFragmentDefinition");
  _proto.parseFragmentName = /* @__PURE__ */ __name(function parseFragmentName() {
    if (this._lexer.token.value === "on") {
      throw this.unexpected();
    }
    return this.parseName();
  }, "parseFragmentName");
  _proto.parseValueLiteral = /* @__PURE__ */ __name(function parseValueLiteral(isConst) {
    var token = this._lexer.token;
    switch (token.kind) {
      case TokenKind.BRACKET_L:
        return this.parseList(isConst);
      case TokenKind.BRACE_L:
        return this.parseObject(isConst);
      case TokenKind.INT:
        this._lexer.advance();
        return {
          kind: Kind.INT,
          value: token.value,
          loc: this.loc(token)
        };
      case TokenKind.FLOAT:
        this._lexer.advance();
        return {
          kind: Kind.FLOAT,
          value: token.value,
          loc: this.loc(token)
        };
      case TokenKind.STRING:
      case TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();
      case TokenKind.NAME:
        this._lexer.advance();
        switch (token.value) {
          case "true":
            return {
              kind: Kind.BOOLEAN,
              value: true,
              loc: this.loc(token)
            };
          case "false":
            return {
              kind: Kind.BOOLEAN,
              value: false,
              loc: this.loc(token)
            };
          case "null":
            return {
              kind: Kind.NULL,
              loc: this.loc(token)
            };
          default:
            return {
              kind: Kind.ENUM,
              value: token.value,
              loc: this.loc(token)
            };
        }
      case TokenKind.DOLLAR:
        if (!isConst) {
          return this.parseVariable();
        }
        break;
    }
    throw this.unexpected();
  }, "parseValueLiteral");
  _proto.parseStringLiteral = /* @__PURE__ */ __name(function parseStringLiteral() {
    var token = this._lexer.token;
    this._lexer.advance();
    return {
      kind: Kind.STRING,
      value: token.value,
      block: token.kind === TokenKind.BLOCK_STRING,
      loc: this.loc(token)
    };
  }, "parseStringLiteral");
  _proto.parseList = /* @__PURE__ */ __name(function parseList(isConst) {
    var _this = this;
    var start = this._lexer.token;
    var item = /* @__PURE__ */ __name(function item2() {
      return _this.parseValueLiteral(isConst);
    }, "item");
    return {
      kind: Kind.LIST,
      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
      loc: this.loc(start)
    };
  }, "parseList");
  _proto.parseObject = /* @__PURE__ */ __name(function parseObject(isConst) {
    var _this2 = this;
    var start = this._lexer.token;
    var item = /* @__PURE__ */ __name(function item2() {
      return _this2.parseObjectField(isConst);
    }, "item");
    return {
      kind: Kind.OBJECT,
      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }, "parseObject");
  _proto.parseObjectField = /* @__PURE__ */ __name(function parseObjectField(isConst) {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.OBJECT_FIELD,
      name,
      value: this.parseValueLiteral(isConst),
      loc: this.loc(start)
    };
  }, "parseObjectField");
  _proto.parseDirectives = /* @__PURE__ */ __name(function parseDirectives(isConst) {
    var directives = [];
    while (this.peek(TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }
    return directives;
  }, "parseDirectives");
  _proto.parseDirective = /* @__PURE__ */ __name(function parseDirective(isConst) {
    var start = this._lexer.token;
    this.expectToken(TokenKind.AT);
    return {
      kind: Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst),
      loc: this.loc(start)
    };
  }, "parseDirective");
  _proto.parseTypeReference = /* @__PURE__ */ __name(function parseTypeReference() {
    var start = this._lexer.token;
    var type;
    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
      type = this.parseTypeReference();
      this.expectToken(TokenKind.BRACKET_R);
      type = {
        kind: Kind.LIST_TYPE,
        type,
        loc: this.loc(start)
      };
    } else {
      type = this.parseNamedType();
    }
    if (this.expectOptionalToken(TokenKind.BANG)) {
      return {
        kind: Kind.NON_NULL_TYPE,
        type,
        loc: this.loc(start)
      };
    }
    return type;
  }, "parseTypeReference");
  _proto.parseNamedType = /* @__PURE__ */ __name(function parseNamedType() {
    var start = this._lexer.token;
    return {
      kind: Kind.NAMED_TYPE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  }, "parseNamedType");
  _proto.parseTypeSystemDefinition = /* @__PURE__ */ __name(function parseTypeSystemDefinition() {
    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
    }
    throw this.unexpected(keywordToken);
  }, "parseTypeSystemDefinition");
  _proto.peekDescription = /* @__PURE__ */ __name(function peekDescription() {
    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
  }, "peekDescription");
  _proto.parseDescription = /* @__PURE__ */ __name(function parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }, "parseDescription");
  _proto.parseSchemaDefinition = /* @__PURE__ */ __name(function parseSchemaDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("schema");
    var directives = this.parseDirectives(true);
    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
    return {
      kind: Kind.SCHEMA_DEFINITION,
      description,
      directives,
      operationTypes,
      loc: this.loc(start)
    };
  }, "parseSchemaDefinition");
  _proto.parseOperationTypeDefinition = /* @__PURE__ */ __name(function parseOperationTypeDefinition() {
    var start = this._lexer.token;
    var operation = this.parseOperationType();
    this.expectToken(TokenKind.COLON);
    var type = this.parseNamedType();
    return {
      kind: Kind.OPERATION_TYPE_DEFINITION,
      operation,
      type,
      loc: this.loc(start)
    };
  }, "parseOperationTypeDefinition");
  _proto.parseScalarTypeDefinition = /* @__PURE__ */ __name(function parseScalarTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("scalar");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.SCALAR_TYPE_DEFINITION,
      description,
      name,
      directives,
      loc: this.loc(start)
    };
  }, "parseScalarTypeDefinition");
  _proto.parseObjectTypeDefinition = /* @__PURE__ */ __name(function parseObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("type");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: Kind.OBJECT_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseObjectTypeDefinition");
  _proto.parseImplementsInterfaces = /* @__PURE__ */ __name(function parseImplementsInterfaces() {
    var _this$_options2;
    if (!this.expectOptionalKeyword("implements")) {
      return [];
    }
    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
      var types = [];
      this.expectOptionalToken(TokenKind.AMP);
      do {
        types.push(this.parseNamedType());
      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));
      return types;
    }
    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);
  }, "parseImplementsInterfaces");
  _proto.parseFieldsDefinition = /* @__PURE__ */ __name(function parseFieldsDefinition() {
    var _this$_options3;
    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {
      this._lexer.advance();
      this._lexer.advance();
      return [];
    }
    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
  }, "parseFieldsDefinition");
  _proto.parseFieldDefinition = /* @__PURE__ */ __name(function parseFieldDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.FIELD_DEFINITION,
      description,
      name,
      arguments: args,
      type,
      directives,
      loc: this.loc(start)
    };
  }, "parseFieldDefinition");
  _proto.parseArgumentDefs = /* @__PURE__ */ __name(function parseArgumentDefs() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
  }, "parseArgumentDefs");
  _proto.parseInputValueDef = /* @__PURE__ */ __name(function parseInputValueDef() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var defaultValue;
    if (this.expectOptionalToken(TokenKind.EQUALS)) {
      defaultValue = this.parseValueLiteral(true);
    }
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.INPUT_VALUE_DEFINITION,
      description,
      name,
      type,
      defaultValue,
      directives,
      loc: this.loc(start)
    };
  }, "parseInputValueDef");
  _proto.parseInterfaceTypeDefinition = /* @__PURE__ */ __name(function parseInterfaceTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("interface");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: Kind.INTERFACE_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseInterfaceTypeDefinition");
  _proto.parseUnionTypeDefinition = /* @__PURE__ */ __name(function parseUnionTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("union");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    return {
      kind: Kind.UNION_TYPE_DEFINITION,
      description,
      name,
      directives,
      types,
      loc: this.loc(start)
    };
  }, "parseUnionTypeDefinition");
  _proto.parseUnionMemberTypes = /* @__PURE__ */ __name(function parseUnionMemberTypes() {
    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
  }, "parseUnionMemberTypes");
  _proto.parseEnumTypeDefinition = /* @__PURE__ */ __name(function parseEnumTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("enum");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    return {
      kind: Kind.ENUM_TYPE_DEFINITION,
      description,
      name,
      directives,
      values,
      loc: this.loc(start)
    };
  }, "parseEnumTypeDefinition");
  _proto.parseEnumValuesDefinition = /* @__PURE__ */ __name(function parseEnumValuesDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
  }, "parseEnumValuesDefinition");
  _proto.parseEnumValueDefinition = /* @__PURE__ */ __name(function parseEnumValueDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.ENUM_VALUE_DEFINITION,
      description,
      name,
      directives,
      loc: this.loc(start)
    };
  }, "parseEnumValueDefinition");
  _proto.parseInputObjectTypeDefinition = /* @__PURE__ */ __name(function parseInputObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("input");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();
    return {
      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description,
      name,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseInputObjectTypeDefinition");
  _proto.parseInputFieldsDefinition = /* @__PURE__ */ __name(function parseInputFieldsDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
  }, "parseInputFieldsDefinition");
  _proto.parseTypeSystemExtension = /* @__PURE__ */ __name(function parseTypeSystemExtension() {
    var keywordToken = this._lexer.lookahead();
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    }
    throw this.unexpected(keywordToken);
  }, "parseTypeSystemExtension");
  _proto.parseSchemaExtension = /* @__PURE__ */ __name(function parseSchemaExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("schema");
    var directives = this.parseDirectives(true);
    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.SCHEMA_EXTENSION,
      directives,
      operationTypes,
      loc: this.loc(start)
    };
  }, "parseSchemaExtension");
  _proto.parseScalarTypeExtension = /* @__PURE__ */ __name(function parseScalarTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("scalar");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    if (directives.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.SCALAR_TYPE_EXTENSION,
      name,
      directives,
      loc: this.loc(start)
    };
  }, "parseScalarTypeExtension");
  _proto.parseObjectTypeExtension = /* @__PURE__ */ __name(function parseObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("type");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.OBJECT_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseObjectTypeExtension");
  _proto.parseInterfaceTypeExtension = /* @__PURE__ */ __name(function parseInterfaceTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("interface");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.INTERFACE_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseInterfaceTypeExtension");
  _proto.parseUnionTypeExtension = /* @__PURE__ */ __name(function parseUnionTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("union");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.UNION_TYPE_EXTENSION,
      name,
      directives,
      types,
      loc: this.loc(start)
    };
  }, "parseUnionTypeExtension");
  _proto.parseEnumTypeExtension = /* @__PURE__ */ __name(function parseEnumTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("enum");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.ENUM_TYPE_EXTENSION,
      name,
      directives,
      values,
      loc: this.loc(start)
    };
  }, "parseEnumTypeExtension");
  _proto.parseInputObjectTypeExtension = /* @__PURE__ */ __name(function parseInputObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("input");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();
    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name,
      directives,
      fields,
      loc: this.loc(start)
    };
  }, "parseInputObjectTypeExtension");
  _proto.parseDirectiveDefinition = /* @__PURE__ */ __name(function parseDirectiveDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("directive");
    this.expectToken(TokenKind.AT);
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    var repeatable = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    var locations = this.parseDirectiveLocations();
    return {
      kind: Kind.DIRECTIVE_DEFINITION,
      description,
      name,
      arguments: args,
      repeatable,
      locations,
      loc: this.loc(start)
    };
  }, "parseDirectiveDefinition");
  _proto.parseDirectiveLocations = /* @__PURE__ */ __name(function parseDirectiveLocations() {
    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
  }, "parseDirectiveLocations");
  _proto.parseDirectiveLocation = /* @__PURE__ */ __name(function parseDirectiveLocation() {
    var start = this._lexer.token;
    var name = this.parseName();
    if (DirectiveLocation[name.value] !== void 0) {
      return name;
    }
    throw this.unexpected(start);
  }, "parseDirectiveLocation");
  _proto.loc = /* @__PURE__ */ __name(function loc(startToken) {
    var _this$_options4;
    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
      return new Location(startToken, this._lexer.lastToken, this._lexer.source);
    }
  }, "loc");
  _proto.peek = /* @__PURE__ */ __name(function peek(kind) {
    return this._lexer.token.kind === kind;
  }, "peek");
  _proto.expectToken = /* @__PURE__ */ __name(function expectToken(kind) {
    var token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return token;
    }
    throw syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
  }, "expectToken");
  _proto.expectOptionalToken = /* @__PURE__ */ __name(function expectOptionalToken(kind) {
    var token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return token;
    }
    return void 0;
  }, "expectOptionalToken");
  _proto.expectKeyword = /* @__PURE__ */ __name(function expectKeyword(value) {
    var token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
    } else {
      throw syntaxError(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
    }
  }, "expectKeyword");
  _proto.expectOptionalKeyword = /* @__PURE__ */ __name(function expectOptionalKeyword(value) {
    var token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
      return true;
    }
    return false;
  }, "expectOptionalKeyword");
  _proto.unexpected = /* @__PURE__ */ __name(function unexpected(atToken) {
    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
  }, "unexpected");
  _proto.any = /* @__PURE__ */ __name(function any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];
    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }
    return nodes;
  }, "any");
  _proto.optionalMany = /* @__PURE__ */ __name(function optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      var nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    return [];
  }, "optionalMany");
  _proto.many = /* @__PURE__ */ __name(function many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));
    return nodes;
  }, "many");
  _proto.delimitedMany = /* @__PURE__ */ __name(function delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    var nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));
    return nodes;
  }, "delimitedMany");
  return Parser2;
}();
function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
}
__name(getTokenDesc, "getTokenDesc");
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? '"'.concat(kind, '"') : kind;
}
__name(getTokenKindDesc, "getTokenKindDesc");

// ../.yarn/$$virtual/@urql-core-virtual-9f6d4998ab/0/cache/@urql-core-npm-2.0.0-7689f44c21-43890e0dc9.zip/node_modules/@urql/core/dist/2c01d8b2.mjs
var import_printer = require_printer();
function k(a) {
  return typeof a == "string" ? new GraphQLError(a) : typeof a == "object" && a.message ? new GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;
}
__name(k, "k");
function l2() {
  return this.message;
}
__name(l2, "l");
function t(a) {
  var b, c, d, e, f, g;
  if (a === null || q.has(a)) {
    return "null";
  }
  if (typeof a != "object") {
    return JSON.stringify(a) || "";
  }
  if (a.toJSON) {
    return t(a.toJSON());
  }
  if (Array.isArray(a)) {
    for (b = "[", c = 0, d = a.length; c < d; c++) {
      0 < c && (b += ",");
      b += 0 < (e = t(a[c])).length ? e : "null";
    }
    return b + "]";
  }
  if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {
    return b = r2.get(a) || Math.random().toString(36).slice(2), r2.set(a, b), '{"__key":"' + b + '"}';
  }
  q.add(a);
  c = "{";
  d = 0;
  for (e = b.length; d < e; d++) {
    (g = t(a[f = b[d]])) && (1 < c.length && (c += ","), c += t(f) + ":" + g);
  }
  q.delete(a);
  return c + "}";
}
__name(t, "t");
function u(a) {
  q.clear();
  return t(a);
}
__name(u, "u");
function w(a) {
  var b, c, d;
  for (b = 0, c = a.definitions.length; b < c; b++) {
    if ((d = a.definitions[b]).kind === Kind2.OPERATION_DEFINITION && d.name) {
      return d.name.value;
    }
  }
}
__name(w, "w");
function z(a, b, c) {
  return {
    operation: a,
    data: b.data,
    error: Array.isArray(b.errors) ? new m2({
      graphQLErrors: b.errors,
      response: c
    }) : void 0,
    extensions: typeof b.extensions == "object" && b.extensions || void 0
  };
}
__name(z, "z");
function A(a, b, c) {
  return {
    operation: a,
    data: void 0,
    error: new m2({
      networkError: b,
      response: c
    }),
    extensions: void 0
  };
}
__name(A, "A");
function B() {
  return (B = Object.assign || function(a) {
    var b, c, d;
    for (b = 1; b < arguments.length; b++) {
      c = arguments[b];
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}
__name(B, "B");
function makeFetchBody(a) {
  return {
    query: (0, import_printer.print)(a.query),
    operationName: w(a.query),
    variables: a.variables || void 0,
    extensions: void 0
  };
}
__name(makeFetchBody, "makeFetchBody");
function makeFetchURL(a, b) {
  var c = a.context.url;
  if (a.kind !== "query" || !a.context.preferGetMethod || !b) {
    return c;
  }
  a = [];
  b.operationName && a.push("operationName=" + encodeURIComponent(b.operationName));
  b.query && a.push("query=" + encodeURIComponent(b.query.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()));
  b.variables && a.push("variables=" + encodeURIComponent(u(b.variables)));
  b.extensions && a.push("extensions=" + encodeURIComponent(u(b.extensions)));
  return c + "?" + a.join("&");
}
__name(makeFetchURL, "makeFetchURL");
function makeFetchOptions(a, b) {
  var c = a.kind === "query" && !!a.context.preferGetMethod;
  return B({}, a = typeof a.context.fetchOptions == "function" ? a.context.fetchOptions() : a.context.fetchOptions || {}, {
    body: !c && b ? JSON.stringify(b) : void 0,
    method: c ? "GET" : "POST",
    headers: c ? a.headers : B({}, {
      "content-type": "application/json"
    }, a.headers)
  });
}
__name(makeFetchOptions, "makeFetchOptions");
function makeFetchSource(a, b, c) {
  return make$1(function(d) {
    var e = d.next, f = d.complete, g = typeof AbortController != "undefined" ? new AbortController() : null, p2 = false;
    Promise.resolve().then(function() {
      if (!p2) {
        return g && (c.signal = g.signal), (/* @__PURE__ */ __name(function C2(a2, b2, c2) {
          var e2, d2 = false;
          return (a2.context.fetch || fetch)(b2, c2).then(function(a3) {
            e2 = a3;
            d2 = 200 > a3.status || a3.status >= (c2.redirect === "manual" ? 400 : 300);
            return a3.json();
          }).then(function(b3) {
            if (!("data" in b3) && !("errors" in b3)) {
              throw Error("No Content");
            }
            return z(a2, b3, e2);
          }).catch(function(b3) {
            if (b3.name !== "AbortError") {
              return A(a2, d2 ? Error(e2.statusText) : b3, e2);
            }
          });
        }, "C"))(a, b, c);
      }
    }).then(function(a2) {
      p2 || (p2 = true, a2 && e(a2), f());
    });
    return function() {
      p2 = true;
      g && g.abort();
    };
  });
}
__name(makeFetchSource, "makeFetchSource");
var m2;
var q;
var r2;
var x;
m2 = function(a) {
  function b(b2) {
    var f, c = b2.networkError, e = b2.response;
    f = (/* @__PURE__ */ __name(function h(a2, b3) {
      var d = "";
      if (a2 !== void 0) {
        return d = "[Network] " + a2.message;
      }
      b3 !== void 0 && b3.forEach(/* @__PURE__ */ __name(function c2(a3) {
        d += "[GraphQL] " + a3.message + "\n";
      }, "c"));
      return d.trim();
    }, "h"))(c, b2 = (b2.graphQLErrors || []).map(k));
    a.call(this, f);
    this.name = "CombinedError";
    this.message = f;
    this.graphQLErrors = b2;
    this.networkError = c;
    this.response = e;
  }
  __name(b, "b");
  a && (b.__proto__ = a);
  (b.prototype = Object.create(a && a.prototype)).constructor = b;
  b.prototype.toString = l2;
  return b;
}(Error);
q = new Set(), r2 = new WeakMap();
x = new Map();

export {
  Kind2 as Kind,
  u,
  Parser,
  w,
  z,
  A,
  B,
  makeFetchBody,
  makeFetchURL,
  makeFetchOptions,
  D,
  makeFetchSource,
  m2 as m,
  x,
  import_printer,
  filter$1,
  make$1,
  merge$1,
  share$1,
  takeUntil$1
};
//# sourceMappingURL=chunk.WGC3BMNJ.js.map
